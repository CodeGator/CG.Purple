{
  "api/CG.Puple.Host.Themes.DefaultTheme.html": {
    "href": "api/CG.Puple.Host.Themes.DefaultTheme.html",
    "title": "Class DefaultTheme",
    "keywords": "Class DefaultTheme This class represents the default MudBlazor UI theme. Inheritance System.Object DefaultTheme Namespace : CG.Puple.Host.Themes Assembly : CG.Purple.Host.dll Syntax public class DefaultTheme : MudTheme Constructors DefaultTheme() This constructor creates a new instance of the DefaultTheme class. Declaration protected DefaultTheme() Methods Instance() This method returns a singleton instance of DefaultTheme Declaration public static DefaultTheme Instance() Returns Type Description DefaultTheme The singleton instance of DefaultTheme"
  },
  "api/CG.Puple.Host.Themes.html": {
    "href": "api/CG.Puple.Host.Themes.html",
    "title": "Namespace CG.Puple.Host.Themes",
    "keywords": "Namespace CG.Puple.Host.Themes Classes DefaultTheme This class represents the default MudBlazor UI theme."
  },
  "api/CG.Purple.Directors.DirectorException.html": {
    "href": "api/CG.Purple.Directors.DirectorException.html",
    "title": "Class DirectorException",
    "keywords": "Class DirectorException This class represents a director related exception. Inheritance System.Object DirectorException Namespace : CG.Purple.Directors Assembly : CG.Purple.Primitives.dll Syntax public class DirectorException : Exception Constructors DirectorException() This constructor creates a new instance of the DirectorException class. Declaration public DirectorException() DirectorException(SerializationInfo, StreamingContext) This constructor creates a new instance of the DirectorException class. Declaration public DirectorException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The serialization info to use for the exception. StreamingContext context The streaming context to use for the exception. DirectorException(String) This constructor creates a new instance of the DirectorException class. Declaration public DirectorException(string message) Parameters Type Name Description System.String message The message to use for the exception. DirectorException(String, Exception) This constructor creates a new instance of the DirectorException class. Declaration public DirectorException(string message, Exception innerException) Parameters Type Name Description System.String message The message to use for the exception. Exception innerException An optional inner exception reference."
  },
  "api/CG.Purple.Directors.html": {
    "href": "api/CG.Purple.Directors.html",
    "title": "Namespace CG.Purple.Directors",
    "keywords": "Namespace CG.Purple.Directors Classes DirectorException This class represents a director related exception. Interfaces IProcessDirector This interface represents an object that performs message processing operations. ISeedDirector This interface represents an object that performs data seeding operations."
  },
  "api/CG.Purple.Directors.IProcessDirector.html": {
    "href": "api/CG.Purple.Directors.IProcessDirector.html",
    "title": "Interface IProcessDirector",
    "keywords": "Interface IProcessDirector This interface represents an object that performs message processing operations. Namespace : CG.Purple.Directors Assembly : CG.Purple.Abstractions.dll Syntax public interface IProcessDirector Methods ProcessMessagesAsync(CancellationToken) This method attempts to process all pending messages. Declaration Task ProcessMessagesAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition DirectorException This exception is thrown whenever the director fails to complete the operation."
  },
  "api/CG.Purple.Directors.ISeedDirector.html": {
    "href": "api/CG.Purple.Directors.ISeedDirector.html",
    "title": "Interface ISeedDirector",
    "keywords": "Interface ISeedDirector This interface represents an object that performs data seeding operations. Namespace : CG.Purple.Directors Assembly : CG.Purple.Abstractions.dll Syntax public interface ISeedDirector Methods SeedMailMessagesAsync(IConfiguration, String, Boolean, CancellationToken) This method performs a seeding operation for objects. Declaration Task SeedMailMessagesAsync(IConfiguration configuration, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description IConfiguration configuration The configuration to use for the operation. System.String userName The name of the user performing the operation. System.Boolean force true to force the seeding operation when there are existing objects in the underlying data-store; false otherwise. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition DirectorException This exception is thrown whenever the director fails to complete the operation. SeedMimeTypesAsync(IConfiguration, String, Boolean, CancellationToken) This method performs a seeding operation for objects. Declaration Task SeedMimeTypesAsync(IConfiguration configuration, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description IConfiguration configuration The configuration to use for the operation. System.String userName The name of the user performing the operation. System.Boolean force true to force the seeding operation when there are existing objects in the underlying data-store; false otherwise. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition DirectorException This exception is thrown whenever the director fails to complete the operation. SeedParameterTypesAsync(IConfiguration, String, Boolean, CancellationToken) This method performs a seeding operation for objects. Declaration Task SeedParameterTypesAsync(IConfiguration configuration, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description IConfiguration configuration The configuration to use for the operation. System.String userName The name of the user performing the operation. System.Boolean force true to force the seeding operation when there are existing objects in the underlying data-store; false otherwise. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition DirectorException This exception is thrown whenever the director fails to complete the operation. SeedProcessLogsAsync(IConfiguration, String, Boolean, CancellationToken) This method performs a seeding operation for objects. Declaration Task SeedProcessLogsAsync(IConfiguration configuration, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description IConfiguration configuration The configuration to use for the operation. System.String userName The name of the user performing the operation. System.Boolean force true to force the seeding operation when there are existing objects in the underlying data-store; false otherwise. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition DirectorException This exception is thrown whenever the director fails to complete the operation. SeedPropertyTypesAsync(IConfiguration, String, Boolean, CancellationToken) This method performs a seeding operation for objects. Declaration Task SeedPropertyTypesAsync(IConfiguration configuration, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description IConfiguration configuration The configuration to use for the operation. System.String userName The name of the user performing the operation. System.Boolean force true to force the seeding operation when there are existing objects in the underlying data-store; false otherwise. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition DirectorException This exception is thrown whenever the director fails to complete the operation. SeedProviderParametersAsync(IConfiguration, String, Boolean, CancellationToken) This method performs a seeding operation for objects. Declaration Task SeedProviderParametersAsync(IConfiguration configuration, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description IConfiguration configuration The configuration to use for the operation. System.String userName The name of the user performing the operation. System.Boolean force true to force the seeding operation when there are existing objects in the underlying data-store; false otherwise. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition DirectorException This exception is thrown whenever the director fails to complete the operation. SeedProviderTypesAsync(IConfiguration, String, Boolean, CancellationToken) This method performs a seeding operation for objects. Declaration Task SeedProviderTypesAsync(IConfiguration configuration, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description IConfiguration configuration The configuration to use for the operation. System.String userName The name of the user performing the operation. System.Boolean force true to force the seeding operation when there are existing objects in the underlying data-store; false otherwise. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition DirectorException This exception is thrown whenever the director fails to complete the operation. SeedTextMessagesAsync(IConfiguration, String, Boolean, CancellationToken) This method performs a seeding operation for objects. Declaration Task SeedTextMessagesAsync(IConfiguration configuration, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description IConfiguration configuration The configuration to use for the operation. System.String userName The name of the user performing the operation. System.Boolean force true to force the seeding operation when there are existing objects in the underlying data-store; false otherwise. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition DirectorException This exception is thrown whenever the director fails to complete the operation."
  },
  "api/CG.Purple.Host.Pages.ErrorModel.html": {
    "href": "api/CG.Purple.Host.Pages.ErrorModel.html",
    "title": "Class ErrorModel",
    "keywords": "Class ErrorModel This class is the code-behind for the Error page. Inheritance System.Object ErrorModel Namespace : CG.Purple.Host.Pages Assembly : CG.Purple.Host.dll Syntax public class ErrorModel : PageModel Constructors ErrorModel(ILogger<ErrorModel>) This constructor creates a new instance of the ErrorModel class. Declaration public ErrorModel(ILogger<ErrorModel> logger) Parameters Type Name Description ILogger < ErrorModel > logger The logger for this model Properties RequestId This property contains the request identifier for this model. Declaration public string RequestId { get; set; } Property Value Type Description System.String ShowRequestId This property indicates whether or not to show the RequestId property on the error page. Declaration public bool ShowRequestId { get; } Property Value Type Description System.Boolean Methods OnGet() This method is called when the page receives an HTTP GET verb. Declaration public void OnGet()"
  },
  "api/CG.Purple.Host.Pages.Help.About.AssemblyModel.html": {
    "href": "api/CG.Purple.Host.Pages.Help.About.AssemblyModel.html",
    "title": "Class AssemblyModel",
    "keywords": "Class AssemblyModel This class represents the model for a .NET assembly. Inheritance System.Object AssemblyModel Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.Pages.Help.About Assembly : CG.Purple.Host.dll Syntax public class AssemblyModel Properties Company This property contains the company of the assembly. Declaration public string Company { get; set; } Property Value Type Description System.String Name This property contains the name of the assembly. Declaration public string Name { get; set; } Property Value Type Description System.String Version This property contains the version of the assembly. Declaration public string Version { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Host.Pages.Help.About.html": {
    "href": "api/CG.Purple.Host.Pages.Help.About.html",
    "title": "Namespace CG.Purple.Host.Pages.Help.About",
    "keywords": "Namespace CG.Purple.Host.Pages.Help.About Classes AssemblyModel This class represents the model for a .NET assembly. Index This class is the code-behind for the Index page."
  },
  "api/CG.Purple.Host.Pages.Help.About.Index.html": {
    "href": "api/CG.Purple.Host.Pages.Help.About.Index.html",
    "title": "Class Index",
    "keywords": "Class Index This class is the code-behind for the Index page. Inheritance System.Object Index Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.Pages.Help.About Assembly : CG.Purple.Host.dll Syntax public class Index Methods OnInitializedAsync() This method is called by the framework to initialize the page. Declaration protected override async Task OnInitializedAsync() Returns Type Description Task A task to perform the operation."
  },
  "api/CG.Purple.Host.Pages.html": {
    "href": "api/CG.Purple.Host.Pages.html",
    "title": "Namespace CG.Purple.Host.Pages",
    "keywords": "Namespace CG.Purple.Host.Pages Classes ErrorModel This class is the code-behind for the Error page."
  },
  "api/CG.Purple.Host.Pages.Messages.html": {
    "href": "api/CG.Purple.Host.Pages.Messages.html",
    "title": "Namespace CG.Purple.Host.Pages.Messages",
    "keywords": "Namespace CG.Purple.Host.Pages.Messages Classes Index This class is the code-behind for the Index page."
  },
  "api/CG.Purple.Host.Pages.Messages.Index.html": {
    "href": "api/CG.Purple.Host.Pages.Messages.Index.html",
    "title": "Class Index",
    "keywords": "Class Index This class is the code-behind for the Index page. Inheritance System.Object Index Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.Pages.Messages Assembly : CG.Purple.Host.dll Syntax public class Index Properties DialogService This property contains the dialog service for this page. Declaration protected IDialogService DialogService { get; set; } Property Value Type Description IDialogService HttpContextAccessor This property contains the HTTP context accessor. Declaration protected IHttpContextAccessor HttpContextAccessor { get; set; } Property Value Type Description IHttpContextAccessor MailManager This property contains the mail message manager for this page. Declaration protected IMailMessageManager MailManager { get; set; } Property Value Type Description IMailMessageManager SnackbarService This property contains the snackbar service for this page. Declaration protected ISnackbar SnackbarService { get; set; } Property Value Type Description ISnackbar TextManager This property contains the text message manager for this page. Declaration protected ITextMessageManager TextManager { get; set; } Property Value Type Description ITextMessageManager UserName This property contains the name of the current user, or the word 'anonymous' if nobody is currently authenticated. Declaration protected string UserName { get; } Property Value Type Description System.String Methods MailFilterFunc(MailMessage, String) This method performs a search of the mail messages. Declaration protected bool MailFilterFunc(MailMessage element, string searchString) Parameters Type Name Description MailMessage element The element to uses for the operation. System.String searchString The search string to use for the operation. Returns Type Description System.Boolean true if a match was found; false otherwise. MailFilterFunc1(MailMessage) This method adapts the MailFilterFunc(MailMessage, String) method for use with a control. Declaration protected bool MailFilterFunc1(MailMessage element) Parameters Type Name Description MailMessage element The element to use for the operation. Returns Type Description System.Boolean true if a match was found; false otherwise. OnInitializedAsync() This method is called by the framework to initialize the page. Declaration protected override async Task OnInitializedAsync() Returns Type Description Task A task to perform the operation. OnRefreshMailMessages() This method manually refreshes the mail messages collection. Declaration protected async Task OnRefreshMailMessages() Returns Type Description Task OnRefreshTextMessages() This method manually refreshes the text messages collection. Declaration protected async Task OnRefreshTextMessages() Returns Type Description Task TextFilterFunc(TextMessage, String) This method performs a search of the text messages. Declaration protected bool TextFilterFunc(TextMessage element, string searchString) Parameters Type Name Description TextMessage element The element to uses for the operation. System.String searchString The search string to use for the operation. Returns Type Description System.Boolean true if a match was found; false otherwise. TextFilterFunc1(TextMessage) This method adapts the TextFilterFunc(TextMessage, String) method for use with a control. Declaration protected bool TextFilterFunc1(TextMessage element) Parameters Type Name Description TextMessage element The element to use for the operation. Returns Type Description System.Boolean true if a match was found; false otherwise."
  },
  "api/CG.Purple.Host.SignalR.html": {
    "href": "api/CG.Purple.Host.SignalR.html",
    "title": "Namespace CG.Purple.Host.SignalR",
    "keywords": "Namespace CG.Purple.Host.SignalR Classes StatusHub This class is a SignalR hub for the status back channel."
  },
  "api/CG.Purple.Host.SignalR.StatusHub.html": {
    "href": "api/CG.Purple.Host.SignalR.StatusHub.html",
    "title": "Class StatusHub",
    "keywords": "Class StatusHub This class is a SignalR hub for the status back channel. Inheritance System.Object StatusHub Namespace : CG.Purple.Host.SignalR Assembly : CG.Purple.Host.dll Syntax public class StatusHub : Hub Constructors StatusHub() This constructor creates a new instance of the StatusHub class. Declaration public StatusHub() Methods OnStatusChangeAsync(CancellationToken) This method sends a status change notification. Declaration public async Task OnStatusChangeAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token. Returns Type Description Task A task to perform the operation."
  },
  "api/CG.Purple.Managers.html": {
    "href": "api/CG.Purple.Managers.html",
    "title": "Namespace CG.Purple.Managers",
    "keywords": "Namespace CG.Purple.Managers Classes ManagerException This class represents a manager related exception. ProcessLogManagerExtensions001 This class contains extension methods related to the IProcessLogManager type. Interfaces IAttachmentManager This interface represents an object that manages operations related to objects. IFileTypeManager This interface represents an object that manages operations related to objects. IMailMessageManager This interface represents an object that manages operations related to objects. IMessageManager This interface represents an object that manages operations related to objects. IMessagePropertyManager This interface represents an object that manages operations related to objects. IMimeTypeManager This interface represents an object that manages operations related to objects. IParameterTypeManager This interface represents an object that manages operations related to objects. IProcessLogManager This interface represents an object that manages operations related to objects. IPropertyTypeManager This interface represents an object that manages operations related to objects. IProviderParameterManager This interface represents an object that manages operations related to objects. IProviderTypeManager This interface represents an object that manages operations related to objects. ITextMessageManager This interface represents an object that manages operations related to objects."
  },
  "api/CG.Purple.Managers.IAttachmentManager.html": {
    "href": "api/CG.Purple.Managers.IAttachmentManager.html",
    "title": "Interface IAttachmentManager",
    "keywords": "Interface IAttachmentManager This interface represents an object that manages operations related to objects. Namespace : CG.Purple.Managers Assembly : CG.Purple.Abstractions.dll Syntax public interface IAttachmentManager Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CreateAsync(Attachment, String, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<Attachment> CreateAsync(Attachment attachment, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description Attachment attachment The model to create in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < Attachment > A task to perform the operation that returns the newly created object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. DeleteAsync(Attachment, String, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(Attachment attachment, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description Attachment attachment The model to delete from the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. UpdateAsync(Attachment, String, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<Attachment> UpdateAsync(Attachment attachment, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description Attachment attachment The model to update in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < Attachment > A task to perform the operation that returns the newly updated object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation."
  },
  "api/CG.Purple.Managers.IFileTypeManager.html": {
    "href": "api/CG.Purple.Managers.IFileTypeManager.html",
    "title": "Interface IFileTypeManager",
    "keywords": "Interface IFileTypeManager This interface represents an object that manages operations related to objects. Namespace : CG.Purple.Managers Assembly : CG.Purple.Abstractions.dll Syntax public interface IFileTypeManager Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CreateAsync(FileType, String, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<FileType> CreateAsync(FileType fileType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description FileType fileType The model to create in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < FileType > A task to perform the operation that returns the newly created object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. DeleteAsync(FileType, String, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(FileType fileType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description FileType fileType The model to delete from the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindByExtensionAsync(String, CancellationToken) This method searches for a single matching object using the given file extension. Declaration Task<FileType?> FindByExtensionAsync(string extension, CancellationToken cancellationToken = null) Parameters Type Name Description System.String extension The file extension to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < FileType >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. UpdateAsync(FileType, String, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<FileType> UpdateAsync(FileType fileType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description FileType fileType The model to update in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < FileType > A task to perform the operation that returns the newly updated object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation."
  },
  "api/CG.Purple.Managers.IMailMessageManager.html": {
    "href": "api/CG.Purple.Managers.IMailMessageManager.html",
    "title": "Interface IMailMessageManager",
    "keywords": "Interface IMailMessageManager This interface represents an object that manages operations related to objects. Namespace : CG.Purple.Managers Assembly : CG.Purple.Abstractions.dll Syntax public interface IMailMessageManager Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CreateAsync(MailMessage, String, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<MailMessage> CreateAsync(MailMessage mailMessage, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MailMessage mailMessage The model to create in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MailMessage > A task to perform the operation that returns the newly created object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. DeleteAsync(MailMessage, String, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(MailMessage mailMessage, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MailMessage mailMessage The model to delete from the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindAllAsync(CancellationToken) This method searches for a sequence of objects. Declaration Task<IEnumerable<MailMessage>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < MailMessage >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindByIdAsync(Int64, CancellationToken) This method searches for a single matching object using the given identifier. Declaration Task<MailMessage?> FindByIdAsync(long id, CancellationToken cancellationToken = null) Parameters Type Name Description System.Int64 id The message identifier to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < MailMessage >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindByKeyAsync(String, CancellationToken) This method searches for a single matching object using the given message key. Declaration Task<MailMessage?> FindByKeyAsync(string messageKey, CancellationToken cancellationToken = null) Parameters Type Name Description System.String messageKey The message key to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < MailMessage >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindPendingAsync(CancellationToken) This method searches for a sequence of objects that are not disabled, or sent, or processed. Declaration Task<IEnumerable<MailMessage>> FindPendingAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < MailMessage >> A task to perform the operation that returns a sequence of matching objects. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. UpdateAsync(MailMessage, String, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<MailMessage> UpdateAsync(MailMessage mailMessage, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MailMessage mailMessage The model to update in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MailMessage > A task to perform the operation that returns the newly updated object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation."
  },
  "api/CG.Purple.Managers.IMessageManager.html": {
    "href": "api/CG.Purple.Managers.IMessageManager.html",
    "title": "Interface IMessageManager",
    "keywords": "Interface IMessageManager This interface represents an object that manages operations related to objects. Namespace : CG.Purple.Managers Assembly : CG.Purple.Abstractions.dll Syntax public interface IMessageManager Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindAllAsync(CancellationToken) This method searches for a sequence of objects. Declaration Task<IEnumerable<Message>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < Message >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindByIdAsync(Int64, CancellationToken) This method searches for a single matching object using the given identifier. Declaration Task<Message?> FindByIdAsync(long id, CancellationToken cancellationToken = null) Parameters Type Name Description System.Int64 id The message identifier to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < Message >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindByKeyAsync(String, CancellationToken) This method searches for a single matching object using the given message key. Declaration Task<Message?> FindByKeyAsync(string messageKey, CancellationToken cancellationToken = null) Parameters Type Name Description System.String messageKey The message key to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < Message >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindReadyToProcessAsync(CancellationToken) This method searches for a sequence of objects that are not disabled, or sent, or processed. Declaration Task<IEnumerable<Message>> FindReadyToProcessAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < Message >> A task to perform the operation that returns a sequence of matching objects. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. UpdateAsync(Message, String, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<Message> UpdateAsync(Message message, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description Message message The model to update in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < Message > A task to perform the operation that returns the newly updated object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation."
  },
  "api/CG.Purple.Managers.IMessagePropertyManager.html": {
    "href": "api/CG.Purple.Managers.IMessagePropertyManager.html",
    "title": "Interface IMessagePropertyManager",
    "keywords": "Interface IMessagePropertyManager This interface represents an object that manages operations related to objects. Namespace : CG.Purple.Managers Assembly : CG.Purple.Abstractions.dll Syntax public interface IMessagePropertyManager Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CreateAsync(MessageProperty, String, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<MessageProperty> CreateAsync(MessageProperty messageProperty, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MessageProperty messageProperty The model to create in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MessageProperty > A task to perform the operation that returns the newly created object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. DeleteAsync(MessageProperty, String, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(MessageProperty messageProperty, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MessageProperty messageProperty The model to delete from the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. UpdateAsync(MessageProperty, String, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<MessageProperty> UpdateAsync(MessageProperty messageProperty, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MessageProperty messageProperty The model to update in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MessageProperty > A task to perform the operation that returns the newly updated object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation."
  },
  "api/CG.Purple.Managers.IMimeTypeManager.html": {
    "href": "api/CG.Purple.Managers.IMimeTypeManager.html",
    "title": "Interface IMimeTypeManager",
    "keywords": "Interface IMimeTypeManager This interface represents an object that manages operations related to objects. Namespace : CG.Purple.Managers Assembly : CG.Purple.Abstractions.dll Syntax public interface IMimeTypeManager Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CreateAsync(MimeType, String, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<MimeType> CreateAsync(MimeType mimeType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MimeType mimeType The model to create in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MimeType > A task to perform the operation that returns the newly created object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. DeleteAsync(MimeType, String, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(MimeType mimeType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MimeType mimeType The model to delete from the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindByExtensionAsync(String, CancellationToken) This method searches for a single matching object using the given file extension. Declaration Task<MimeType?> FindByExtensionAsync(string extension, CancellationToken cancellationToken = null) Parameters Type Name Description System.String extension The file extension to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < MimeType >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindByTypeAsync(String, String, CancellationToken) This method searches for matching objects using the given type and/or subtype. Declaration Task<IEnumerable<MimeType>> FindByTypeAsync(string type, string subType, CancellationToken cancellationToken = null) Parameters Type Name Description System.String type The MIME type to use for the search. System.String subType The MIME sub-type to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < MimeType >> A task to perform the operation that returns the results of the search. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. UpdateAsync(MimeType, String, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<MimeType> UpdateAsync(MimeType mimeType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MimeType mimeType The model to update in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MimeType > A task to perform the operation that returns the newly updated object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation."
  },
  "api/CG.Purple.Managers.IParameterTypeManager.html": {
    "href": "api/CG.Purple.Managers.IParameterTypeManager.html",
    "title": "Interface IParameterTypeManager",
    "keywords": "Interface IParameterTypeManager This interface represents an object that manages operations related to objects. Namespace : CG.Purple.Managers Assembly : CG.Purple.Abstractions.dll Syntax public interface IParameterTypeManager Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CreateAsync(ParameterType, String, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<ParameterType> CreateAsync(ParameterType parameterType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ParameterType parameterType The model to create in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ParameterType > A task to perform the operation that returns the newly created object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. DeleteAsync(ParameterType, String, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(ParameterType parameterType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ParameterType parameterType The model to delete from the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindByNameAsync(String, CancellationToken) This method searches for a single matching object using the given name. Declaration Task<ParameterType?> FindByNameAsync(string name, CancellationToken cancellationToken = null) Parameters Type Name Description System.String name The name to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < ParameterType >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. UpdateAsync(ParameterType, String, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<ParameterType> UpdateAsync(ParameterType parameterType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ParameterType parameterType The model to update in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ParameterType > A task to perform the operation that returns the newly updated object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation."
  },
  "api/CG.Purple.Managers.IProcessLogManager.html": {
    "href": "api/CG.Purple.Managers.IProcessLogManager.html",
    "title": "Interface IProcessLogManager",
    "keywords": "Interface IProcessLogManager This interface represents an object that manages operations related to objects. Namespace : CG.Purple.Managers Assembly : CG.Purple.Abstractions.dll Syntax public interface IProcessLogManager Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CreateAsync(ProcessLog, String, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<ProcessLog> CreateAsync(ProcessLog providerLog, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ProcessLog providerLog The model to create in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProcessLog > A task to perform the operation that returns the newly created object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. DeleteAsync(ProcessLog, String, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(ProcessLog providerLog, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ProcessLog providerLog The model to delete from the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. UpdateAsync(ProcessLog, String, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<ProcessLog> UpdateAsync(ProcessLog providerLog, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ProcessLog providerLog The model to update in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProcessLog > A task to perform the operation that returns the newly updated object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. Extension Methods ProcessLogManagerExtensions001.LogErrorEventAsync(IProcessLogManager, Exception, String, CancellationToken) ProcessLogManagerExtensions001.LogErrorEventAsync(IProcessLogManager, Message, Exception, String, CancellationToken) ProcessLogManagerExtensions001.LogErrorEventAsync(IProcessLogManager, Message, MessageState, Exception, String, CancellationToken) ProcessLogManagerExtensions001.LogErrorEventAsync(IProcessLogManager, String, String, CancellationToken) ProcessLogManagerExtensions001.LogErrorEventAsync(IProcessLogManager, Message, MessageState, String, String, CancellationToken) ProcessLogManagerExtensions001.LogErrorEventAsync(IProcessLogManager, Message, String, String, CancellationToken) ProcessLogManagerExtensions001.LogStoredEventAsync(IProcessLogManager, Message, String, CancellationToken) ProcessLogManagerExtensions001.LogAssignedEventAsync(IProcessLogManager, Message, MessageState, ProviderType, String, CancellationToken) ProcessLogManagerExtensions001.LogResetEventAsync(IProcessLogManager, Message, MessageState, String, CancellationToken) ProcessLogManagerExtensions001.LogDisabledEventAsync(IProcessLogManager, Message, MessageState, String, CancellationToken) ProcessLogManagerExtensions001.LogEnabledEventAsync(IProcessLogManager, Message, MessageState, String, CancellationToken) ProcessLogManagerExtensions001.LogSentEventAsync(IProcessLogManager, Message, MessageState, String, CancellationToken)"
  },
  "api/CG.Purple.Managers.IPropertyTypeManager.html": {
    "href": "api/CG.Purple.Managers.IPropertyTypeManager.html",
    "title": "Interface IPropertyTypeManager",
    "keywords": "Interface IPropertyTypeManager This interface represents an object that manages operations related to objects. Namespace : CG.Purple.Managers Assembly : CG.Purple.Abstractions.dll Syntax public interface IPropertyTypeManager Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CreateAsync(PropertyType, String, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<PropertyType> CreateAsync(PropertyType propertyType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description PropertyType propertyType The model to create in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < PropertyType > A task to perform the operation that returns the newly created object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. DeleteAsync(PropertyType, String, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(PropertyType propertyType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description PropertyType propertyType The model to delete from the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindByNameAsync(String, CancellationToken) This method searches for a single matching object using the given name. Declaration Task<PropertyType?> FindByNameAsync(string name, CancellationToken cancellationToken = null) Parameters Type Name Description System.String name The name to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < PropertyType >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. UpdateAsync(PropertyType, String, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<PropertyType> UpdateAsync(PropertyType propertyType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description PropertyType propertyType The model to update in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < PropertyType > A task to perform the operation that returns the newly updated object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation."
  },
  "api/CG.Purple.Managers.IProviderParameterManager.html": {
    "href": "api/CG.Purple.Managers.IProviderParameterManager.html",
    "title": "Interface IProviderParameterManager",
    "keywords": "Interface IProviderParameterManager This interface represents an object that manages operations related to objects. Namespace : CG.Purple.Managers Assembly : CG.Purple.Abstractions.dll Syntax public interface IProviderParameterManager Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CreateAsync(ProviderParameter, String, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<ProviderParameter> CreateAsync(ProviderParameter providerParameter, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderParameter providerParameter The model to create in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProviderParameter > A task to perform the operation that returns the newly created object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. DeleteAsync(ProviderParameter, String, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(ProviderParameter providerParameter, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderParameter providerParameter The model to delete from the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. UpdateAsync(ProviderParameter, String, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<ProviderParameter> UpdateAsync(ProviderParameter providerParameter, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderParameter providerParameter The model to update in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProviderParameter > A task to perform the operation that returns the newly updated object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation."
  },
  "api/CG.Purple.Managers.IProviderTypeManager.html": {
    "href": "api/CG.Purple.Managers.IProviderTypeManager.html",
    "title": "Interface IProviderTypeManager",
    "keywords": "Interface IProviderTypeManager This interface represents an object that manages operations related to objects. Namespace : CG.Purple.Managers Assembly : CG.Purple.Abstractions.dll Syntax public interface IProviderTypeManager Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CreateAsync(ProviderType, String, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<ProviderType> CreateAsync(ProviderType providerType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderType providerType The model to create in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProviderType > A task to perform the operation that returns the newly created object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. DeleteAsync(ProviderType, String, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(ProviderType providerType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderType providerType The model to delete from the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindAllAsync(CancellationToken) This method searches for a sequence of objects. Declaration Task<IEnumerable<ProviderType>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < ProviderType >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindByNameAsync(String, CancellationToken) This method searches for a single matching object using the given name. Declaration Task<ProviderType?> FindByNameAsync(string name, CancellationToken cancellationToken = null) Parameters Type Name Description System.String name The name to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < ProviderType >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindForEmailsAsync(CancellationToken) This method searches for a sequence of objects that are capable of processing emails. Declaration Task<IEnumerable<ProviderType>> FindForEmailsAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < ProviderType >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindForTextsAsync(CancellationToken) This method searches for a sequence of objects that are capable of processing texts. Declaration Task<IEnumerable<ProviderType>> FindForTextsAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < ProviderType >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. UpdateAsync(ProviderType, String, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<ProviderType> UpdateAsync(ProviderType providerType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderType providerType The model to update in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProviderType > A task to perform the operation that returns the newly updated object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation."
  },
  "api/CG.Purple.Managers.ITextMessageManager.html": {
    "href": "api/CG.Purple.Managers.ITextMessageManager.html",
    "title": "Interface ITextMessageManager",
    "keywords": "Interface ITextMessageManager This interface represents an object that manages operations related to objects. Namespace : CG.Purple.Managers Assembly : CG.Purple.Abstractions.dll Syntax public interface ITextMessageManager Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CreateAsync(TextMessage, String, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<TextMessage> CreateAsync(TextMessage textMessage, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description TextMessage textMessage The model to create in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < TextMessage > A task to perform the operation that returns the newly created object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. DeleteAsync(TextMessage, String, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(TextMessage textMessage, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description TextMessage textMessage The model to delete from the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindAllAsync(CancellationToken) This method searches for a sequence of objects. Declaration Task<IEnumerable<TextMessage>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < TextMessage >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindByIdAsync(Int64, CancellationToken) This method searches for a single matching object using the given identifier. Declaration Task<TextMessage?> FindByIdAsync(long id, CancellationToken cancellationToken = null) Parameters Type Name Description System.Int64 id The message identifier to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < TextMessage >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindByKeyAsync(String, CancellationToken) This method searches for a single matching object using the given message key. Declaration Task<TextMessage?> FindByKeyAsync(string messageKey, CancellationToken cancellationToken = null) Parameters Type Name Description System.String messageKey The message key to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < TextMessage >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindPendingAsync(CancellationToken) This method searches for a sequence of objects that are not disabled, or sent, or processed. Declaration Task<IEnumerable<TextMessage>> FindPendingAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < TextMessage >> A task to perform the operation that returns a sequence of matching objects. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. UpdateAsync(TextMessage, String, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<TextMessage> UpdateAsync(TextMessage textMessage, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description TextMessage textMessage The model to update in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < TextMessage > A task to perform the operation that returns the newly updated object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation."
  },
  "api/CG.Purple.Managers.ManagerException.html": {
    "href": "api/CG.Purple.Managers.ManagerException.html",
    "title": "Class ManagerException",
    "keywords": "Class ManagerException This class represents a manager related exception. Inheritance System.Object ManagerException Namespace : CG.Purple.Managers Assembly : CG.Purple.Primitives.dll Syntax public class ManagerException : Exception Constructors ManagerException() This constructor creates a new instance of the ManagerException class. Declaration public ManagerException() ManagerException(SerializationInfo, StreamingContext) This constructor creates a new instance of the ManagerException class. Declaration public ManagerException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The serialization info to use for the exception. StreamingContext context The streaming context to use for the exception. ManagerException(String) This constructor creates a new instance of the ManagerException class. Declaration public ManagerException(string message) Parameters Type Name Description System.String message The message to use for the exception. ManagerException(String, Exception) This constructor creates a new instance of the ManagerException class. Declaration public ManagerException(string message, Exception innerException) Parameters Type Name Description System.String message The message to use for the exception. Exception innerException An optional inner exception reference."
  },
  "api/CG.Purple.Managers.ProcessLogManagerExtensions001.html": {
    "href": "api/CG.Purple.Managers.ProcessLogManagerExtensions001.html",
    "title": "Class ProcessLogManagerExtensions001",
    "keywords": "Class ProcessLogManagerExtensions001 This class contains extension methods related to the IProcessLogManager type. Inheritance System.Object ProcessLogManagerExtensions001 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Managers Assembly : CG.Purple.Abstractions.dll Syntax public static class ProcessLogManagerExtensions001 Methods LogAssignedEventAsync(IProcessLogManager, Message, MessageState, ProviderType, String, CancellationToken) This method writes an event to the processing log, for an even that caused a state transition in the associated message. Declaration public static async Task<ProcessLog> LogAssignedEventAsync(this IProcessLogManager processLogManager, Message message, MessageState previousMessageState, ProviderType providerType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description IProcessLogManager processLogManager The process log manager to use for the operation. Message message The message to use for the operation. MessageState previousMessageState The message state before the event took place. ProviderType providerType The provider type to use for the operation. System.String userName The user name of the perform performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProcessLog > A task to perform the operation that returns the newly created object. LogDisabledEventAsync(IProcessLogManager, Message, MessageState, String, CancellationToken) This method writes a event to the processing log. Declaration public static async Task<ProcessLog> LogDisabledEventAsync(this IProcessLogManager processLogManager, Message message, MessageState previousMessageState, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description IProcessLogManager processLogManager The process log manager to use for the operation. Message message The message to use for the operation. MessageState previousMessageState The message state before the event took place. System.String userName The user name of the perform performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProcessLog > A task to perform the operation that returns the newly created object. LogEnabledEventAsync(IProcessLogManager, Message, MessageState, String, CancellationToken) This method writes an event to the processing log. Declaration public static async Task<ProcessLog> LogEnabledEventAsync(this IProcessLogManager processLogManager, Message message, MessageState previousMessageState, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description IProcessLogManager processLogManager The process log manager to use for the operation. Message message The message to use for the operation. MessageState previousMessageState The message state before the event took place. System.String userName The user name of the perform performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProcessLog > A task to perform the operation that returns the newly created object. LogErrorEventAsync(IProcessLogManager, Exception, String, CancellationToken) This method writes an event to the processing log. Declaration public static async Task<ProcessLog> LogErrorEventAsync(this IProcessLogManager processLogManager, Exception ex, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description IProcessLogManager processLogManager The process log manager to use for the operation. Exception ex The exception to use for the operation. System.String userName The user name of the perform performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProcessLog > A task to perform the operation that returns the newly created object. LogErrorEventAsync(IProcessLogManager, Message, Exception, String, CancellationToken) This method writes an event to the processing log, for an even that did not cause a state transition in the associated message. Declaration public static async Task<ProcessLog> LogErrorEventAsync(this IProcessLogManager processLogManager, Message message, Exception ex, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description IProcessLogManager processLogManager The process log manager to use for the operation. Message message The optional message to use for the operation. Exception ex The exception to use for the operation. System.String userName The user name of the perform performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProcessLog > A task to perform the operation that returns the newly created object. LogErrorEventAsync(IProcessLogManager, Message, MessageState, Exception, String, CancellationToken) This method writes an event to the processing log, for an even that caused a state transition in the associated message. Declaration public static async Task<ProcessLog> LogErrorEventAsync(this IProcessLogManager processLogManager, Message message, MessageState previousMessageState, Exception ex, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description IProcessLogManager processLogManager The process log manager to use for the operation. Message message The optional message to use for the operation. MessageState previousMessageState The message state before the event took place. Exception ex The exception to use for the operation. System.String userName The user name of the perform performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProcessLog > A task to perform the operation that returns the newly created object. LogErrorEventAsync(IProcessLogManager, Message, MessageState, String, String, CancellationToken) This method writes an event to the processing log, for an even that caused a state transition in the associated message. Declaration public static async Task<ProcessLog> LogErrorEventAsync(this IProcessLogManager processLogManager, Message message, MessageState previousMessageState, string errorMessage, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description IProcessLogManager processLogManager The process log manager to use for the operation. Message message The message to use for the operation. MessageState previousMessageState The message state before the event took place. System.String errorMessage The error message to use for the operation. System.String userName The user name of the perform performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProcessLog > A task to perform the operation that returns the newly created object. LogErrorEventAsync(IProcessLogManager, Message, String, String, CancellationToken) This method writes an event to the processing log, for an even that did not cause a state transition in the associated message. Declaration public static async Task<ProcessLog> LogErrorEventAsync(this IProcessLogManager processLogManager, Message message, string errorMessage, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description IProcessLogManager processLogManager The process log manager to use for the operation. Message message The message to use for the operation. System.String errorMessage The error message to use for the operation. System.String userName The user name of the perform performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProcessLog > A task to perform the operation that returns the newly created object. LogErrorEventAsync(IProcessLogManager, String, String, CancellationToken) This method writes an event to the processing log. Declaration public static async Task<ProcessLog> LogErrorEventAsync(this IProcessLogManager processLogManager, string errorMessage, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description IProcessLogManager processLogManager The process log manager to use for the operation. System.String errorMessage The error message to use for the operation. System.String userName The user name of the perform performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProcessLog > A task to perform the operation that returns the newly created object. LogResetEventAsync(IProcessLogManager, Message, MessageState, String, CancellationToken) This method writes an event to the processing log, for an even that caused a state transition in the associated message. Declaration public static async Task<ProcessLog> LogResetEventAsync(this IProcessLogManager processLogManager, Message message, MessageState previousMessageState, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description IProcessLogManager processLogManager The process log manager to use for the operation. Message message The message to use for the operation. MessageState previousMessageState The message state before the event took place. System.String userName The user name of the perform performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProcessLog > A task to perform the operation that returns the newly created object. LogSentEventAsync(IProcessLogManager, Message, MessageState, String, CancellationToken) This method writes an event to the processing log. Declaration public static async Task<ProcessLog> LogSentEventAsync(this IProcessLogManager processLogManager, Message message, MessageState previousMessageState, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description IProcessLogManager processLogManager The process log manager to use for the operation. Message message The message to use for the operation. MessageState previousMessageState The message state before the event took place. System.String userName The user name of the perform performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProcessLog > A task to perform the operation that returns the newly created object. LogStoredEventAsync(IProcessLogManager, Message, String, CancellationToken) This method writes an event to the processing log, for an even that did not cause a state transition in the associated message. Declaration public static async Task<ProcessLog> LogStoredEventAsync(this IProcessLogManager processLogManager, Message message, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description IProcessLogManager processLogManager The process log manager to use for the operation. Message message The message to use for the operation. System.String userName The user name of the perform performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProcessLog > A task to perform the operation that returns the newly created object."
  },
  "api/CG.Purple.Models.Attachment.html": {
    "href": "api/CG.Purple.Models.Attachment.html",
    "title": "Class Attachment",
    "keywords": "Class Attachment This class represents a message attachment model. Inheritance System.Object ModelBase Attachment Inherited Members ModelBase.CreatedBy ModelBase.CreatedOnUtc ModelBase.LastUpdatedBy ModelBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public class Attachment : ModelBase Properties Data This property contains the bits for the attachment. Declaration public byte[] Data { get; set; } Property Value Type Description System.Byte [] Id This property contains the unique identifier for the attachment. Declaration public long Id { get; set; } Property Value Type Description System.Int64 Length This property contains the length, in bits, for the attachment. Declaration public long Length { get; set; } Property Value Type Description System.Int64 Message This property contains the associated message. Declaration public virtual Message Message { get; set; } Property Value Type Description Message MimeType This property contains the associated MIME type. Declaration public virtual MimeType MimeType { get; set; } Property Value Type Description MimeType OriginalFileName This property contains the original file name for the attachment. Declaration public string OriginalFileName { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Models.FileType.html": {
    "href": "api/CG.Purple.Models.FileType.html",
    "title": "Class FileType",
    "keywords": "Class FileType This class represents a file type model. Inheritance System.Object ModelBase FileType Inherited Members ModelBase.CreatedBy ModelBase.CreatedOnUtc ModelBase.LastUpdatedBy ModelBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public class FileType : ModelBase Properties Extension This property contains the extension for the file type. Declaration public string Extension { get; set; } Property Value Type Description System.String Id This property contains the unique identifier for the file type. Declaration public int Id { get; set; } Property Value Type Description System.Int32 MimeType This property contains the associated MIME type. Declaration public virtual MimeType MimeType { get; set; } Property Value Type Description MimeType"
  },
  "api/CG.Purple.Models.html": {
    "href": "api/CG.Purple.Models.html",
    "title": "Namespace CG.Purple.Models",
    "keywords": "Namespace CG.Purple.Models Classes Attachment This class represents a message attachment model. FileType This class represents a file type model. MailMessage This class represents a notification email model. Message This class represents a notification message model. MessageEqualityComparer This class is a custom equality comparer for the Message type. MessageProperty This class represents a message property model. MimeType This class represents a MIME type model. ModelBase This class represents a base model. ParameterType This class represents a provider parameter type model. ProcessLog This class represents a provider log model. PropertyType This class represents a property type model. ProviderParameter This class represents a provider parameter model. ProviderType This class represents a message provider type model. TextMessage This class represents a notification text model. Enums MessageState This enumeration represents the valid message states. MessageType This enumeration represents the valid message types. ProcessEvent This enumeration represents the valid process events."
  },
  "api/CG.Purple.Models.MailMessage.html": {
    "href": "api/CG.Purple.Models.MailMessage.html",
    "title": "Class MailMessage",
    "keywords": "Class MailMessage This class represents a notification email model. Inheritance System.Object ModelBase Message MailMessage Inherited Members Message.Id Message.MessageKey Message.From Message.MessageType Message.MessageState Message.IsDisabled Message.Priority Message.MessageProperties Message.Attachments ModelBase.CreatedBy ModelBase.CreatedOnUtc ModelBase.LastUpdatedBy ModelBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public class MailMessage : Message Properties BCC This property contains the BCC address for the message. Declaration public string BCC { get; set; } Property Value Type Description System.String Body This property contains the body for the message. Declaration public string Body { get; set; } Property Value Type Description System.String CC This property contains the CC address for the message. Declaration public string CC { get; set; } Property Value Type Description System.String IsHtml This property indicates whether the Body property contains formatted HTML, or not. Declaration public bool IsHtml { get; set; } Property Value Type Description System.Boolean Subject This property contains the subject for the message. Declaration public string Subject { get; set; } Property Value Type Description System.String To This property contains the to address for the message. Declaration public string To { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Models.Message.html": {
    "href": "api/CG.Purple.Models.Message.html",
    "title": "Class Message",
    "keywords": "Class Message This class represents a notification message model. Inheritance System.Object ModelBase Message MailMessage TextMessage Inherited Members ModelBase.CreatedBy ModelBase.CreatedOnUtc ModelBase.LastUpdatedBy ModelBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public class Message : ModelBase Properties Attachments This property contains the associated file attachments. Declaration public virtual ICollection<Attachment> Attachments { get; set; } Property Value Type Description ICollection < Attachment > From This property contains the origin of the message. Declaration public string From { get; set; } Property Value Type Description System.String Id This property contains the unique identifier for the message. Declaration public long Id { get; set; } Property Value Type Description System.Int64 IsDisabled This property indicates the message has been disabled. Declaration public bool IsDisabled { get; set; } Property Value Type Description System.Boolean MessageKey This property contains a unique key for the message. Declaration public string MessageKey { get; set; } Property Value Type Description System.String MessageProperties This property contains the associated message properties. Declaration public virtual ICollection<MessageProperty> MessageProperties { get; set; } Property Value Type Description ICollection < MessageProperty > MessageState This property contains the message state. Declaration public MessageState MessageState { get; set; } Property Value Type Description MessageState MessageType This property contains the message type. Declaration public MessageType MessageType { get; set; } Property Value Type Description MessageType Priority This property contains the relative priority of the message. Declaration public int Priority { get; set; } Property Value Type Description System.Int32"
  },
  "api/CG.Purple.Models.MessageEqualityComparer.html": {
    "href": "api/CG.Purple.Models.MessageEqualityComparer.html",
    "title": "Class MessageEqualityComparer",
    "keywords": "Class MessageEqualityComparer This class is a custom equality comparer for the Message type. Inheritance System.Object MessageEqualityComparer Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public class MessageEqualityComparer : IEqualityComparer<Message> Methods Equals(Message, Message) Declaration public bool Equals(Message x, Message y) Parameters Type Name Description Message x Message y Returns Type Description System.Boolean GetHashCode(Message) Declaration public int GetHashCode(Message obj) Parameters Type Name Description Message obj Returns Type Description System.Int32 Instance() This method returns the singleton MessageEqualityComparer instance. Declaration public static MessageEqualityComparer Instance() Returns Type Description MessageEqualityComparer An MessageEqualityComparer instance."
  },
  "api/CG.Purple.Models.MessageProperty.html": {
    "href": "api/CG.Purple.Models.MessageProperty.html",
    "title": "Class MessageProperty",
    "keywords": "Class MessageProperty This class represents a message property model. Inheritance System.Object ModelBase MessageProperty Inherited Members ModelBase.CreatedBy ModelBase.CreatedOnUtc ModelBase.LastUpdatedBy ModelBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public class MessageProperty : ModelBase Properties Message This property contains the associate message. Declaration public virtual Message Message { get; set; } Property Value Type Description Message PropertyType This property contains the associate property type. Declaration public virtual PropertyType PropertyType { get; set; } Property Value Type Description PropertyType Value This property contains the value for the message property. Declaration public string Value { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Models.MessageState.html": {
    "href": "api/CG.Purple.Models.MessageState.html",
    "title": "Enum MessageState",
    "keywords": "Enum MessageState This enumeration represents the valid message states. Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public enum MessageState Fields Name Description Failed This enumeration represents a message that has failed to process. Pending This enumeration represents a message that has been stored, but not yet picked up for processing. Processing This enumeration represents a message that has been picked up for processing, but not yet sent. Sent This enumeration represents a message that has been sent."
  },
  "api/CG.Purple.Models.MessageType.html": {
    "href": "api/CG.Purple.Models.MessageType.html",
    "title": "Enum MessageType",
    "keywords": "Enum MessageType This enumeration represents the valid message types. Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public enum MessageType Fields Name Description Mail This enumeration represents a mail message. Text This enumeration represents a text message."
  },
  "api/CG.Purple.Models.MimeType.html": {
    "href": "api/CG.Purple.Models.MimeType.html",
    "title": "Class MimeType",
    "keywords": "Class MimeType This class represents a MIME type model. Inheritance System.Object ModelBase MimeType Inherited Members ModelBase.CreatedBy ModelBase.CreatedOnUtc ModelBase.LastUpdatedBy ModelBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public class MimeType : ModelBase Properties FileTypes This property contains the associated file types. Declaration public virtual ICollection<FileType> FileTypes { get; set; } Property Value Type Description ICollection < FileType > Id This property contains the unique identifier for the MIME type. Declaration public int Id { get; set; } Property Value Type Description System.Int32 SubType This property contains the MIME sub-type. Declaration public string SubType { get; set; } Property Value Type Description System.String Type This property contains the MIME type. Declaration public string Type { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Models.ModelBase.html": {
    "href": "api/CG.Purple.Models.ModelBase.html",
    "title": "Class ModelBase",
    "keywords": "Class ModelBase This class represents a base model. Inheritance System.Object ModelBase Attachment FileType Message MessageProperty MimeType ParameterType ProcessLog PropertyType ProviderParameter ProviderType Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public class ModelBase Properties CreatedBy This property contains the name of the person who created the model. Declaration public string CreatedBy { get; set; } Property Value Type Description System.String CreatedOnUtc This property contains the date/time when the model was created. Declaration public DateTime CreatedOnUtc { get; set; } Property Value Type Description DateTime LastUpdatedBy This property contains the name of the last person to update the model. Declaration public string LastUpdatedBy { get; set; } Property Value Type Description System.String LastUpdatedOnUtc This property contains the date/time when the model was last updated. Declaration public DateTime? LastUpdatedOnUtc { get; set; } Property Value Type Description System.Nullable < DateTime >"
  },
  "api/CG.Purple.Models.ParameterType.html": {
    "href": "api/CG.Purple.Models.ParameterType.html",
    "title": "Class ParameterType",
    "keywords": "Class ParameterType This class represents a provider parameter type model. Inheritance System.Object ModelBase ParameterType Inherited Members ModelBase.CreatedBy ModelBase.CreatedOnUtc ModelBase.LastUpdatedBy ModelBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public class ParameterType : ModelBase Properties Description This property contains the description of the parameter type. Declaration public string Description { get; set; } Property Value Type Description System.String Id This property contains the unique identifier for the parameter type. Declaration public int Id { get; set; } Property Value Type Description System.Int32 Name This property contains the name of the parameter type. Declaration public string Name { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Models.ProcessEvent.html": {
    "href": "api/CG.Purple.Models.ProcessEvent.html",
    "title": "Enum ProcessEvent",
    "keywords": "Enum ProcessEvent This enumeration represents the valid process events. Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public enum ProcessEvent Fields Name Description Assigned This enumeration represents an assign processor event. Disabled This enumeration represents a message disable event. Enabled This enumeration represents an message enable event. Error This enumeration represents a processed related error event. Reset This enumeration represents a reset message event. Sent This enumeration represents a successful message send event. Stored This enumeration represents a message storage event."
  },
  "api/CG.Purple.Models.ProcessLog.html": {
    "href": "api/CG.Purple.Models.ProcessLog.html",
    "title": "Class ProcessLog",
    "keywords": "Class ProcessLog This class represents a provider log model. Inheritance System.Object ModelBase ProcessLog Inherited Members ModelBase.CreatedBy ModelBase.CreatedOnUtc ModelBase.LastUpdatedBy ModelBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public class ProcessLog : ModelBase Properties AfterState This property contains the state of the message after the event took place. Declaration public MessageState? AfterState { get; set; } Property Value Type Description System.Nullable < MessageState > BeforeState This property contains the state of the message before the event took place. Declaration public MessageState? BeforeState { get; set; } Property Value Type Description System.Nullable < MessageState > Data This property contains extra data associated with the event. Declaration public string Data { get; set; } Property Value Type Description System.String Error This property contains error data associated with the event. Declaration public string Error { get; set; } Property Value Type Description System.String Event This property contains the associate processing event. Declaration public ProcessEvent Event { get; set; } Property Value Type Description ProcessEvent Id This property contains the unique identifier for the entry. Declaration public long Id { get; set; } Property Value Type Description System.Int64 Message This property contains the associate message. Declaration public virtual Message Message { get; set; } Property Value Type Description Message ProviderType This property contains the associated provider type. Declaration public virtual ProviderType ProviderType { get; set; } Property Value Type Description ProviderType"
  },
  "api/CG.Purple.Models.PropertyType.html": {
    "href": "api/CG.Purple.Models.PropertyType.html",
    "title": "Class PropertyType",
    "keywords": "Class PropertyType This class represents a property type model. Inheritance System.Object ModelBase PropertyType Inherited Members ModelBase.CreatedBy ModelBase.CreatedOnUtc ModelBase.LastUpdatedBy ModelBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public class PropertyType : ModelBase Properties Description This property contains the description of the property type. Declaration public string Description { get; set; } Property Value Type Description System.String Id This property contains the unique identifier for the property type. Declaration public int Id { get; set; } Property Value Type Description System.Int32 Name This property contains the name of the property type. Declaration public string Name { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Models.ProviderParameter.html": {
    "href": "api/CG.Purple.Models.ProviderParameter.html",
    "title": "Class ProviderParameter",
    "keywords": "Class ProviderParameter This class represents a provider parameter model. Inheritance System.Object ModelBase ProviderParameter Inherited Members ModelBase.CreatedBy ModelBase.CreatedOnUtc ModelBase.LastUpdatedBy ModelBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public class ProviderParameter : ModelBase Properties ParameterType This property contains the associate parameter type. Declaration public virtual ParameterType ParameterType { get; set; } Property Value Type Description ParameterType ParameterTypeId This property contains the unique identifier for the associated parameter type. Declaration public int ParameterTypeId { get; set; } Property Value Type Description System.Int32 ProviderType This property contains the associate provider type. Declaration public virtual ProviderType ProviderType { get; set; } Property Value Type Description ProviderType ProviderTypeId This property contains the unique identifier for the associated provider type. Declaration public int ProviderTypeId { get; set; } Property Value Type Description System.Int32 Value This property contains the value for the provider parameter. Declaration public string Value { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Models.ProviderType.html": {
    "href": "api/CG.Purple.Models.ProviderType.html",
    "title": "Class ProviderType",
    "keywords": "Class ProviderType This class represents a message provider type model. Inheritance System.Object ModelBase ProviderType Inherited Members ModelBase.CreatedBy ModelBase.CreatedOnUtc ModelBase.LastUpdatedBy ModelBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public class ProviderType : ModelBase Properties CanProcessEmails This property indicates whether this provider can process emails. Declaration public bool CanProcessEmails { get; set; } Property Value Type Description System.Boolean CanProcessTexts This property indicates whether this provider can process texts. Declaration public bool CanProcessTexts { get; set; } Property Value Type Description System.Boolean Description This property contains the description of the provider type. Declaration public string Description { get; set; } Property Value Type Description System.String FactoryType This property contains the .NET type for the associated provider. Declaration public string FactoryType { get; set; } Property Value Type Description System.String Id This property contains the unique identifier for the provider type. Declaration public int Id { get; set; } Property Value Type Description System.Int32 IsDisabled This property indicates the provider has been disabled. Declaration public bool IsDisabled { get; set; } Property Value Type Description System.Boolean Name This property contains the name of the provider type. Declaration public string Name { get; set; } Property Value Type Description System.String Parameters This property contains the associated provider parameters. Declaration public virtual ICollection<ProviderParameter> Parameters { get; set; } Property Value Type Description ICollection < ProviderParameter > Priority This property contains the relative priority for this provider. Declaration public int Priority { get; set; } Property Value Type Description System.Int32"
  },
  "api/CG.Purple.Models.TextMessage.html": {
    "href": "api/CG.Purple.Models.TextMessage.html",
    "title": "Class TextMessage",
    "keywords": "Class TextMessage This class represents a notification text model. Inheritance System.Object ModelBase Message TextMessage Inherited Members Message.Id Message.MessageKey Message.From Message.MessageType Message.MessageState Message.IsDisabled Message.Priority Message.MessageProperties Message.Attachments ModelBase.CreatedBy ModelBase.CreatedOnUtc ModelBase.LastUpdatedBy ModelBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public class TextMessage : Message Properties Body This property contains the body for the message. Declaration public string Body { get; set; } Property Value Type Description System.String To This property contains the to address for the message. Declaration public string To { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Providers.html": {
    "href": "api/CG.Purple.Providers.html",
    "title": "Namespace CG.Purple.Providers",
    "keywords": "Namespace CG.Purple.Providers Classes MessageExtensions001 This class contains extension methods related to the type. ProviderException This class represents a message provider related exception. Interfaces IMessageProvider This interface represents an object that integrates with third-party message providers, such as SMTP, or SendGrid. IMessageProviderFactory This interface represents an object that creates IMessageProvider instances, at runtime."
  },
  "api/CG.Purple.Providers.IMessageProvider.html": {
    "href": "api/CG.Purple.Providers.IMessageProvider.html",
    "title": "Interface IMessageProvider",
    "keywords": "Interface IMessageProvider This interface represents an object that integrates with third-party message providers, such as SMTP, or SendGrid. Namespace : CG.Purple.Providers Assembly : CG.Purple.Abstractions.dll Syntax public interface IMessageProvider Methods ProcessMessagesAsync(IEnumerable<Message>, IEnumerable<ProviderParameter>, PropertyType, CancellationToken) This method sends messages to an external provider. Declaration Task ProcessMessagesAsync(IEnumerable<Message> messages, IEnumerable<ProviderParameter> parameters, PropertyType providerPropertyType, CancellationToken cancellationToken = null) Parameters Type Name Description IEnumerable < Message > messages The messages to use for the operation. IEnumerable < ProviderParameter > parameters The parameters to use for the operation. PropertyType providerPropertyType The provider property type to use for the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition ProviderException This exception is thrown whenever the provider fails to complete the operation."
  },
  "api/CG.Purple.Providers.IMessageProviderFactory.html": {
    "href": "api/CG.Purple.Providers.IMessageProviderFactory.html",
    "title": "Interface IMessageProviderFactory",
    "keywords": "Interface IMessageProviderFactory This interface represents an object that creates IMessageProvider instances, at runtime. Namespace : CG.Purple.Providers Assembly : CG.Purple.Abstractions.dll Syntax public interface IMessageProviderFactory Methods CreateAsync(ProviderType, CancellationToken) This method creates an IMessageProvider instance from the given object. Declaration Task<IMessageProvider> CreateAsync(ProviderType providerType, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderType providerType The provider type to use for the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IMessageProvider > A task to perform the operation that returns a IMessageProvider instance, or NULL if the operation cannot be completed."
  },
  "api/CG.Purple.Providers.MessageExtensions001.html": {
    "href": "api/CG.Purple.Providers.MessageExtensions001.html",
    "title": "Class MessageExtensions001",
    "keywords": "Class MessageExtensions001 This class contains extension methods related to the type. Inheritance System.Object MessageExtensions001 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Providers Assembly : CG.Purple.Abstractions.dll Syntax public static class MessageExtensions001 Methods ToFailedStateAsync(Message, Exception, IMessageManager, IProcessLogManager, String, CancellationToken) This method transitions the given to a state, and records the event in the processing log. Declaration public static async Task ToFailedStateAsync(this Message message, Exception ex, IMessageManager messageManager, IProcessLogManager processLogManager, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description Message message The message to use for the operation. Exception ex The exception to use for the operation. IMessageManager messageManager The message manager to use for the operation. IProcessLogManager processLogManager The process log manager to use for the operation. System.String userName The name of the user performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. ToFailedStateAsync(Message, String, IMessageManager, IProcessLogManager, String, CancellationToken) This method transitions the given to a state, and records the event in the processing log. Declaration public static async Task ToFailedStateAsync(this Message message, string errorMessage, IMessageManager messageManager, IProcessLogManager processLogManager, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description Message message The message to use for the operation. System.String errorMessage The error message to use for the operation. IMessageManager messageManager The message manager to use for the operation. IProcessLogManager processLogManager The process log manager to use for the operation. System.String userName The name of the user performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. ToPendingStateAsync(Message, IMessageManager, IProcessLogManager, String, CancellationToken) This method transitions the given to a state, and records the event in the processing log. Declaration public static async Task ToPendingStateAsync(this Message message, IMessageManager messageManager, IProcessLogManager processLogManager, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description Message message The message to use for the operation. IMessageManager messageManager The message manager to use for the operation. IProcessLogManager processLogManager The process log manager to use for the operation. System.String userName The name of the user performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. ToProcessingStateAsync(Message, IMessageManager, IProcessLogManager, ProviderType, String, CancellationToken) This method transitions the given to a state, and records the event in the processing log. Declaration public static async Task ToProcessingStateAsync(this Message message, IMessageManager messageManager, IProcessLogManager processLogManager, ProviderType assignedProviderType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description Message message The message to use for the operation. IMessageManager messageManager The message manager to use for the operation. IProcessLogManager processLogManager The process log manager to use for the operation. ProviderType assignedProviderType The assigned provider type to use for the operation. System.String userName The name of the user performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. ToSentStateAsync(Message, IMessageManager, IProcessLogManager, String, CancellationToken) This method transitions the given to a state, and records the event in the processing log. Declaration public static async Task ToSentStateAsync(this Message message, IMessageManager messageManager, IProcessLogManager processLogManager, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description Message message The message to use for the operation. IMessageManager messageManager The message manager to use for the operation. IProcessLogManager processLogManager The process log manager to use for the operation. System.String userName The name of the user performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation."
  },
  "api/CG.Purple.Providers.ProviderException.html": {
    "href": "api/CG.Purple.Providers.ProviderException.html",
    "title": "Class ProviderException",
    "keywords": "Class ProviderException This class represents a message provider related exception. Inheritance System.Object ProviderException Namespace : CG.Purple.Providers Assembly : CG.Purple.Primitives.dll Syntax public class ProviderException : Exception Constructors ProviderException() This constructor creates a new instance of the ProviderException class. Declaration public ProviderException() ProviderException(SerializationInfo, StreamingContext) This constructor creates a new instance of the ProviderException class. Declaration public ProviderException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The serialization info to use for the exception. StreamingContext context The streaming context to use for the exception. ProviderException(String) This constructor creates a new instance of the ProviderException class. Declaration public ProviderException(string message) Parameters Type Name Description System.String message The message to use for the exception. ProviderException(String, Exception) This constructor creates a new instance of the ProviderException class. Declaration public ProviderException(string message, Exception innerException) Parameters Type Name Description System.String message The message to use for the exception. Exception innerException An optional inner exception reference."
  },
  "api/CG.Purple.Repositories.html": {
    "href": "api/CG.Purple.Repositories.html",
    "title": "Namespace CG.Purple.Repositories",
    "keywords": "Namespace CG.Purple.Repositories Classes RepositoryException This class represents a repository related exception. Interfaces IAttachmentRepository This interface represents an object that manages the storage and retrieval of objects. IFileTypeRepository This interface represents an object that manages the storage and retrieval of objects. IMailMessageRepository This interface represents an object that manages the storage and retrieval of objects. IMessagePropertyRepository This interface represents an object that manages the storage and retrieval of objects. IMessageRepository This interface represents an object that manages the storage and retrieval of objects. IMimeTypeRepository This interface represents an object that manages the storage and retrieval of objects. IParameterTypeRepository This interface represents an object that manages the storage and retrieval of objects. IProcessLogRepository This interface represents an object that manages the storage and retrieval of objects. IPropertyTypeRepository This interface represents an object that manages the storage and retrieval of objects. IProviderParameterRepository This interface represents an object that manages the storage and retrieval of objects. IProviderTypeRepository This interface represents an object that manages the storage and retrieval of objects. ITextMessageRepository This interface represents an object that manages the storage and retrieval of objects."
  },
  "api/CG.Purple.Repositories.IAttachmentRepository.html": {
    "href": "api/CG.Purple.Repositories.IAttachmentRepository.html",
    "title": "Interface IAttachmentRepository",
    "keywords": "Interface IAttachmentRepository This interface represents an object that manages the storage and retrieval of objects. Namespace : CG.Purple.Repositories Assembly : CG.Purple.Abstractions.dll Syntax public interface IAttachmentRepository Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CreateAsync(Attachment, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<Attachment> CreateAsync(Attachment attachment, CancellationToken cancellationToken = null) Parameters Type Name Description Attachment attachment The model to create in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < Attachment > A task to perform the operation that returns the newly created object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. DeleteAsync(Attachment, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(Attachment attachment, CancellationToken cancellationToken = null) Parameters Type Name Description Attachment attachment The model to delete from the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. UpdateAsync(Attachment, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<Attachment> UpdateAsync(Attachment attachment, CancellationToken cancellationToken = null) Parameters Type Name Description Attachment attachment The model to update in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < Attachment > A task to perform the operation that returns the newly updated object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation."
  },
  "api/CG.Purple.Repositories.IFileTypeRepository.html": {
    "href": "api/CG.Purple.Repositories.IFileTypeRepository.html",
    "title": "Interface IFileTypeRepository",
    "keywords": "Interface IFileTypeRepository This interface represents an object that manages the storage and retrieval of objects. Namespace : CG.Purple.Repositories Assembly : CG.Purple.Abstractions.dll Syntax public interface IFileTypeRepository Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CreateAsync(FileType, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<FileType> CreateAsync(FileType fileType, CancellationToken cancellationToken = null) Parameters Type Name Description FileType fileType The model to create in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < FileType > A task to perform the operation that returns the newly created object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. DeleteAsync(FileType, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(FileType fileType, CancellationToken cancellationToken = null) Parameters Type Name Description FileType fileType The model to delete from the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindAllAsync(CancellationToken) This method searches for all the objects. Declaration Task<IEnumerable<FileType>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < FileType >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindByExtensionAsync(String, CancellationToken) This method searches for a single matching object using the given file extension. Declaration Task<FileType?> FindByExtensionAsync(string extension, CancellationToken cancellationToken = null) Parameters Type Name Description System.String extension The file extension to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < FileType >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. UpdateAsync(FileType, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<FileType> UpdateAsync(FileType fileType, CancellationToken cancellationToken = null) Parameters Type Name Description FileType fileType The model to update in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < FileType > A task to perform the operation that returns the newly updated object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation."
  },
  "api/CG.Purple.Repositories.IMailMessageRepository.html": {
    "href": "api/CG.Purple.Repositories.IMailMessageRepository.html",
    "title": "Interface IMailMessageRepository",
    "keywords": "Interface IMailMessageRepository This interface represents an object that manages the storage and retrieval of objects. Namespace : CG.Purple.Repositories Assembly : CG.Purple.Abstractions.dll Syntax public interface IMailMessageRepository Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CreateAsync(MailMessage, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<MailMessage> CreateAsync(MailMessage fileType, CancellationToken cancellationToken = null) Parameters Type Name Description MailMessage fileType The model to create in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MailMessage > A task to perform the operation that returns the newly created object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. DeleteAsync(MailMessage, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(MailMessage fileType, CancellationToken cancellationToken = null) Parameters Type Name Description MailMessage fileType The model to delete from the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindAllAsync(CancellationToken) This method searches for all the objects. Declaration Task<IEnumerable<MailMessage>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < MailMessage >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindByIdAsync(Int64, CancellationToken) This method searches for a single matching object using the given identifier. Declaration Task<MailMessage?> FindByIdAsync(long id, CancellationToken cancellationToken = null) Parameters Type Name Description System.Int64 id The message identifier to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < MailMessage >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindByKeyAsync(String, CancellationToken) This method searches for a single matching object using the given message key. Declaration Task<MailMessage?> FindByKeyAsync(string messageKey, CancellationToken cancellationToken = null) Parameters Type Name Description System.String messageKey The message key to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < MailMessage >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindPendingAsync(CancellationToken) This method searches for a sequence of objects that are not disabled, or sent, or processed. Declaration Task<IEnumerable<MailMessage>> FindPendingAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < MailMessage >> A task to perform the operation that returns a sequence of matching objects. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. UpdateAsync(MailMessage, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<MailMessage> UpdateAsync(MailMessage fileType, CancellationToken cancellationToken = null) Parameters Type Name Description MailMessage fileType The model to update in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MailMessage > A task to perform the operation that returns the newly updated object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation."
  },
  "api/CG.Purple.Repositories.IMessagePropertyRepository.html": {
    "href": "api/CG.Purple.Repositories.IMessagePropertyRepository.html",
    "title": "Interface IMessagePropertyRepository",
    "keywords": "Interface IMessagePropertyRepository This interface represents an object that manages the storage and retrieval of objects. Namespace : CG.Purple.Repositories Assembly : CG.Purple.Abstractions.dll Syntax public interface IMessagePropertyRepository Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CreateAsync(MessageProperty, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<MessageProperty> CreateAsync(MessageProperty messageProperty, CancellationToken cancellationToken = null) Parameters Type Name Description MessageProperty messageProperty The model to create in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MessageProperty > A task to perform the operation that returns the newly created object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. DeleteAsync(MessageProperty, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(MessageProperty messageProperty, CancellationToken cancellationToken = null) Parameters Type Name Description MessageProperty messageProperty The model to delete from the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. UpdateAsync(MessageProperty, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<MessageProperty> UpdateAsync(MessageProperty messageProperty, CancellationToken cancellationToken = null) Parameters Type Name Description MessageProperty messageProperty The model to update in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MessageProperty > A task to perform the operation that returns the newly updated object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation."
  },
  "api/CG.Purple.Repositories.IMessageRepository.html": {
    "href": "api/CG.Purple.Repositories.IMessageRepository.html",
    "title": "Interface IMessageRepository",
    "keywords": "Interface IMessageRepository This interface represents an object that manages the storage and retrieval of objects. Namespace : CG.Purple.Repositories Assembly : CG.Purple.Abstractions.dll Syntax public interface IMessageRepository Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindAllAsync(CancellationToken) This method searches for all the objects. Declaration Task<IEnumerable<Message>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < Message >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindByIdAsync(Int64, CancellationToken) This method searches for a single matching object using the given identifier. Declaration Task<Message?> FindByIdAsync(long id, CancellationToken cancellationToken = null) Parameters Type Name Description System.Int64 id The message identifier to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < Message >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindByKeyAsync(String, CancellationToken) This method searches for a single matching object using the given message key. Declaration Task<Message?> FindByKeyAsync(string messageKey, CancellationToken cancellationToken = null) Parameters Type Name Description System.String messageKey The message key to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < Message >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindReadyToProcessAsync(CancellationToken) This method searches for a sequence of objects that are not disabled, or sent, or processed. Declaration Task<IEnumerable<Message>> FindReadyToProcessAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < Message >> A task to perform the operation that returns a sequence of matching objects. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. UpdateAsync(Message, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<Message> UpdateAsync(Message message, CancellationToken cancellationToken = null) Parameters Type Name Description Message message The model to update in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < Message > A task to perform the operation that returns the newly updated object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation."
  },
  "api/CG.Purple.Repositories.IMimeTypeRepository.html": {
    "href": "api/CG.Purple.Repositories.IMimeTypeRepository.html",
    "title": "Interface IMimeTypeRepository",
    "keywords": "Interface IMimeTypeRepository This interface represents an object that manages the storage and retrieval of objects. Namespace : CG.Purple.Repositories Assembly : CG.Purple.Abstractions.dll Syntax public interface IMimeTypeRepository Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CreateAsync(MimeType, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<MimeType> CreateAsync(MimeType mimeType, CancellationToken cancellationToken = null) Parameters Type Name Description MimeType mimeType The model to create in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MimeType > A task to perform the operation that returns the newly created object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. DeleteAsync(MimeType, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(MimeType mimeType, CancellationToken cancellationToken = null) Parameters Type Name Description MimeType mimeType The model to delete from the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindByExtensionAsync(String, CancellationToken) This method searches for a single matching object using the given file extension. Declaration Task<MimeType?> FindByExtensionAsync(string extension, CancellationToken cancellationToken = null) Parameters Type Name Description System.String extension The file extension to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < MimeType >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindByTypeAsync(String, String, CancellationToken) This method searches for matching objects using the given type and/or subtype. Declaration Task<IEnumerable<MimeType>> FindByTypeAsync(string type, string subType, CancellationToken cancellationToken = null) Parameters Type Name Description System.String type The MIME type to use for the search. System.String subType The MIME sub-type to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < MimeType >> A task to perform the operation that returns the results of the search. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. UpdateAsync(MimeType, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<MimeType> UpdateAsync(MimeType mimeType, CancellationToken cancellationToken = null) Parameters Type Name Description MimeType mimeType The model to update in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MimeType > A task to perform the operation that returns the newly updated object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation."
  },
  "api/CG.Purple.Repositories.IParameterTypeRepository.html": {
    "href": "api/CG.Purple.Repositories.IParameterTypeRepository.html",
    "title": "Interface IParameterTypeRepository",
    "keywords": "Interface IParameterTypeRepository This interface represents an object that manages the storage and retrieval of objects. Namespace : CG.Purple.Repositories Assembly : CG.Purple.Abstractions.dll Syntax public interface IParameterTypeRepository Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CreateAsync(ParameterType, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<ParameterType> CreateAsync(ParameterType parameterType, CancellationToken cancellationToken = null) Parameters Type Name Description ParameterType parameterType The model to create in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ParameterType > A task to perform the operation that returns the newly created object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. DeleteAsync(ParameterType, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(ParameterType parameterType, CancellationToken cancellationToken = null) Parameters Type Name Description ParameterType parameterType The model to delete from the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindByNameAsync(String, CancellationToken) This method searches for a single matching object using the given name. Declaration Task<ParameterType?> FindByNameAsync(string name, CancellationToken cancellationToken = null) Parameters Type Name Description System.String name The name to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < ParameterType >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. UpdateAsync(ParameterType, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<ParameterType> UpdateAsync(ParameterType parameterType, CancellationToken cancellationToken = null) Parameters Type Name Description ParameterType parameterType The model to update in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ParameterType > A task to perform the operation that returns the newly updated object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation."
  },
  "api/CG.Purple.Repositories.IProcessLogRepository.html": {
    "href": "api/CG.Purple.Repositories.IProcessLogRepository.html",
    "title": "Interface IProcessLogRepository",
    "keywords": "Interface IProcessLogRepository This interface represents an object that manages the storage and retrieval of objects. Namespace : CG.Purple.Repositories Assembly : CG.Purple.Abstractions.dll Syntax public interface IProcessLogRepository Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CreateAsync(ProcessLog, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<ProcessLog> CreateAsync(ProcessLog providerLog, CancellationToken cancellationToken = null) Parameters Type Name Description ProcessLog providerLog The model to create in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProcessLog > A task to perform the operation that returns the newly created object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. DeleteAsync(ProcessLog, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(ProcessLog providerLog, CancellationToken cancellationToken = null) Parameters Type Name Description ProcessLog providerLog The model to delete from the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. UpdateAsync(ProcessLog, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<ProcessLog> UpdateAsync(ProcessLog providerLog, CancellationToken cancellationToken = null) Parameters Type Name Description ProcessLog providerLog The model to update in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProcessLog > A task to perform the operation that returns the newly updated object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation."
  },
  "api/CG.Purple.Repositories.IPropertyTypeRepository.html": {
    "href": "api/CG.Purple.Repositories.IPropertyTypeRepository.html",
    "title": "Interface IPropertyTypeRepository",
    "keywords": "Interface IPropertyTypeRepository This interface represents an object that manages the storage and retrieval of objects. Namespace : CG.Purple.Repositories Assembly : CG.Purple.Abstractions.dll Syntax public interface IPropertyTypeRepository Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CreateAsync(PropertyType, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<PropertyType> CreateAsync(PropertyType propertyType, CancellationToken cancellationToken = null) Parameters Type Name Description PropertyType propertyType The model to create in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < PropertyType > A task to perform the operation that returns the newly created object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. DeleteAsync(PropertyType, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(PropertyType propertyType, CancellationToken cancellationToken = null) Parameters Type Name Description PropertyType propertyType The model to delete from the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindByNameAsync(String, CancellationToken) This method searches for a single matching object using the given name. Declaration Task<PropertyType?> FindByNameAsync(string name, CancellationToken cancellationToken = null) Parameters Type Name Description System.String name The name to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < PropertyType >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. UpdateAsync(PropertyType, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<PropertyType> UpdateAsync(PropertyType propertyType, CancellationToken cancellationToken = null) Parameters Type Name Description PropertyType propertyType The model to update in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < PropertyType > A task to perform the operation that returns the newly updated object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation."
  },
  "api/CG.Purple.Repositories.IProviderParameterRepository.html": {
    "href": "api/CG.Purple.Repositories.IProviderParameterRepository.html",
    "title": "Interface IProviderParameterRepository",
    "keywords": "Interface IProviderParameterRepository This interface represents an object that manages the storage and retrieval of objects. Namespace : CG.Purple.Repositories Assembly : CG.Purple.Abstractions.dll Syntax public interface IProviderParameterRepository Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CreateAsync(ProviderParameter, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<ProviderParameter> CreateAsync(ProviderParameter providerParameter, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderParameter providerParameter The model to create in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProviderParameter > A task to perform the operation that returns the newly created object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. DeleteAsync(ProviderParameter, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(ProviderParameter providerParameter, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderParameter providerParameter The model to delete from the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. UpdateAsync(ProviderParameter, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<ProviderParameter> UpdateAsync(ProviderParameter providerParameter, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderParameter providerParameter The model to update in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProviderParameter > A task to perform the operation that returns the newly updated object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation."
  },
  "api/CG.Purple.Repositories.IProviderTypeRepository.html": {
    "href": "api/CG.Purple.Repositories.IProviderTypeRepository.html",
    "title": "Interface IProviderTypeRepository",
    "keywords": "Interface IProviderTypeRepository This interface represents an object that manages the storage and retrieval of objects. Namespace : CG.Purple.Repositories Assembly : CG.Purple.Abstractions.dll Syntax public interface IProviderTypeRepository Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CreateAsync(ProviderType, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<ProviderType> CreateAsync(ProviderType providerType, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderType providerType The model to create in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProviderType > A task to perform the operation that returns the newly created object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. DeleteAsync(ProviderType, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(ProviderType providerType, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderType providerType The model to delete from the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindAllAsync(CancellationToken) This method searches for a sequence of objects. Declaration Task<IEnumerable<ProviderType>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < ProviderType >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindByNameAsync(String, CancellationToken) This method searches for a single matching object using the given name. Declaration Task<ProviderType?> FindByNameAsync(string name, CancellationToken cancellationToken = null) Parameters Type Name Description System.String name The name to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < ProviderType >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindForEmailsAsync(CancellationToken) This method searches for a sequence of objects that are capable of processing emails. Declaration Task<IEnumerable<ProviderType>> FindForEmailsAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < ProviderType >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindForTextsAsync(CancellationToken) This method searches for a sequence of objects that are capable of processing texts. Declaration Task<IEnumerable<ProviderType>> FindForTextsAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < ProviderType >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. UpdateAsync(ProviderType, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<ProviderType> UpdateAsync(ProviderType providerType, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderType providerType The model to update in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProviderType > A task to perform the operation that returns the newly updated object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation."
  },
  "api/CG.Purple.Repositories.ITextMessageRepository.html": {
    "href": "api/CG.Purple.Repositories.ITextMessageRepository.html",
    "title": "Interface ITextMessageRepository",
    "keywords": "Interface ITextMessageRepository This interface represents an object that manages the storage and retrieval of objects. Namespace : CG.Purple.Repositories Assembly : CG.Purple.Abstractions.dll Syntax public interface ITextMessageRepository Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CreateAsync(TextMessage, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<TextMessage> CreateAsync(TextMessage textMessage, CancellationToken cancellationToken = null) Parameters Type Name Description TextMessage textMessage The model to create in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < TextMessage > A task to perform the operation that returns the newly created object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. DeleteAsync(TextMessage, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(TextMessage textMessage, CancellationToken cancellationToken = null) Parameters Type Name Description TextMessage textMessage The model to delete from the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindAllAsync(CancellationToken) This method searches for all the objects. Declaration Task<IEnumerable<TextMessage>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < TextMessage >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindByIdAsync(Int64, CancellationToken) This method searches for a single matching object using the given identifier. Declaration Task<TextMessage?> FindByIdAsync(long id, CancellationToken cancellationToken = null) Parameters Type Name Description System.Int64 id The message identifier to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < TextMessage >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindByKeyAsync(String, CancellationToken) This method searches for a single matching object using the given message key. Declaration Task<TextMessage?> FindByKeyAsync(string messageKey, CancellationToken cancellationToken = null) Parameters Type Name Description System.String messageKey The message key to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < TextMessage >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindPendingAsync(CancellationToken) This method searches for a sequence of objects that are not disabled, or sent, or processed. Declaration Task<IEnumerable<TextMessage>> FindPendingAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < TextMessage >> A task to perform the operation that returns a sequence of matching objects. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. UpdateAsync(TextMessage, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<TextMessage> UpdateAsync(TextMessage textMessage, CancellationToken cancellationToken = null) Parameters Type Name Description TextMessage textMessage The model to update in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < TextMessage > A task to perform the operation that returns the newly updated object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation."
  },
  "api/CG.Purple.Repositories.RepositoryException.html": {
    "href": "api/CG.Purple.Repositories.RepositoryException.html",
    "title": "Class RepositoryException",
    "keywords": "Class RepositoryException This class represents a repository related exception. Inheritance System.Object RepositoryException Namespace : CG.Purple.Repositories Assembly : CG.Purple.Primitives.dll Syntax public class RepositoryException : Exception Constructors RepositoryException() This constructor creates a new instance of the RepositoryException class. Declaration public RepositoryException() RepositoryException(SerializationInfo, StreamingContext) This constructor creates a new instance of the RepositoryException class. Declaration public RepositoryException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The serialization info to use for the exception. StreamingContext context The streaming context to use for the exception. RepositoryException(String) This constructor creates a new instance of the RepositoryException class. Declaration public RepositoryException(string message) Parameters Type Name Description System.String message The message to use for the exception. RepositoryException(String, Exception) This constructor creates a new instance of the RepositoryException class. Declaration public RepositoryException(string message, Exception innerException) Parameters Type Name Description System.String message The message to use for the exception. Exception innerException An optional inner exception reference."
  },
  "api/CG.Purple.Seeding.Options.html": {
    "href": "api/CG.Purple.Seeding.Options.html",
    "title": "Namespace CG.Purple.Seeding.Options",
    "keywords": "Namespace CG.Purple.Seeding.Options Classes MailMessageOptions This class contains configuration options related to mail message seeding. MessagePropertyOptions This class contains configuration options related to message property seeding. MimeTypeOptions This class contains configuration options related to mime type seeding. ParameterTypeOptions This class contains configuration options related to parameter type seeding. ProcessLogOptions This class contains configuration options related to process log seeding. PropertyTypeOptions This class contains configuration options related to property type seeding. ProviderParameterOptions This class contains configuration options related to provider parameter seeding. ProviderTypeOptions This class contains configuration options related to provider type seeding. TextMessageOptions This class contains configuration options related to text message seeding."
  },
  "api/CG.Purple.Seeding.Options.MailMessageOptions.html": {
    "href": "api/CG.Purple.Seeding.Options.MailMessageOptions.html",
    "title": "Class MailMessageOptions",
    "keywords": "Class MailMessageOptions This class contains configuration options related to mail message seeding. Inheritance System.Object MailMessageOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Seeding.Options Assembly : CG.Purple.Seeding.dll Syntax public class MailMessageOptions Properties Attachments This property contains the file attachments for the message. Declaration public List<string> Attachments { get; set; } Property Value Type Description List < System.String > BCC This property contains the 'BCC' address for the message. Declaration public string BCC { get; set; } Property Value Type Description System.String Body This property contains the subject for the message. Declaration public string Body { get; set; } Property Value Type Description System.String CC This property contains the 'CC' address for the message. Declaration public string CC { get; set; } Property Value Type Description System.String From This property contains the origin of the message. Declaration public string From { get; set; } Property Value Type Description System.String IsDisabled This property indicates whether the message is disabled, or not. Declaration public bool IsDisabled { get; set; } Property Value Type Description System.Boolean IsHtml This property indicates whether the Body property contains HTML formatted text, or not. Declaration public bool IsHtml { get; set; } Property Value Type Description System.Boolean MessageKey This property contains the key for the message. Declaration public string MessageKey { get; set; } Property Value Type Description System.String Properties This property contains the properties for the message. Declaration public List<MessagePropertyOptions> Properties { get; set; } Property Value Type Description List < MessagePropertyOptions > Subject This property contains the subject for the message. Declaration public string Subject { get; set; } Property Value Type Description System.String To This property contains the 'To' address for the message. Declaration public string To { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Seeding.Options.MessagePropertyOptions.html": {
    "href": "api/CG.Purple.Seeding.Options.MessagePropertyOptions.html",
    "title": "Class MessagePropertyOptions",
    "keywords": "Class MessagePropertyOptions This class contains configuration options related to message property seeding. Inheritance System.Object MessagePropertyOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Seeding.Options Assembly : CG.Purple.Seeding.dll Syntax public class MessagePropertyOptions Properties PropertyTypeName This property contains the name of the associated property type. Declaration public string PropertyTypeName { get; set; } Property Value Type Description System.String Value This property contains the value of the property. Declaration public string Value { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Seeding.Options.MimeTypeOptions.html": {
    "href": "api/CG.Purple.Seeding.Options.MimeTypeOptions.html",
    "title": "Class MimeTypeOptions",
    "keywords": "Class MimeTypeOptions This class contains configuration options related to mime type seeding. Inheritance System.Object MimeTypeOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Seeding.Options Assembly : CG.Purple.Seeding.dll Syntax public class MimeTypeOptions Properties Extensions This property contains the associated file extensions. Declaration public List<string> Extensions { get; set; } Property Value Type Description List < System.String > SubType This property contains the sub-type for the mime type. Declaration public string SubType { get; set; } Property Value Type Description System.String Type This property contains the type for the mime type. Declaration public string Type { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Seeding.Options.ParameterTypeOptions.html": {
    "href": "api/CG.Purple.Seeding.Options.ParameterTypeOptions.html",
    "title": "Class ParameterTypeOptions",
    "keywords": "Class ParameterTypeOptions This class contains configuration options related to parameter type seeding. Inheritance System.Object ParameterTypeOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Seeding.Options Assembly : CG.Purple.Seeding.dll Syntax public class ParameterTypeOptions Properties Description This parameter contains the description for the parameter type. Declaration public string Description { get; set; } Property Value Type Description System.String Name This parameter contains the name for the parameter type. Declaration public string Name { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Seeding.Options.ProcessLogOptions.html": {
    "href": "api/CG.Purple.Seeding.Options.ProcessLogOptions.html",
    "title": "Class ProcessLogOptions",
    "keywords": "Class ProcessLogOptions This class contains configuration options related to process log seeding. Inheritance System.Object ProcessLogOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Seeding.Options Assembly : CG.Purple.Seeding.dll Syntax public class ProcessLogOptions Properties AfterState This property contains the state of the message after the event took place. Declaration public string AfterState { get; set; } Property Value Type Description System.String BeforeState This property contains the state of the message before the event took place. Declaration public string BeforeState { get; set; } Property Value Type Description System.String Data This property contains extra data associated with the event. Declaration public string Data { get; set; } Property Value Type Description System.String Error This property contains error data associated with the event. Declaration public string Error { get; set; } Property Value Type Description System.String Event This property contains the associated processing event. Declaration public string Event { get; set; } Property Value Type Description System.String MessageKey This property contains the key for the associated message. Declaration public string MessageKey { get; set; } Property Value Type Description System.String MessageType This property contains the type of the associated message. Declaration public string MessageType { get; set; } Property Value Type Description System.String ProviderTypeName This property contains the name of the associated provider type. Declaration public string ProviderTypeName { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Seeding.Options.PropertyTypeOptions.html": {
    "href": "api/CG.Purple.Seeding.Options.PropertyTypeOptions.html",
    "title": "Class PropertyTypeOptions",
    "keywords": "Class PropertyTypeOptions This class contains configuration options related to property type seeding. Inheritance System.Object PropertyTypeOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Seeding.Options Assembly : CG.Purple.Seeding.dll Syntax public class PropertyTypeOptions Properties Description This property contains the description for the property type. Declaration public string Description { get; set; } Property Value Type Description System.String Name This property contains the name for the property type. Declaration public string Name { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Seeding.Options.ProviderParameterOptions.html": {
    "href": "api/CG.Purple.Seeding.Options.ProviderParameterOptions.html",
    "title": "Class ProviderParameterOptions",
    "keywords": "Class ProviderParameterOptions This class contains configuration options related to provider parameter seeding. Inheritance System.Object ProviderParameterOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Seeding.Options Assembly : CG.Purple.Seeding.dll Syntax public class ProviderParameterOptions Properties ParameterTypeName This provider contains the name for the parameter type. Declaration public string ParameterTypeName { get; set; } Property Value Type Description System.String ProviderTypeName This provider contains the name for the provider type. Declaration public string ProviderTypeName { get; set; } Property Value Type Description System.String Value This provider contains the value for the parameter. Declaration public string Value { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Seeding.Options.ProviderTypeOptions.html": {
    "href": "api/CG.Purple.Seeding.Options.ProviderTypeOptions.html",
    "title": "Class ProviderTypeOptions",
    "keywords": "Class ProviderTypeOptions This class contains configuration options related to provider type seeding. Inheritance System.Object ProviderTypeOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Seeding.Options Assembly : CG.Purple.Seeding.dll Syntax public class ProviderTypeOptions Properties CanProcessEmails This property indicates whether this provider can process emails. Declaration public bool CanProcessEmails { get; set; } Property Value Type Description System.Boolean CanProcessTexts This property indicates whether this provider can process texts. Declaration public bool CanProcessTexts { get; set; } Property Value Type Description System.Boolean Description This provider contains the description for the provider type. Declaration public string Description { get; set; } Property Value Type Description System.String FactoryType This provider contains the .NET type for the associated provider. Declaration public string FactoryType { get; set; } Property Value Type Description System.String IsDisabled This property indicates the provider has been disabled. Declaration public bool IsDisabled { get; set; } Property Value Type Description System.Boolean Name This provider contains the name for the provider type. Declaration public string Name { get; set; } Property Value Type Description System.String Priority This property contains the relative priority for this provider. Declaration public int Priority { get; set; } Property Value Type Description System.Int32"
  },
  "api/CG.Purple.Seeding.Options.TextMessageOptions.html": {
    "href": "api/CG.Purple.Seeding.Options.TextMessageOptions.html",
    "title": "Class TextMessageOptions",
    "keywords": "Class TextMessageOptions This class contains configuration options related to text message seeding. Inheritance System.Object TextMessageOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Seeding.Options Assembly : CG.Purple.Seeding.dll Syntax public class TextMessageOptions Properties Body This property contains the subject for the message. Declaration public string Body { get; set; } Property Value Type Description System.String From This property contains the origin of the message. Declaration public string From { get; set; } Property Value Type Description System.String IsDisabled This property indicates whether the message is disabled, or not. Declaration public bool IsDisabled { get; set; } Property Value Type Description System.Boolean MessageKey This property contains the key for the message. Declaration public string MessageKey { get; set; } Property Value Type Description System.String Properties This property contains the properties for the message. Declaration public List<MessagePropertyOptions> Properties { get; set; } Property Value Type Description List < MessagePropertyOptions > To This property contains the 'To' phone number for the message. Declaration public string To { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.SqlServer.Migrations.html": {
    "href": "api/CG.Purple.SqlServer.Migrations.html",
    "title": "Namespace CG.Purple.SqlServer.Migrations",
    "keywords": "Namespace CG.Purple.SqlServer.Migrations Classes InitialCreate"
  },
  "api/CG.Purple.SqlServer.Migrations.InitialCreate.html": {
    "href": "api/CG.Purple.SqlServer.Migrations.InitialCreate.html",
    "title": "Class InitialCreate",
    "keywords": "Class InitialCreate Inheritance System.Object Microsoft.EntityFrameworkCore.Migrations.Migration InitialCreate Inherited Members Microsoft.EntityFrameworkCore.Migrations.Migration.InitialDatabase Microsoft.EntityFrameworkCore.Migrations.Migration.TargetModel Microsoft.EntityFrameworkCore.Migrations.Migration.UpOperations Microsoft.EntityFrameworkCore.Migrations.Migration.DownOperations Microsoft.EntityFrameworkCore.Migrations.Migration.ActiveProvider System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.SqlServer.Migrations Assembly : CG.Purple.SqlServer.dll Syntax [DbContext(typeof(PurpleDbContext))] [Migration(\"20221122222543_InitialCreate\")] public class InitialCreate : Migration Methods BuildTargetModel(ModelBuilder) Declaration protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters Type Name Description Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder Overrides Microsoft.EntityFrameworkCore.Migrations.Migration.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder) Down(MigrationBuilder) Declaration protected override void Down(MigrationBuilder migrationBuilder) Parameters Type Name Description Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder migrationBuilder Overrides Microsoft.EntityFrameworkCore.Migrations.Migration.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder) Up(MigrationBuilder) Declaration protected override void Up(MigrationBuilder migrationBuilder) Parameters Type Name Description Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder migrationBuilder Overrides Microsoft.EntityFrameworkCore.Migrations.Migration.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)"
  },
  "api/CG.Purple.SqlServer.Options.DalOptions.html": {
    "href": "api/CG.Purple.SqlServer.Options.DalOptions.html",
    "title": "Class DalOptions",
    "keywords": "Class DalOptions This class contains configuration settings for the data access layer. Inheritance System.Object DalOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.SqlServer.Options Assembly : CG.Purple.SqlServer.dll Syntax public class DalOptions Properties ConnectionString This property contains the connection string for the DAL. Declaration public string ConnectionString { get; set; } Property Value Type Description System.String DropDatabaseOnStartup This property directs the DAL to drop the underlying database on startup. Declaration public bool DropDatabaseOnStartup { get; set; } Property Value Type Description System.Boolean Remarks This property is ignored in production. MigrateDatabaseOnStartup This property directs the DAL to migrate the underlying database on startup. Declaration public bool MigrateDatabaseOnStartup { get; set; } Property Value Type Description System.Boolean Remarks This property is ignored in production. If the DropDatabaseOnStartup property is set to true then migrations are always applied, since the database is then dropped and re-created. This property allows migrations to be applied without dropping and re-creating the database."
  },
  "api/CG.Purple.SqlServer.Options.html": {
    "href": "api/CG.Purple.SqlServer.Options.html",
    "title": "Namespace CG.Purple.SqlServer.Options",
    "keywords": "Namespace CG.Purple.SqlServer.Options Classes DalOptions This class contains configuration settings for the data access layer."
  },
  "api/Microsoft.AspNetCore.Builder.html": {
    "href": "api/Microsoft.AspNetCore.Builder.html",
    "title": "Namespace Microsoft.AspNetCore.Builder",
    "keywords": "Namespace Microsoft.AspNetCore.Builder Classes WebApplicationBuilderExtensions This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplicationBuilder type. WebApplicationBuilderExtensions001 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplicationBuilder type. WebApplicationBuilderExtensions002 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplicationBuilder type. WebApplicationBuilderExtensions003 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplicationBuilder type. WebApplicationBuilderExtensions004 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplicationBuilder type. WebApplicationBuilderExtensions005 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplicationBuilder type. WebApplicationBuilderExtensions006 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplicationBuilder type. WebApplicationExtensions001 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplication type. WebApplicationExtensions002 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplication type."
  },
  "api/Microsoft.AspNetCore.Builder.WebApplicationBuilderExtensions.html": {
    "href": "api/Microsoft.AspNetCore.Builder.WebApplicationBuilderExtensions.html",
    "title": "Class WebApplicationBuilderExtensions",
    "keywords": "Class WebApplicationBuilderExtensions This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplicationBuilder type. Inheritance System.Object WebApplicationBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.AspNetCore.Builder Assembly : CG.Purple.Host.Controllers.dll Syntax public static class WebApplicationBuilderExtensions Methods AddControllerLayer(WebApplicationBuilder, Nullable<ILogger>) This method adds the REST controller layer (yeah I know it's not technically a 'layer'. Work with me here ...) for the CG.Purple project. Declaration public static WebApplicationBuilder AddControllerLayer(this WebApplicationBuilder webApplicationBuilder, ILogger? bootstrapLogger = null) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplicationBuilder webApplicationBuilder The web application builder to use for the operation. System.Nullable < ILogger > bootstrapLogger The bootstrap logger to use for the operation. Returns Type Description Microsoft.AspNetCore.Builder.WebApplicationBuilder The value of the webApplicationBuilder parameter, for chaining calls together, Fluent style."
  },
  "api/Microsoft.AspNetCore.Builder.WebApplicationBuilderExtensions001.html": {
    "href": "api/Microsoft.AspNetCore.Builder.WebApplicationBuilderExtensions001.html",
    "title": "Class WebApplicationBuilderExtensions001",
    "keywords": "Class WebApplicationBuilderExtensions001 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplicationBuilder type. Inheritance System.Object WebApplicationBuilderExtensions001 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.AspNetCore.Builder Assembly : CG.Purple.dll Syntax public static class WebApplicationBuilderExtensions001 Methods AddBusinessLayer(WebApplicationBuilder, String, Nullable<ILogger>) This method adds the business logic layer (managers and directors) for the CG.Purple project. Declaration public static WebApplicationBuilder AddBusinessLayer(this WebApplicationBuilder webApplicationBuilder, string sectionName = \"BLL\", ILogger? bootstrapLogger = null) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplicationBuilder webApplicationBuilder The web application builder to use for the operation. System.String sectionName The configuration section to use for the operation. Defaults to BLL . System.Nullable < ILogger > bootstrapLogger The bootstrap logger to use for the operation. Returns Type Description Microsoft.AspNetCore.Builder.WebApplicationBuilder The value of the webApplicationBuilder parameter, for chaining calls together, Fluent style."
  },
  "api/Microsoft.AspNetCore.Builder.WebApplicationBuilderExtensions002.html": {
    "href": "api/Microsoft.AspNetCore.Builder.WebApplicationBuilderExtensions002.html",
    "title": "Class WebApplicationBuilderExtensions002",
    "keywords": "Class WebApplicationBuilderExtensions002 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplicationBuilder type. Inheritance System.Object WebApplicationBuilderExtensions002 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.AspNetCore.Builder Assembly : CG.Purple.Seeding.dll Syntax public static class WebApplicationBuilderExtensions002 Methods AddSeedingLayer(WebApplicationBuilder, String, Nullable<ILogger>) This method adds the data seeding layer for the CG.Purple project. Declaration public static WebApplicationBuilder AddSeedingLayer(this WebApplicationBuilder webApplicationBuilder, string sectionName = \"Seeding\", ILogger? bootstrapLogger = null) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplicationBuilder webApplicationBuilder The web application builder to use for the operation. System.String sectionName The configuration section to use for the operation. Defaults to: Seeding System.Nullable < ILogger > bootstrapLogger The bootstrap logger to use for the operation. Returns Type Description Microsoft.AspNetCore.Builder.WebApplicationBuilder The value of the webApplicationBuilder parameter, for chaining calls together, Fluent style."
  },
  "api/Microsoft.AspNetCore.Builder.WebApplicationBuilderExtensions003.html": {
    "href": "api/Microsoft.AspNetCore.Builder.WebApplicationBuilderExtensions003.html",
    "title": "Class WebApplicationBuilderExtensions003",
    "keywords": "Class WebApplicationBuilderExtensions003 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplicationBuilder type. Inheritance System.Object WebApplicationBuilderExtensions003 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.AspNetCore.Builder Assembly : CG.Purple.SqlServer.dll Syntax public static class WebApplicationBuilderExtensions003 Methods AddDataAccessLayer(WebApplicationBuilder, String, Nullable<ILogger>) This method adds the data-access layer for the CG.Purple project. Declaration public static WebApplicationBuilder AddDataAccessLayer(this WebApplicationBuilder webApplicationBuilder, string sectionName = \"DAL\", ILogger? bootstrapLogger = null) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplicationBuilder webApplicationBuilder The web application builder to use for the operation. System.String sectionName The configuration section to use for the operation. Defaults to DAL . System.Nullable < ILogger > bootstrapLogger A bootstrap logger to use for the operation. Returns Type Description Microsoft.AspNetCore.Builder.WebApplicationBuilder The value of the webApplicationBuilder parameter, for chaining calls together, Fluent style."
  },
  "api/Microsoft.AspNetCore.Builder.WebApplicationBuilderExtensions004.html": {
    "href": "api/Microsoft.AspNetCore.Builder.WebApplicationBuilderExtensions004.html",
    "title": "Class WebApplicationBuilderExtensions004",
    "keywords": "Class WebApplicationBuilderExtensions004 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplicationBuilder type. Inheritance System.Object WebApplicationBuilderExtensions004 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.AspNetCore.Builder Assembly : CG.Purple.Smtp.dll Syntax public static class WebApplicationBuilderExtensions004 Methods AddSmtpProvider(WebApplicationBuilder, Nullable<ILogger>) This method adds the SMTP provider for the CG.Purple project. Declaration public static WebApplicationBuilder AddSmtpProvider(this WebApplicationBuilder webApplicationBuilder, ILogger? bootstrapLogger = null) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplicationBuilder webApplicationBuilder The web application builder to use for the operation. System.Nullable < ILogger > bootstrapLogger The bootstrap logger to use for the operation. Returns Type Description Microsoft.AspNetCore.Builder.WebApplicationBuilder The value of the webApplicationBuilder parameter, for chaining calls together, Fluent style."
  },
  "api/Microsoft.AspNetCore.Builder.WebApplicationBuilderExtensions005.html": {
    "href": "api/Microsoft.AspNetCore.Builder.WebApplicationBuilderExtensions005.html",
    "title": "Class WebApplicationBuilderExtensions005",
    "keywords": "Class WebApplicationBuilderExtensions005 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplicationBuilder type. Inheritance System.Object WebApplicationBuilderExtensions005 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.AspNetCore.Builder Assembly : CG.Purple.SendGrid.dll Syntax public static class WebApplicationBuilderExtensions005 Methods AddSendGridProvider(WebApplicationBuilder, Nullable<ILogger>) This method adds the SendGrid provider for the CG.Purple project. Declaration public static WebApplicationBuilder AddSendGridProvider(this WebApplicationBuilder webApplicationBuilder, ILogger? bootstrapLogger = null) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplicationBuilder webApplicationBuilder The web application builder to use for the operation. System.Nullable < ILogger > bootstrapLogger The bootstrap logger to use for the operation. Returns Type Description Microsoft.AspNetCore.Builder.WebApplicationBuilder The value of the webApplicationBuilder parameter, for chaining calls together, Fluent style."
  },
  "api/Microsoft.AspNetCore.Builder.WebApplicationBuilderExtensions006.html": {
    "href": "api/Microsoft.AspNetCore.Builder.WebApplicationBuilderExtensions006.html",
    "title": "Class WebApplicationBuilderExtensions006",
    "keywords": "Class WebApplicationBuilderExtensions006 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplicationBuilder type. Inheritance System.Object WebApplicationBuilderExtensions006 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.AspNetCore.Builder Assembly : CG.Purple.Host.Services.dll Syntax public static class WebApplicationBuilderExtensions006 Methods AddServicesLayer(WebApplicationBuilder, String, Nullable<ILogger>) This method adds the hosted services layer (yeah I know it's not technically a 'layer'. Work with me here ...) for the CG.Purple project. Declaration public static WebApplicationBuilder AddServicesLayer(this WebApplicationBuilder webApplicationBuilder, string sectionName = \"HostedServices\", ILogger? bootstrapLogger = null) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplicationBuilder webApplicationBuilder The web application builder to use for the operation. System.String sectionName The configuration section to use for the operation. Defaults to HostedServices . System.Nullable < ILogger > bootstrapLogger The bootstrap logger to use for the operation. Returns Type Description Microsoft.AspNetCore.Builder.WebApplicationBuilder The value of the webApplicationBuilder parameter, for chaining calls together, Fluent style."
  },
  "api/Microsoft.AspNetCore.Builder.WebApplicationExtensions001.html": {
    "href": "api/Microsoft.AspNetCore.Builder.WebApplicationExtensions001.html",
    "title": "Class WebApplicationExtensions001",
    "keywords": "Class WebApplicationExtensions001 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplication type. Inheritance System.Object WebApplicationExtensions001 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.AspNetCore.Builder Assembly : CG.Purple.Seeding.dll Syntax public static class WebApplicationExtensions001 Methods UseStartupSeeding(WebApplication) This method runs the startup seeding logic for the CG.Purple project. Declaration public static WebApplication UseStartupSeeding(this WebApplication webApplication) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplication webApplication The web application to use for the operation. Returns Type Description Microsoft.AspNetCore.Builder.WebApplication The value of the webApplication parameter, for chaining calls together, Fluent style."
  },
  "api/Microsoft.AspNetCore.Builder.WebApplicationExtensions002.html": {
    "href": "api/Microsoft.AspNetCore.Builder.WebApplicationExtensions002.html",
    "title": "Class WebApplicationExtensions002",
    "keywords": "Class WebApplicationExtensions002 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplication type. Inheritance System.Object WebApplicationExtensions002 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.AspNetCore.Builder Assembly : CG.Purple.SqlServer.dll Syntax public static class WebApplicationExtensions002 Methods UseDalStartup(WebApplication) This method runs the DAL startup logic for the CG.Purple project. Declaration public static WebApplication UseDalStartup(this WebApplication webApplication) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplication webApplication The web application to use for the operation. Returns Type Description Microsoft.AspNetCore.Builder.WebApplication The value of the webApplication parameter, for chaining calls together, Fluent style."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction",
    "keywords": "Introduction CG.Purple is an idea for a self contained messaging microservice."
  }
}