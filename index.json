{
  "api/CG.Purple.Directors.DirectorException.html": {
    "href": "api/CG.Purple.Directors.DirectorException.html",
    "title": "Class DirectorException",
    "keywords": "Class DirectorException This class represents a director related exception. Inheritance System.Object DirectorException Namespace : CG.Purple.Directors Assembly : CG.Purple.Primitives.dll Syntax public class DirectorException : Exception Constructors DirectorException() This constructor creates a new instance of the DirectorException class. Declaration public DirectorException() DirectorException(SerializationInfo, StreamingContext) This constructor creates a new instance of the DirectorException class. Declaration public DirectorException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The serialization info to use for the exception. StreamingContext context The streaming context to use for the exception. DirectorException(String) This constructor creates a new instance of the DirectorException class. Declaration public DirectorException(string message) Parameters Type Name Description System.String message The message to use for the exception. DirectorException(String, Exception) This constructor creates a new instance of the DirectorException class. Declaration public DirectorException(string message, Exception innerException) Parameters Type Name Description System.String message The message to use for the exception. Exception innerException An optional inner exception reference."
  },
  "api/CG.Purple.Directors.html": {
    "href": "api/CG.Purple.Directors.html",
    "title": "Namespace CG.Purple.Directors",
    "keywords": "Namespace CG.Purple.Directors Classes DirectorException This class represents a director related exception. Interfaces IPipelineDirector This interface represents an object that performs message processing operations. ISeedDirector This interface represents an object that performs data seeding operations."
  },
  "api/CG.Purple.Directors.IPipelineDirector.html": {
    "href": "api/CG.Purple.Directors.IPipelineDirector.html",
    "title": "Interface IPipelineDirector",
    "keywords": "Interface IPipelineDirector This interface represents an object that performs message processing operations. Namespace : CG.Purple.Directors Assembly : CG.Purple.Abstractions.dll Syntax public interface IPipelineDirector Methods ProcessAsync(TimeSpan, CancellationToken) This method processes messages. Declaration Task ProcessAsync(TimeSpan sectionDelay, CancellationToken cancellationToken = null) Parameters Type Name Description TimeSpan sectionDelay The amount of time to delay, between sections, during each processing cycle. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition DirectorException This exception is thrown whenever the director fails to complete the operation."
  },
  "api/CG.Purple.Directors.ISeedDirector.html": {
    "href": "api/CG.Purple.Directors.ISeedDirector.html",
    "title": "Interface ISeedDirector",
    "keywords": "Interface ISeedDirector This interface represents an object that performs data seeding operations. Namespace : CG.Purple.Directors Assembly : CG.Purple.Abstractions.dll Syntax public interface ISeedDirector Methods SeedMailMessagesAsync(IConfiguration, String, Boolean, CancellationToken) This method performs a seeding operation for objects. Declaration Task SeedMailMessagesAsync(IConfiguration configuration, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description IConfiguration configuration The configuration to use for the operation. System.String userName The name of the user performing the operation. System.Boolean force true to force the seeding operation when there are existing objects in the underlying data-store; false otherwise. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition DirectorException This exception is thrown whenever the director fails to complete the operation. SeedMessageLogsAsync(IConfiguration, String, Boolean, CancellationToken) This method performs a seeding operation for objects. Declaration Task SeedMessageLogsAsync(IConfiguration configuration, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description IConfiguration configuration The configuration to use for the operation. System.String userName The name of the user performing the operation. System.Boolean force true to force the seeding operation when there are existing objects in the underlying data-store; false otherwise. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition DirectorException This exception is thrown whenever the director fails to complete the operation. SeedMimeTypesAsync(IConfiguration, String, Boolean, CancellationToken) This method performs a seeding operation for objects. Declaration Task SeedMimeTypesAsync(IConfiguration configuration, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description IConfiguration configuration The configuration to use for the operation. System.String userName The name of the user performing the operation. System.Boolean force true to force the seeding operation when there are existing objects in the underlying data-store; false otherwise. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition DirectorException This exception is thrown whenever the director fails to complete the operation. SeedParameterTypesAsync(IConfiguration, String, Boolean, CancellationToken) This method performs a seeding operation for objects. Declaration Task SeedParameterTypesAsync(IConfiguration configuration, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description IConfiguration configuration The configuration to use for the operation. System.String userName The name of the user performing the operation. System.Boolean force true to force the seeding operation when there are existing objects in the underlying data-store; false otherwise. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition DirectorException This exception is thrown whenever the director fails to complete the operation. SeedPropertyTypesAsync(IConfiguration, String, Boolean, CancellationToken) This method performs a seeding operation for objects. Declaration Task SeedPropertyTypesAsync(IConfiguration configuration, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description IConfiguration configuration The configuration to use for the operation. System.String userName The name of the user performing the operation. System.Boolean force true to force the seeding operation when there are existing objects in the underlying data-store; false otherwise. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition DirectorException This exception is thrown whenever the director fails to complete the operation. SeedProviderParametersAsync(IConfiguration, String, Boolean, CancellationToken) This method performs a seeding operation for objects. Declaration Task SeedProviderParametersAsync(IConfiguration configuration, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description IConfiguration configuration The configuration to use for the operation. System.String userName The name of the user performing the operation. System.Boolean force true to force the seeding operation when there are existing objects in the underlying data-store; false otherwise. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition DirectorException This exception is thrown whenever the director fails to complete the operation. SeedProviderTypesAsync(IConfiguration, String, Boolean, CancellationToken) This method performs a seeding operation for objects. Declaration Task SeedProviderTypesAsync(IConfiguration configuration, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description IConfiguration configuration The configuration to use for the operation. System.String userName The name of the user performing the operation. System.Boolean force true to force the seeding operation when there are existing objects in the underlying data-store; false otherwise. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition DirectorException This exception is thrown whenever the director fails to complete the operation. SeedTextMessagesAsync(IConfiguration, String, Boolean, CancellationToken) This method performs a seeding operation for objects. Declaration Task SeedTextMessagesAsync(IConfiguration configuration, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description IConfiguration configuration The configuration to use for the operation. System.String userName The name of the user performing the operation. System.Boolean force true to force the seeding operation when there are existing objects in the underlying data-store; false otherwise. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition DirectorException This exception is thrown whenever the director fails to complete the operation."
  },
  "api/CG.Purple.Host.Controllers.html": {
    "href": "api/CG.Purple.Host.Controllers.html",
    "title": "Namespace CG.Purple.Host.Controllers",
    "keywords": "Namespace CG.Purple.Host.Controllers Classes MailController This class is a REST controller for operations related to email resources. TextController This class is a REST controller for operations related to text resources."
  },
  "api/CG.Purple.Host.Controllers.MailController.html": {
    "href": "api/CG.Purple.Host.Controllers.MailController.html",
    "title": "Class MailController",
    "keywords": "Class MailController This class is a REST controller for operations related to email resources. Inheritance System.Object MailController Namespace : CG.Purple.Host.Controllers Assembly : CG.Purple.Host.Controllers.dll Syntax public class MailController : ControllerBase Constructors MailController(IMailMessageManager, IMessageLogManager, IMimeTypeManager, IPropertyTypeManager, IProviderTypeManager, ILogger<MailController>) This constructor creates a new instance of the MailController class. Declaration public MailController(IMailMessageManager mailMessageManager, IMessageLogManager messageLogManager, IMimeTypeManager mimeTypeManager, IPropertyTypeManager propertyTypeManager, IProviderTypeManager providerTypeManager, ILogger<MailController> logger) Parameters Type Name Description IMailMessageManager mailMessageManager The mail message manager to use with this controller. IMessageLogManager messageLogManager The message log manager to use with this controller. IMimeTypeManager mimeTypeManager The mime type manager to use with this controller. IPropertyTypeManager propertyTypeManager The property type manager to use with this controller. IProviderTypeManager providerTypeManager The provider type manager to use with this controller. ILogger < MailController > logger The logger to use with this controller. Fields _logger This field contains the logger for this controller. Declaration protected readonly ILogger<MailController> _logger Field Value Type Description ILogger < MailController > _mailMessageManager This field contains the mail message manager for this controller. Declaration protected readonly IMailMessageManager _mailMessageManager Field Value Type Description IMailMessageManager _messageLogManager This field contains the message log manager for this controller. Declaration protected readonly IMessageLogManager _messageLogManager Field Value Type Description IMessageLogManager _mimeTypeManager This field contains the mime type manager for this controller. Declaration protected readonly IMimeTypeManager _mimeTypeManager Field Value Type Description IMimeTypeManager _propertyTypeManager This field contains the property type manager for this controller. Declaration protected readonly IPropertyTypeManager _propertyTypeManager Field Value Type Description IPropertyTypeManager _providerTypeManager This field contains the provider type manager for this controller. Declaration protected readonly IProviderTypeManager _providerTypeManager Field Value Type Description IProviderTypeManager Methods GetByKeyAsync(String) This method searches for a mail message by key. Declaration public virtual async Task<IActionResult> GetByKeyAsync(string messageKey) Parameters Type Name Description System.String messageKey The message key to use for the operation. Returns Type Description Task < IActionResult > A task to perform the operation that returns an object. PostAsync(MailStorageRequest) This method stores a new email. Declaration public virtual async Task<IActionResult> PostAsync(MailStorageRequest request) Parameters Type Name Description MailStorageRequest request The request to use for the operation. Returns Type Description Task < IActionResult > A task to perform the operation that returns an object."
  },
  "api/CG.Purple.Host.Controllers.TextController.html": {
    "href": "api/CG.Purple.Host.Controllers.TextController.html",
    "title": "Class TextController",
    "keywords": "Class TextController This class is a REST controller for operations related to text resources. Inheritance System.Object TextController Namespace : CG.Purple.Host.Controllers Assembly : CG.Purple.Host.Controllers.dll Syntax public class TextController : ControllerBase Constructors TextController(ITextMessageManager, IMessageLogManager, IMimeTypeManager, IPropertyTypeManager, IProviderTypeManager, ILogger<TextController>) This constructor creates a new instance of the TextController class. Declaration public TextController(ITextMessageManager textMessageManager, IMessageLogManager messageLogManager, IMimeTypeManager mimeTypeManager, IPropertyTypeManager propertyTypeManager, IProviderTypeManager providerTypeManager, ILogger<TextController> logger) Parameters Type Name Description ITextMessageManager textMessageManager The text message manager to use with this controller. IMessageLogManager messageLogManager The message log manager to use with this controller. IMimeTypeManager mimeTypeManager The mime type manager to use with this controller. IPropertyTypeManager propertyTypeManager The property type manager to use with this controller. IProviderTypeManager providerTypeManager The provider type manager to use with this controller. ILogger < TextController > logger The logger to use with this controller. Fields _logger This field contains the logger for this controller. Declaration protected readonly ILogger<TextController> _logger Field Value Type Description ILogger < TextController > _messageLogManager This field contains the message log manager for this controller. Declaration protected readonly IMessageLogManager _messageLogManager Field Value Type Description IMessageLogManager _mimeTypeManager This field contains the mime type manager for this controller. Declaration protected readonly IMimeTypeManager _mimeTypeManager Field Value Type Description IMimeTypeManager _propertyTypeManager This field contains the property type manager for this controller. Declaration protected readonly IPropertyTypeManager _propertyTypeManager Field Value Type Description IPropertyTypeManager _providerTypeManager This field contains the provider type manager for this controller. Declaration protected readonly IProviderTypeManager _providerTypeManager Field Value Type Description IProviderTypeManager _textMessageManager This field contains the text message manager for this controller. Declaration protected readonly ITextMessageManager _textMessageManager Field Value Type Description ITextMessageManager Methods GetByKeyAsync(String) This method searches for a text message by key. Declaration public virtual async Task<IActionResult> GetByKeyAsync(string messageKey) Parameters Type Name Description System.String messageKey The message key to use for the operation. Returns Type Description Task < IActionResult > A task to perform the operation that returns an object. PostAsync(TextStorageRequest) This method stores a new text. Declaration public virtual async Task<IActionResult> PostAsync(TextStorageRequest request) Parameters Type Name Description TextStorageRequest request The request to use for the operation. Returns Type Description Task < IActionResult > A task to perform the operation that returns an object."
  },
  "api/CG.Purple.Host.Directors.html": {
    "href": "api/CG.Purple.Host.Directors.html",
    "title": "Namespace CG.Purple.Host.Directors",
    "keywords": "Namespace CG.Purple.Host.Directors Classes PipelineDirector This class is a default implementation of the"
  },
  "api/CG.Purple.Host.Directors.PipelineDirector.html": {
    "href": "api/CG.Purple.Host.Directors.PipelineDirector.html",
    "title": "Class PipelineDirector",
    "keywords": "Class PipelineDirector This class is a default implementation of the Inheritance System.Object PipelineDirector Namespace : CG.Purple.Host.Directors Assembly : CG.Purple.Host.Services.dll Syntax class PipelineDirector : IPipelineDirector Constructors PipelineDirector(StatusHub, IAttachmentManager, IMessageManager, IMessageLogManager, IMessagePropertyManager, IProviderTypeManager, IMessageProviderFactory, ILogger<IPipelineDirector>) This constructor creates a new instance of the PipelineDirector class. Declaration public PipelineDirector(StatusHub statusHub, IAttachmentManager attachmentManager, IMessageManager messageManager, IMessageLogManager messageLogManager, IMessagePropertyManager messagePropertyManager, IProviderTypeManager providerTypeManager, IMessageProviderFactory messageProviderFactory, ILogger<IPipelineDirector> logger) Parameters Type Name Description StatusHub statusHub The SignalR status hub to use with this director. IAttachmentManager attachmentManager The attachment manager to use with this director. IMessageManager messageManager The message manager to use with this director. IMessageLogManager messageLogManager The message log manager to use with this director. IMessagePropertyManager messagePropertyManager The message property manager to use with this director. IProviderTypeManager providerTypeManager The provider type manager to use with this director. IMessageProviderFactory messageProviderFactory The message provider factory to use with this director. ILogger < IPipelineDirector > logger The logger to use with this director. Fields _attachmentManager This field contains the attachment manager for this director. Declaration protected readonly IAttachmentManager _attachmentManager Field Value Type Description IAttachmentManager _logger This field contains the logger for this director. Declaration protected readonly ILogger<IPipelineDirector> _logger Field Value Type Description ILogger < IPipelineDirector > _messageLogManager This field contains the message log manager for this director. Declaration protected readonly IMessageLogManager _messageLogManager Field Value Type Description IMessageLogManager _messageManager This field contains the message manager for this director. Declaration protected readonly IMessageManager _messageManager Field Value Type Description IMessageManager _messagePropertyManager This field contains the message property manager for this director. Declaration protected readonly IMessagePropertyManager _messagePropertyManager Field Value Type Description IMessagePropertyManager _messageProviderFactory This field contains the message provider factory for this director. Declaration protected readonly IMessageProviderFactory _messageProviderFactory Field Value Type Description IMessageProviderFactory _providerTypeManager This field contains the provider type manager for this director. Declaration protected readonly IProviderTypeManager _providerTypeManager Field Value Type Description IProviderTypeManager _statusHub This field contains the SignalR status hub for this director. Declaration protected readonly StatusHub _statusHub Field Value Type Description StatusHub Methods ArchiveMessagesAsync(CancellationToken) This method looks for any messages that can be archived and removes them, along with their associated logs and properties. Declaration async Task ArchiveMessagesAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. AssignProviderMessagesAsync(IEnumerable<Message>, IEnumerable<ProviderType>, CancellationToken) This method assigns a provider type to any messages that currently lack one. Declaration async Task<IEnumerable<Message>> AssignProviderMessagesAsync(IEnumerable<Message> messages, IEnumerable<ProviderType> providerTypes, CancellationToken cancellationToken = null) Parameters Type Name Description IEnumerable < Message > messages The messages to use for the operation. IEnumerable < ProviderType > providerTypes The provider types to use for the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < Message >> A task to perform the operation that returns the collection of messages that are now ready to be processed. GetProviderTypesAsync(CancellationToken) This method fetches a sequence of enabled provider types. Declaration async Task<IEnumerable<ProviderType>> GetProviderTypesAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < ProviderType >> A task to perform the operation that returns a sequence of objects. ProcessAsync(TimeSpan, CancellationToken) Declaration public virtual async Task ProcessAsync(TimeSpan sectionDelay, CancellationToken cancellationToken = null) Parameters Type Name Description TimeSpan sectionDelay CancellationToken cancellationToken Returns Type Description Task ProcessMessagesAsync(CancellationToken) This method looks for any messages that can be processed, and sends those messages to the appropriate provider. Declaration async Task ProcessMessagesAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. RetryMessagesAsync(CancellationToken) This method looks for any messages that can be retried, and sets them back to a pending state. Declaration async Task RetryMessagesAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation."
  },
  "api/CG.Purple.Host.Pages.Admin.MimeTypes.FileTypeDialog.html": {
    "href": "api/CG.Purple.Host.Pages.Admin.MimeTypes.FileTypeDialog.html",
    "title": "Class FileTypeDialog",
    "keywords": "Class FileTypeDialog This class is the code-behind for the FileTypeDialog dialog. Inheritance System.Object FileTypeDialog Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.Pages.Admin.MimeTypes Assembly : CG.Purple.Host.dll Syntax public class FileTypeDialog Properties Model This property contains the edit form's model. Declaration public FileType Model { get; set; } Property Value Type Description FileType MudDialog This property contains the dialog reference. Declaration public MudDialogInstance MudDialog { get; set; } Property Value Type Description MudDialogInstance Methods Cancel() This method cancels the dialog. Declaration protected void Cancel() OnValidSubmit() This method submits the dialog. Declaration protected void OnValidSubmit()"
  },
  "api/CG.Purple.Host.Pages.Admin.MimeTypes.html": {
    "href": "api/CG.Purple.Host.Pages.Admin.MimeTypes.html",
    "title": "Namespace CG.Purple.Host.Pages.Admin.MimeTypes",
    "keywords": "Namespace CG.Purple.Host.Pages.Admin.MimeTypes Classes FileTypeDialog This class is the code-behind for the FileTypeDialog dialog. Index This class is the code-behind for the Index page. MimeTypeDialog This class is the code-behind for the MimeTypeDialog dialog."
  },
  "api/CG.Purple.Host.Pages.Admin.MimeTypes.Index.html": {
    "href": "api/CG.Purple.Host.Pages.Admin.MimeTypes.Index.html",
    "title": "Class Index",
    "keywords": "Class Index This class is the code-behind for the Index page. Inheritance System.Object Index Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.Pages.Admin.MimeTypes Assembly : CG.Purple.Host.dll Syntax public class Index Fields _crumbs This field contains a reference to breadcrumbs for the view. Declaration protected readonly List<BreadcrumbItem> _crumbs Field Value Type Description List < BreadcrumbItem > _gridSearchString This field contains the current mail search string. Declaration protected string _gridSearchString Field Value Type Description System.String _isBusy This field indicates the page is busy. Declaration protected bool _isBusy Field Value Type Description System.Boolean _mimeTypes This field contains the collection of mime types. Declaration protected IEnumerable<MimeType>? _mimeTypes Field Value Type Description System.Nullable < IEnumerable < MimeType >> Properties DialogService This property contains the dialog service for this page. Declaration protected IDialogService DialogService { get; set; } Property Value Type Description IDialogService FileTypeManager This property contains the file type manager for this page. Declaration protected IFileTypeManager FileTypeManager { get; set; } Property Value Type Description IFileTypeManager HttpContextAccessor This property contains the HTTP context accessor. Declaration protected IHttpContextAccessor HttpContextAccessor { get; set; } Property Value Type Description IHttpContextAccessor Logger This property contains the logger for this page. Declaration protected ILogger<Index> Logger { get; set; } Property Value Type Description ILogger < Index > MimeTypeManager This property contains the mime type manager for this page. Declaration protected IMimeTypeManager MimeTypeManager { get; set; } Property Value Type Description IMimeTypeManager SnackbarService This property contains the snackbar service for this page. Declaration protected ISnackbar SnackbarService { get; set; } Property Value Type Description ISnackbar UserName This property contains the name of the current user, or the word 'anonymous' if nobody is currently authenticated. Declaration protected string UserName { get; } Property Value Type Description System.String Methods FilterFunc(MimeType, String) This method performs a search of the mime types. Declaration protected bool FilterFunc(MimeType element, string searchString) Parameters Type Name Description MimeType element The element to uses for the operation. System.String searchString The search string to use for the operation. Returns Type Description System.Boolean true if a match was found; false otherwise. FilterFunc1(MimeType) This method adapts the FilterFunc(MimeType, String) method for use with a control. Declaration protected bool FilterFunc1(MimeType element) Parameters Type Name Description MimeType element The element to use for the operation. Returns Type Description System.Boolean true if a match was found; false otherwise. OnCreateAsync() This method add a new mime type. Declaration protected async Task OnCreateAsync() Returns Type Description Task A task to perform the operation. OnDeleteAsync(MimeType) This method deletes the given mime type. Declaration protected async Task OnDeleteAsync(MimeType mimeType) Parameters Type Name Description MimeType mimeType The mime type to use for the operation. Returns Type Description Task A task to perform the operation. OnEditAsync(MimeType) This method edits the given mime type. Declaration protected async Task OnEditAsync(MimeType mimeType) Parameters Type Name Description MimeType mimeType The mime type to use for the operation. Returns Type Description Task A task to perform the operation. OnInitializedAsync() This method is called by the framework to initialize the page. Declaration protected override async Task OnInitializedAsync() Returns Type Description Task A task to perform the operation."
  },
  "api/CG.Purple.Host.Pages.Admin.MimeTypes.MimeTypeDialog.html": {
    "href": "api/CG.Purple.Host.Pages.Admin.MimeTypes.MimeTypeDialog.html",
    "title": "Class MimeTypeDialog",
    "keywords": "Class MimeTypeDialog This class is the code-behind for the MimeTypeDialog dialog. Inheritance System.Object MimeTypeDialog Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.Pages.Admin.MimeTypes Assembly : CG.Purple.Host.dll Syntax public class MimeTypeDialog Fields _isBusy This field indicates the page is busy. Declaration protected bool _isBusy Field Value Type Description System.Boolean Properties DialogService This property contains the dialog service for the dialog. Declaration protected IDialogService DialogService { get; set; } Property Value Type Description IDialogService FileTypeManager This property contains the file type manager for this page. Declaration protected IFileTypeManager FileTypeManager { get; set; } Property Value Type Description IFileTypeManager HttpContextAccessor This property contains the HTTP context accessor. Declaration protected IHttpContextAccessor HttpContextAccessor { get; set; } Property Value Type Description IHttpContextAccessor Logger This property contains the logger for this page. Declaration protected ILogger<MimeTypeDialog> Logger { get; set; } Property Value Type Description ILogger < MimeTypeDialog > Model This property contains the edit form's model. Declaration public MimeType Model { get; set; } Property Value Type Description MimeType MudDialog This property contains the dialog reference. Declaration public MudDialogInstance MudDialog { get; set; } Property Value Type Description MudDialogInstance SnackbarService This property contains the snackbar service for this page. Declaration protected ISnackbar SnackbarService { get; set; } Property Value Type Description ISnackbar UserName This property contains the name of the current user, or the word 'anonymous' if nobody is currently authenticated. Declaration protected string UserName { get; } Property Value Type Description System.String Methods Cancel() This method cancels the dialog. Declaration protected void Cancel() OnCreateAsync() This method creates a file type. Declaration protected async Task OnCreateAsync() Returns Type Description Task A task to perform the operation. OnDeleteAsync(FileType) This method deletes the given file type. Declaration protected async Task OnDeleteAsync(FileType fileType) Parameters Type Name Description FileType fileType The file type to use for the operation. Returns Type Description Task A task to perform the operation. OnEditAsync(FileType) This method edits the given file type. Declaration protected async Task OnEditAsync(FileType fileType) Parameters Type Name Description FileType fileType The file type to use for the operation. Returns Type Description Task A task to perform the operation. OnValidSubmit() This method submits the dialog. Declaration protected void OnValidSubmit()"
  },
  "api/CG.Purple.Host.Pages.Admin.ParameterTypes.html": {
    "href": "api/CG.Purple.Host.Pages.Admin.ParameterTypes.html",
    "title": "Namespace CG.Purple.Host.Pages.Admin.ParameterTypes",
    "keywords": "Namespace CG.Purple.Host.Pages.Admin.ParameterTypes Classes Index This class is the code-behind for the Index page. ParameterTypeDialog This class is the code-behind for the ParameterTypeDialog page."
  },
  "api/CG.Purple.Host.Pages.Admin.ParameterTypes.Index.html": {
    "href": "api/CG.Purple.Host.Pages.Admin.ParameterTypes.Index.html",
    "title": "Class Index",
    "keywords": "Class Index This class is the code-behind for the Index page. Inheritance System.Object Index Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.Pages.Admin.ParameterTypes Assembly : CG.Purple.Host.dll Syntax public class Index Fields _crumbs This field contains a reference to breadcrumbs for the view. Declaration protected readonly List<BreadcrumbItem> _crumbs Field Value Type Description List < BreadcrumbItem > _gridSearchString This field contains the current mail search string. Declaration protected string _gridSearchString Field Value Type Description System.String _isBusy This field indicates the page is busy. Declaration protected bool _isBusy Field Value Type Description System.Boolean _parameterTypes This field contains the collection of parameter types. Declaration protected IEnumerable<ParameterType>? _parameterTypes Field Value Type Description System.Nullable < IEnumerable < ParameterType >> Properties DialogService This property contains the dialog service for this page. Declaration protected IDialogService DialogService { get; set; } Property Value Type Description IDialogService HttpContextAccessor This property contains the HTTP context accessor. Declaration protected IHttpContextAccessor HttpContextAccessor { get; set; } Property Value Type Description IHttpContextAccessor Logger This property contains the logger for this page. Declaration protected ILogger<Index> Logger { get; set; } Property Value Type Description ILogger < Index > ParameterTypeManager This property contains the parameter type manager for this page. Declaration protected IParameterTypeManager ParameterTypeManager { get; set; } Property Value Type Description IParameterTypeManager SnackbarService This property contains the snackbar service for this page. Declaration protected ISnackbar SnackbarService { get; set; } Property Value Type Description ISnackbar UserName This property contains the name of the current user, or the word 'anonymous' if nobody is currently authenticated. Declaration protected string UserName { get; } Property Value Type Description System.String Methods FilterFunc(ParameterType, String) This method performs a search of the parameter types. Declaration protected bool FilterFunc(ParameterType element, string searchString) Parameters Type Name Description ParameterType element The element to uses for the operation. System.String searchString The search string to use for the operation. Returns Type Description System.Boolean true if a match was found; false otherwise. FilterFunc1(ParameterType) This method adapts the FilterFunc(ParameterType, String) method for use with a control. Declaration protected bool FilterFunc1(ParameterType element) Parameters Type Name Description ParameterType element The element to use for the operation. Returns Type Description System.Boolean true if a match was found; false otherwise. OnCreateAsync() This method add a new parameter type. Declaration protected async Task OnCreateAsync() Returns Type Description Task A task to perform the operation. OnDeleteAsync(ParameterType) This method deletes the given parameter type. Declaration protected async Task OnDeleteAsync(ParameterType parameterType) Parameters Type Name Description ParameterType parameterType The parameter type to use for the operation. Returns Type Description Task A task to perform the operation. OnEditAsync(ParameterType) This method edits the given parameter type. Declaration protected async Task OnEditAsync(ParameterType parameterType) Parameters Type Name Description ParameterType parameterType The parameter type to use for the operation. Returns Type Description Task A task to perform the operation. OnInitializedAsync() This method is called by the framework to initialize the page. Declaration protected override async Task OnInitializedAsync() Returns Type Description Task A task to perform the operation."
  },
  "api/CG.Purple.Host.Pages.Admin.ParameterTypes.ParameterTypeDialog.html": {
    "href": "api/CG.Purple.Host.Pages.Admin.ParameterTypes.ParameterTypeDialog.html",
    "title": "Class ParameterTypeDialog",
    "keywords": "Class ParameterTypeDialog This class is the code-behind for the ParameterTypeDialog page. Inheritance System.Object ParameterTypeDialog Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.Pages.Admin.ParameterTypes Assembly : CG.Purple.Host.dll Syntax public class ParameterTypeDialog Properties Model This property contains the edit form's model. Declaration public ParameterType Model { get; set; } Property Value Type Description ParameterType MudDialog This property contains the dialog reference. Declaration public MudDialogInstance MudDialog { get; set; } Property Value Type Description MudDialogInstance Methods Cancel() This method cancels the dialog. Declaration protected void Cancel() OnValidSubmit() This method submits the dialog. Declaration protected void OnValidSubmit()"
  },
  "api/CG.Purple.Host.Pages.Admin.PropertyTypes.html": {
    "href": "api/CG.Purple.Host.Pages.Admin.PropertyTypes.html",
    "title": "Namespace CG.Purple.Host.Pages.Admin.PropertyTypes",
    "keywords": "Namespace CG.Purple.Host.Pages.Admin.PropertyTypes Classes Index This class is the code-behind for the Index page. PropertyTypeDialog This class is the code-behind for the PropertyTypeDialog page."
  },
  "api/CG.Purple.Host.Pages.Admin.PropertyTypes.Index.html": {
    "href": "api/CG.Purple.Host.Pages.Admin.PropertyTypes.Index.html",
    "title": "Class Index",
    "keywords": "Class Index This class is the code-behind for the Index page. Inheritance System.Object Index Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.Pages.Admin.PropertyTypes Assembly : CG.Purple.Host.dll Syntax public class Index Fields _crumbs This field contains a reference to breadcrumbs for the view. Declaration protected readonly List<BreadcrumbItem> _crumbs Field Value Type Description List < BreadcrumbItem > _gridSearchString This field contains the current mail search string. Declaration protected string _gridSearchString Field Value Type Description System.String _isBusy This field indicates the page is busy. Declaration protected bool _isBusy Field Value Type Description System.Boolean _propertyTypes This field contains the collection of property types. Declaration protected IEnumerable<PropertyType>? _propertyTypes Field Value Type Description System.Nullable < IEnumerable < PropertyType >> Properties DialogService This property contains the dialog service for this page. Declaration protected IDialogService DialogService { get; set; } Property Value Type Description IDialogService HttpContextAccessor This property contains the HTTP context accessor. Declaration protected IHttpContextAccessor HttpContextAccessor { get; set; } Property Value Type Description IHttpContextAccessor Logger This property contains the logger for this page. Declaration protected ILogger<Index> Logger { get; set; } Property Value Type Description ILogger < Index > PropertyTypeManager This property contains the property type manager for this page. Declaration protected IPropertyTypeManager PropertyTypeManager { get; set; } Property Value Type Description IPropertyTypeManager SnackbarService This property contains the snackbar service for this page. Declaration protected ISnackbar SnackbarService { get; set; } Property Value Type Description ISnackbar UserName This property contains the name of the current user, or the word 'anonymous' if nobody is currently authenticated. Declaration protected string UserName { get; } Property Value Type Description System.String Methods FilterFunc(PropertyType, String) This method performs a search of the property types. Declaration protected bool FilterFunc(PropertyType element, string searchString) Parameters Type Name Description PropertyType element The element to uses for the operation. System.String searchString The search string to use for the operation. Returns Type Description System.Boolean true if a match was found; false otherwise. FilterFunc1(PropertyType) This method adapts the FilterFunc(PropertyType, String) method for use with a control. Declaration protected bool FilterFunc1(PropertyType element) Parameters Type Name Description PropertyType element The element to use for the operation. Returns Type Description System.Boolean true if a match was found; false otherwise. OnCreateAsync() This method add a new property type. Declaration protected async Task OnCreateAsync() Returns Type Description Task A task to perform the operation. OnDeleteAsync(PropertyType) This method deletes the given property type. Declaration protected async Task OnDeleteAsync(PropertyType propertyType) Parameters Type Name Description PropertyType propertyType The property type to use for the operation. Returns Type Description Task A task to perform the operation. OnEditAsync(PropertyType) This method edits the given property type. Declaration protected async Task OnEditAsync(PropertyType propertyType) Parameters Type Name Description PropertyType propertyType The property type to use for the operation. Returns Type Description Task A task to perform the operation. OnInitializedAsync() This method is called by the framework to initialize the page. Declaration protected override async Task OnInitializedAsync() Returns Type Description Task A task to perform the operation."
  },
  "api/CG.Purple.Host.Pages.Admin.PropertyTypes.PropertyTypeDialog.html": {
    "href": "api/CG.Purple.Host.Pages.Admin.PropertyTypes.PropertyTypeDialog.html",
    "title": "Class PropertyTypeDialog",
    "keywords": "Class PropertyTypeDialog This class is the code-behind for the PropertyTypeDialog page. Inheritance System.Object PropertyTypeDialog Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.Pages.Admin.PropertyTypes Assembly : CG.Purple.Host.dll Syntax public class PropertyTypeDialog Fields _gridSearchString This field contains the current mail search string. Declaration protected string _gridSearchString Field Value Type Description System.String Properties HttpContextAccessor This property contains the HTTP context accessor. Declaration protected IHttpContextAccessor HttpContextAccessor { get; set; } Property Value Type Description IHttpContextAccessor Model This property contains the edit form's model. Declaration public PropertyType Model { get; set; } Property Value Type Description PropertyType MudDialog This property contains the dialog reference. Declaration public MudDialogInstance MudDialog { get; set; } Property Value Type Description MudDialogInstance UserName This property contains the name of the current user, or the word 'anonymous' if nobody is currently authenticated. Declaration protected string UserName { get; } Property Value Type Description System.String Methods Cancel() This method cancels the dialog. Declaration protected void Cancel() FilterFunc(ProviderParameter, String) This method performs a search of the provider parameters. Declaration protected bool FilterFunc(ProviderParameter element, string searchString) Parameters Type Name Description ProviderParameter element The element to uses for the operation. System.String searchString The search string to use for the operation. Returns Type Description System.Boolean true if a match was found; false otherwise. FilterFunc1(ProviderParameter) This method adapts the FilterFunc(ProviderParameter, String) method for use with a control. Declaration protected bool FilterFunc1(ProviderParameter element) Parameters Type Name Description ProviderParameter element The element to use for the operation. Returns Type Description System.Boolean true if a match was found; false otherwise. OnValidSubmit() This method submits the dialog. Declaration protected void OnValidSubmit()"
  },
  "api/CG.Purple.Host.Pages.Admin.ProviderTypes.html": {
    "href": "api/CG.Purple.Host.Pages.Admin.ProviderTypes.html",
    "title": "Namespace CG.Purple.Host.Pages.Admin.ProviderTypes",
    "keywords": "Namespace CG.Purple.Host.Pages.Admin.ProviderTypes Classes Index This class is the code-behind for the Index page. ProviderParameterDialog This class is the code-behind for the ProviderParameterDialog page. ProviderTypeDialog This class is the code-behind for the ProviderTypeDialog page."
  },
  "api/CG.Purple.Host.Pages.Admin.ProviderTypes.Index.html": {
    "href": "api/CG.Purple.Host.Pages.Admin.ProviderTypes.Index.html",
    "title": "Class Index",
    "keywords": "Class Index This class is the code-behind for the Index page. Inheritance System.Object Index Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.Pages.Admin.ProviderTypes Assembly : CG.Purple.Host.dll Syntax public class Index Fields _crumbs This field contains a reference to breadcrumbs for the view. Declaration protected readonly List<BreadcrumbItem> _crumbs Field Value Type Description List < BreadcrumbItem > _factoryTypes This field contains the collection of factory types. Declaration protected IEnumerable<string> _factoryTypes Field Value Type Description IEnumerable < System.String > _gridSearchString This field contains the current mail search string. Declaration protected string _gridSearchString Field Value Type Description System.String _isBusy This field indicates the page is busy. Declaration protected bool _isBusy Field Value Type Description System.Boolean _parameterTypes This field contains the collection of parameter types. Declaration protected IEnumerable<ParameterType> _parameterTypes Field Value Type Description IEnumerable < ParameterType > _providerTypes This field contains the collection of provider types. Declaration protected IEnumerable<ProviderType> _providerTypes Field Value Type Description IEnumerable < ProviderType > Properties DialogService This property contains the dialog service for this page. Declaration protected IDialogService DialogService { get; set; } Property Value Type Description IDialogService HttpContextAccessor This property contains the HTTP context accessor. Declaration protected IHttpContextAccessor HttpContextAccessor { get; set; } Property Value Type Description IHttpContextAccessor Logger This property contains the logger for this page. Declaration protected ILogger<Index> Logger { get; set; } Property Value Type Description ILogger < Index > ParameterTypeManager This property contains the parameter type manager for this page. Declaration protected IParameterTypeManager ParameterTypeManager { get; set; } Property Value Type Description IParameterTypeManager ProviderTypeManager This property contains the provider type manager for this page. Declaration protected IProviderTypeManager ProviderTypeManager { get; set; } Property Value Type Description IProviderTypeManager SnackbarService This property contains the snackbar service for this page. Declaration protected ISnackbar SnackbarService { get; set; } Property Value Type Description ISnackbar UserName This property contains the name of the current user, or the word 'anonymous' if nobody is currently authenticated. Declaration protected string UserName { get; } Property Value Type Description System.String Methods FilterFactoryTypes() This method filters the list of available factory types. Declaration void FilterFactoryTypes() FilterFunc(ProviderType, String) This method performs a search of the provider types. Declaration protected bool FilterFunc(ProviderType element, string searchString) Parameters Type Name Description ProviderType element The element to uses for the operation. System.String searchString The search string to use for the operation. Returns Type Description System.Boolean true if a match was found; false otherwise. FilterFunc1(ProviderType) This method adapts the FilterFunc(ProviderType, String) method for use with a control. Declaration protected bool FilterFunc1(ProviderType element) Parameters Type Name Description ProviderType element The element to use for the operation. Returns Type Description System.Boolean true if a match was found; false otherwise. OnCreateAsync() This method adds a new provider type. Declaration protected async Task OnCreateAsync() Returns Type Description Task A task to perform the operation. OnDeleteAsync(ProviderType) This method deletes the given provider type. Declaration protected async Task OnDeleteAsync(ProviderType providerType) Parameters Type Name Description ProviderType providerType The provider type to use for the operation. Returns Type Description Task A task to perform the operation. OnEditAsync(ProviderType) This method edits the given provider type. Declaration protected async Task OnEditAsync(ProviderType providerType) Parameters Type Name Description ProviderType providerType The provider type to use for the operation. Returns Type Description Task A task to perform the operation. OnInitializedAsync() This method is called by the framework to initialize the page. Declaration protected override async Task OnInitializedAsync() Returns Type Description Task A task to perform the operation."
  },
  "api/CG.Purple.Host.Pages.Admin.ProviderTypes.ProviderParameterDialog.html": {
    "href": "api/CG.Purple.Host.Pages.Admin.ProviderTypes.ProviderParameterDialog.html",
    "title": "Class ProviderParameterDialog",
    "keywords": "Class ProviderParameterDialog This class is the code-behind for the ProviderParameterDialog page. Inheritance System.Object ProviderParameterDialog Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.Pages.Admin.ProviderTypes Assembly : CG.Purple.Host.dll Syntax public class ProviderParameterDialog Fields _passwordInput This field indicates the type of the password control. Declaration InputType _passwordInput Field Value Type Description InputType _passwordInputIcon This field contains the icon for the password control. Declaration string _passwordInputIcon Field Value Type Description System.String ParameterTypeConverter This delegate formats a parameter type for display in a dropdown. Declaration readonly Func<ParameterType, string> ParameterTypeConverter Field Value Type Description Func < ParameterType , System.String > Properties Model This property contains the edit form's model. Declaration public ProviderParameter Model { get; set; } Property Value Type Description ProviderParameter MudDialog This property contains the dialog reference. Declaration public MudDialogInstance MudDialog { get; set; } Property Value Type Description MudDialogInstance ParameterTypes This property contains the list of valid parameter types. Declaration public IEnumerable<ParameterType> ParameterTypes { get; set; } Property Value Type Description IEnumerable < ParameterType > Methods Cancel() This method cancels the dialog. Declaration protected void Cancel() OnValidSubmit() This method submits the dialog. Declaration protected void OnValidSubmit() TogglePasswordVisibility() This method toggles the password control between secure and not secure. Declaration void TogglePasswordVisibility()"
  },
  "api/CG.Purple.Host.Pages.Admin.ProviderTypes.ProviderTypeDialog.html": {
    "href": "api/CG.Purple.Host.Pages.Admin.ProviderTypes.ProviderTypeDialog.html",
    "title": "Class ProviderTypeDialog",
    "keywords": "Class ProviderTypeDialog This class is the code-behind for the ProviderTypeDialog page. Inheritance System.Object ProviderTypeDialog Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.Pages.Admin.ProviderTypes Assembly : CG.Purple.Host.dll Syntax public class ProviderTypeDialog Fields _isBusy This field indicates the page is busy. Declaration protected bool _isBusy Field Value Type Description System.Boolean Properties DialogService This property contains the dialog service for this page. Declaration protected IDialogService DialogService { get; set; } Property Value Type Description IDialogService FactoryTypes This property contains the valid factory types. Declaration public IEnumerable<string> FactoryTypes { get; set; } Property Value Type Description IEnumerable < System.String > HttpContextAccessor This property contains the HTTP context accessor. Declaration protected IHttpContextAccessor HttpContextAccessor { get; set; } Property Value Type Description IHttpContextAccessor Logger This property contains the logger for this page. Declaration protected ILogger<ProviderTypeDialog> Logger { get; set; } Property Value Type Description ILogger < ProviderTypeDialog > Model This property contains the edit form's model. Declaration public ProviderType Model { get; set; } Property Value Type Description ProviderType MudDialog This property contains the dialog reference. Declaration public MudDialogInstance MudDialog { get; set; } Property Value Type Description MudDialogInstance ParameterTypes This property contains the list of valid parameter types. Declaration public IEnumerable<ParameterType> ParameterTypes { get; set; } Property Value Type Description IEnumerable < ParameterType > ProviderParameterManager This property contains the provider parameter manager for this page. Declaration protected IProviderParameterManager ProviderParameterManager { get; set; } Property Value Type Description IProviderParameterManager SnackbarService This property contains the snackbar service for this page. Declaration protected ISnackbar SnackbarService { get; set; } Property Value Type Description ISnackbar UserName This property contains the name of the current user, or the word 'anonymous' if nobody is currently authenticated. Declaration protected string UserName { get; } Property Value Type Description System.String Methods Cancel() This method cancels the dialog. Declaration protected void Cancel() OnCreateAsync() This method add a new provider parameter. Declaration protected async Task OnCreateAsync() Returns Type Description Task A task to perform the operation. OnDeleteAsync(ProviderParameter) This method deletes the given provider parameter. Declaration protected async Task OnDeleteAsync(ProviderParameter parameter) Parameters Type Name Description ProviderParameter parameter The provider parameter to use for the operation. Returns Type Description Task A task to perform the operation. OnEditAsync(ProviderParameter) This method edits the given provider parameter. Declaration protected async Task OnEditAsync(ProviderParameter parameter) Parameters Type Name Description ProviderParameter parameter The provider parameter to use for the operation. Returns Type Description Task A task to perform the operation. OnValidSubmit() This method submits the dialog. Declaration protected void OnValidSubmit()"
  },
  "api/CG.Purple.Host.Pages.ErrorModel.html": {
    "href": "api/CG.Purple.Host.Pages.ErrorModel.html",
    "title": "Class ErrorModel",
    "keywords": "Class ErrorModel This class is the code-behind for the Error page. Inheritance System.Object ErrorModel Namespace : CG.Purple.Host.Pages Assembly : CG.Purple.Host.dll Syntax public class ErrorModel : PageModel Constructors ErrorModel(ILogger<ErrorModel>) This constructor creates a new instance of the ErrorModel class. Declaration public ErrorModel(ILogger<ErrorModel> logger) Parameters Type Name Description ILogger < ErrorModel > logger The logger for this model Fields _logger This field contains the logger for this model. Declaration readonly ILogger<ErrorModel> _logger Field Value Type Description ILogger < ErrorModel > Properties RequestId This property contains the request identifier for this model. Declaration public string RequestId { get; set; } Property Value Type Description System.String ShowRequestId This property indicates whether or not to show the RequestId property on the error page. Declaration public bool ShowRequestId { get; } Property Value Type Description System.Boolean Methods OnGet() This method is called when the page receives an HTTP GET verb. Declaration public void OnGet()"
  },
  "api/CG.Purple.Host.Pages.Help.About.AssemblyModel.html": {
    "href": "api/CG.Purple.Host.Pages.Help.About.AssemblyModel.html",
    "title": "Class AssemblyModel",
    "keywords": "Class AssemblyModel This class represents the model for a .NET assembly. Inheritance System.Object AssemblyModel Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.Pages.Help.About Assembly : CG.Purple.Host.dll Syntax public class AssemblyModel Properties Company This property contains the company of the assembly. Declaration public string Company { get; set; } Property Value Type Description System.String Name This property contains the name of the assembly. Declaration public string Name { get; set; } Property Value Type Description System.String Version This property contains the version of the assembly. Declaration public string Version { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Host.Pages.Help.About.html": {
    "href": "api/CG.Purple.Host.Pages.Help.About.html",
    "title": "Namespace CG.Purple.Host.Pages.Help.About",
    "keywords": "Namespace CG.Purple.Host.Pages.Help.About Classes AssemblyModel This class represents the model for a .NET assembly. Index This class is the code-behind for the Index page."
  },
  "api/CG.Purple.Host.Pages.Help.About.Index.html": {
    "href": "api/CG.Purple.Host.Pages.Help.About.Index.html",
    "title": "Class Index",
    "keywords": "Class Index This class is the code-behind for the Index page. Inheritance System.Object Index Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.Pages.Help.About Assembly : CG.Purple.Host.dll Syntax public class Index Fields _assemblies This field contains the list of assemblies. Declaration protected IEnumerable<AssemblyModel>? _assemblies Field Value Type Description System.Nullable < IEnumerable < AssemblyModel >> _crumbs This field contains a reference to breadcrumbs for the view. Declaration protected readonly List<BreadcrumbItem> _crumbs Field Value Type Description List < BreadcrumbItem > Methods OnInitializedAsync() This method is called by the framework to initialize the page. Declaration protected override async Task OnInitializedAsync() Returns Type Description Task A task to perform the operation."
  },
  "api/CG.Purple.Host.Pages.html": {
    "href": "api/CG.Purple.Host.Pages.html",
    "title": "Namespace CG.Purple.Host.Pages",
    "keywords": "Namespace CG.Purple.Host.Pages Classes ErrorModel This class is the code-behind for the Error page."
  },
  "api/CG.Purple.Host.Pages.Logs.html": {
    "href": "api/CG.Purple.Host.Pages.Logs.html",
    "title": "Namespace CG.Purple.Host.Pages.Logs",
    "keywords": "Namespace CG.Purple.Host.Pages.Logs Classes Index This class is the code-behind for the Index page."
  },
  "api/CG.Purple.Host.Pages.Logs.Index.html": {
    "href": "api/CG.Purple.Host.Pages.Logs.Index.html",
    "title": "Class Index",
    "keywords": "Class Index This class is the code-behind for the Index page. Inheritance System.Object Index Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.Pages.Logs Assembly : CG.Purple.Host.dll Syntax public class Index Fields _afterState This field contains the optional after state. Declaration protected MessageState? _afterState Field Value Type Description System.Nullable < MessageState > _beforeState This field contains the optional before state. Declaration protected MessageState? _beforeState Field Value Type Description System.Nullable < MessageState > _crumbs This field contains a reference to breadcrumbs for the view. Declaration protected readonly List<BreadcrumbItem> _crumbs Field Value Type Description List < BreadcrumbItem > _endDate This field contains the optional end date. Declaration protected DateTime? _endDate Field Value Type Description System.Nullable < DateTime > _eventType This field contains the optional event type. Declaration protected MessageEvent? _eventType Field Value Type Description System.Nullable < MessageEvent > _gridSearchString This field contains the current search string. Declaration protected string _gridSearchString Field Value Type Description System.String _isBusy This field indicates the page is busy. Declaration protected bool _isBusy Field Value Type Description System.Boolean _logs This field contains the collection of log entries. Declaration protected IEnumerable<MessageLog>? _logs Field Value Type Description System.Nullable < IEnumerable < MessageLog >> _messageType This field contains the optional message type. Declaration protected MessageType? _messageType Field Value Type Description System.Nullable < MessageType > _providerType This field contains the optional provider type. Declaration protected ProviderType? _providerType Field Value Type Description System.Nullable < ProviderType > _providerTypes This field contains the collection of provider types. Declaration protected IEnumerable<ProviderType>? _providerTypes Field Value Type Description System.Nullable < IEnumerable < ProviderType >> _startDate This field contains the optional state date. Declaration protected DateTime? _startDate Field Value Type Description System.Nullable < DateTime > Properties Logger This property contains the logger for this page. Declaration protected ILogger<Index> Logger { get; set; } Property Value Type Description ILogger < Index > ProcessLogManager This property contains the process log manager for this page. Declaration protected IMessageLogManager ProcessLogManager { get; set; } Property Value Type Description IMessageLogManager ProviderTypeManager This property contains the provider type manager for this page. Declaration protected IProviderTypeManager ProviderTypeManager { get; set; } Property Value Type Description IProviderTypeManager SnackbarService This property contains the snackbar service for this page. Declaration protected ISnackbar SnackbarService { get; set; } Property Value Type Description ISnackbar Methods FilterFunc(MessageLog) This method adapts the FilterFunc(MessageLog, String) method for use with a control. Declaration protected bool FilterFunc(MessageLog element) Parameters Type Name Description MessageLog element The element to use for the operation. Returns Type Description System.Boolean true if a match was found; false otherwise. FilterFunc(MessageLog, String) This method performs a search of the log entries. Declaration protected bool FilterFunc(MessageLog element, string searchString) Parameters Type Name Description MessageLog element The element to uses for the operation. System.String searchString The search string to use for the operation. Returns Type Description System.Boolean true if a match was found; false otherwise. OnInitializedAsync() This method is called by the framework to initialize the page. Declaration protected override async Task OnInitializedAsync() Returns Type Description Task A task to perform the operation. OnRefreshAsync() This method refreshes the data for the page. Declaration protected async Task OnRefreshAsync() Returns Type Description Task A task to perform the operation."
  },
  "api/CG.Purple.Host.Pages.Messages.AttachmentsDialog.html": {
    "href": "api/CG.Purple.Host.Pages.Messages.AttachmentsDialog.html",
    "title": "Class AttachmentsDialog",
    "keywords": "Class AttachmentsDialog This class is the code-behind for the AttachmentsDialog page. Inheritance System.Object AttachmentsDialog Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.Pages.Messages Assembly : CG.Purple.Host.dll Syntax public class AttachmentsDialog Properties DialogService This property contains the dialog service for this page. Declaration protected IDialogService DialogService { get; set; } Property Value Type Description IDialogService Logger This property contains the logger for this page. Declaration protected ILogger<AttachmentsDialog> Logger { get; set; } Property Value Type Description ILogger < AttachmentsDialog > Model This property contains the model for the dialog. Declaration public Message Model { get; set; } Property Value Type Description Message MudDialog This property contains the MudDialog instance. Declaration MudDialogInstance MudDialog { } Property Value Type Description MudDialogInstance SnackbarService This property contains the snackbar service for this page. Declaration protected ISnackbar SnackbarService { get; set; } Property Value Type Description ISnackbar Methods Ok() This method closes the dialog. Declaration protected void Ok() OnPreviewAsync(Attachment) This method displays a preview of the attachment. Declaration protected async Task OnPreviewAsync(Attachment attachment) Parameters Type Name Description Attachment attachment The attachment to use for the operation. Returns Type Description Task A task to perform the operation."
  },
  "api/CG.Purple.Host.Pages.Messages.html": {
    "href": "api/CG.Purple.Host.Pages.Messages.html",
    "title": "Namespace CG.Purple.Host.Pages.Messages",
    "keywords": "Namespace CG.Purple.Host.Pages.Messages Classes AttachmentsDialog This class is the code-behind for the AttachmentsDialog page. Index This class is the code-behind for the Index page. LogDialog This class is the code-behind for the LogDialog page. MailPreviewDialog This class is the code-behind for the MailPreviewDialog page. MessagePropertiesDialog This class is the code-behind for the MessagePropertiesDialog page. MessagePropertyDialog This class is the code-behind for the MessagePropertyDialog page. TextPreviewDialog This class is the code-behind for the TextPreviewDialog page."
  },
  "api/CG.Purple.Host.Pages.Messages.Index.html": {
    "href": "api/CG.Purple.Host.Pages.Messages.Index.html",
    "title": "Class Index",
    "keywords": "Class Index This class is the code-behind for the Index page. Inheritance System.Object Index Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.Pages.Messages Assembly : CG.Purple.Host.dll Syntax public class Index Fields _crumbs This field contains a reference to breadcrumbs for the view. Declaration protected readonly List<BreadcrumbItem> _crumbs Field Value Type Description List < BreadcrumbItem > _isBusy This field indicates the page is busy. Declaration protected bool _isBusy Field Value Type Description System.Boolean _mailGridSearchString This field contains the current mail search string. Declaration protected string _mailGridSearchString Field Value Type Description System.String _mailMessages This field contains the collection of mail messages. Declaration protected IEnumerable<MailMessage>? _mailMessages Field Value Type Description System.Nullable < IEnumerable < MailMessage >> _textGridSearchString This field contains the current text search string. Declaration protected string _textGridSearchString Field Value Type Description System.String _textMessages This field contains the collection of text messages. Declaration protected IEnumerable<TextMessage>? _textMessages Field Value Type Description System.Nullable < IEnumerable < TextMessage >> _timer This field contains the timer for the page refresh operations. Declaration protected Timer _timer Field Value Type Description Timer _timeTillNextUpdate This field contains the time until the next page update. Declaration protected TimeSpan _timeTillNextUpdate Field Value Type Description TimeSpan Properties DialogService This property contains the dialog service for this page. Declaration protected IDialogService DialogService { get; set; } Property Value Type Description IDialogService HttpContextAccessor This property contains the HTTP context accessor. Declaration protected IHttpContextAccessor HttpContextAccessor { get; set; } Property Value Type Description IHttpContextAccessor Logger This property contains the logger for this page. Declaration protected ILogger<Index> Logger { get; set; } Property Value Type Description ILogger < Index > MailManager This property contains the mail message manager for this page. Declaration protected IMailMessageManager MailManager { get; set; } Property Value Type Description IMailMessageManager MessageManager This property contains the message manager for this page. Declaration protected IMessageManager MessageManager { get; set; } Property Value Type Description IMessageManager MessagePropertyManager This property contains the message property manager for this page. Declaration protected IMessagePropertyManager MessagePropertyManager { get; set; } Property Value Type Description IMessagePropertyManager ProcessLogManager This property contains the process log manager for this page. Declaration protected IMessageLogManager ProcessLogManager { get; set; } Property Value Type Description IMessageLogManager PropertyTypeManager This property contains the property type manager for this page. Declaration protected IPropertyTypeManager PropertyTypeManager { get; set; } Property Value Type Description IPropertyTypeManager ProviderTypeManager This property contains the provider type manager for this page. Declaration protected IProviderTypeManager ProviderTypeManager { get; set; } Property Value Type Description IProviderTypeManager SnackbarService This property contains the snackbar service for this page. Declaration protected ISnackbar SnackbarService { get; set; } Property Value Type Description ISnackbar TextManager This property contains the text message manager for this page. Declaration protected ITextMessageManager TextManager { get; set; } Property Value Type Description ITextMessageManager UserName This property contains the name of the current user, or the word 'anonymous' if nobody is currently authenticated. Declaration protected string UserName { get; } Property Value Type Description System.String Methods _TimerCallback(Object) This method is called by the timer, to periodically refresh the page. Declaration protected async void _TimerCallback(object state) Parameters Type Name Description System.Object state The optional state for the operation. MailFilterFunc(MailMessage, String) This method performs a search of the mail messages. Declaration protected bool MailFilterFunc(MailMessage element, string searchString) Parameters Type Name Description MailMessage element The element to uses for the operation. System.String searchString The search string to use for the operation. Returns Type Description System.Boolean true if a match was found; false otherwise. MailFilterFunc1(MailMessage) This method adapts the MailFilterFunc(MailMessage, String) method for use with a control. Declaration protected bool MailFilterFunc1(MailMessage element) Parameters Type Name Description MailMessage element The element to use for the operation. Returns Type Description System.Boolean true if a match was found; false otherwise. OnAttachmentsAsync(Message) This method displays a dialog for the message attachments. Declaration protected async Task OnAttachmentsAsync(Message message) Parameters Type Name Description Message message The message to use for the operation. Returns Type Description Task A task to perform the operation. OnInitializedAsync() This method is called by the framework to initialize the page. Declaration protected override async Task OnInitializedAsync() Returns Type Description Task A task to perform the operation. OnLogsAsync(Message) This method displays a dialog for the message log. Declaration protected async Task OnLogsAsync(Message message) Parameters Type Name Description Message message The message to use for the operation. Returns Type Description Task A task to perform the operation. OnPreviewAsync(MailMessage) This method displays the mail preview dialog. Declaration protected async Task OnPreviewAsync(MailMessage message) Parameters Type Name Description MailMessage message The mail message to use for the operation. Returns Type Description Task A task to perform the operation. OnPreviewAsync(TextMessage) This method displays the text preview page. Declaration protected async Task OnPreviewAsync(TextMessage message) Parameters Type Name Description TextMessage message The text message to use for the operation. Returns Type Description Task A task to perform the operation. OnPropertiesAsync(Message) This method displays a dialog for the message properties. Declaration protected async Task OnPropertiesAsync(Message message) Parameters Type Name Description Message message The message to use for the operation. Returns Type Description Task A task to perform the operation. OnRefreshMailMessagesAsync() This method manually refreshes the mail messages collection. Declaration protected async Task OnRefreshMailMessagesAsync() Returns Type Description Task OnRefreshPageAsync() This method refreshes all the data sources for the page. Declaration protected async Task OnRefreshPageAsync() Returns Type Description Task OnRefreshTextMessagesAsync() This method manually refreshes the text messages collection. Declaration protected async Task OnRefreshTextMessagesAsync() Returns Type Description Task OnToggleDisableAsync(Message) This method toggles the enabled/disabled state for the given message. Declaration protected async Task OnToggleDisableAsync(Message message) Parameters Type Name Description Message message The message to use for the operation. Returns Type Description Task A task to perform the operation. TextFilterFunc(TextMessage, String) This method performs a search of the text messages. Declaration protected bool TextFilterFunc(TextMessage element, string searchString) Parameters Type Name Description TextMessage element The element to uses for the operation. System.String searchString The search string to use for the operation. Returns Type Description System.Boolean true if a match was found; false otherwise. TextFilterFunc1(TextMessage) This method adapts the TextFilterFunc(TextMessage, String) method for use with a control. Declaration protected bool TextFilterFunc1(TextMessage element) Parameters Type Name Description TextMessage element The element to use for the operation. Returns Type Description System.Boolean true if a match was found; false otherwise."
  },
  "api/CG.Purple.Host.Pages.Messages.LogDialog.html": {
    "href": "api/CG.Purple.Host.Pages.Messages.LogDialog.html",
    "title": "Class LogDialog",
    "keywords": "Class LogDialog This class is the code-behind for the LogDialog page. Inheritance System.Object LogDialog Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.Pages.Messages Assembly : CG.Purple.Host.dll Syntax public class LogDialog Properties Logger This property contains the logger for this page. Declaration protected ILogger<LogDialog> Logger { get; set; } Property Value Type Description ILogger < LogDialog > Model This property contains the model for the dialog. Declaration public IEnumerable<MessageLog> Model { get; set; } Property Value Type Description IEnumerable < MessageLog > MudDialog This property contains the MudDialog instance. Declaration MudDialogInstance MudDialog { } Property Value Type Description MudDialogInstance Methods Ok() This method closes the dialog. Declaration protected void Ok()"
  },
  "api/CG.Purple.Host.Pages.Messages.MailPreviewDialog.html": {
    "href": "api/CG.Purple.Host.Pages.Messages.MailPreviewDialog.html",
    "title": "Class MailPreviewDialog",
    "keywords": "Class MailPreviewDialog This class is the code-behind for the MailPreviewDialog page. Inheritance System.Object MailPreviewDialog Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.Pages.Messages Assembly : CG.Purple.Host.dll Syntax public class MailPreviewDialog Properties Logger This property contains the logger for this page. Declaration protected ILogger<MailPreviewDialog> Logger { get; set; } Property Value Type Description ILogger < MailPreviewDialog > Model This property contains the model for the dialog. Declaration public MailMessage Model { get; set; } Property Value Type Description MailMessage MudDialog This property contains the MudDialog instance. Declaration MudDialogInstance MudDialog { } Property Value Type Description MudDialogInstance Methods Ok() This method closes the dialog. Declaration protected void Ok()"
  },
  "api/CG.Purple.Host.Pages.Messages.MessagePropertiesDialog.html": {
    "href": "api/CG.Purple.Host.Pages.Messages.MessagePropertiesDialog.html",
    "title": "Class MessagePropertiesDialog",
    "keywords": "Class MessagePropertiesDialog This class is the code-behind for the MessagePropertiesDialog page. Inheritance System.Object MessagePropertiesDialog Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.Pages.Messages Assembly : CG.Purple.Host.dll Syntax public class MessagePropertiesDialog Fields _isBusy This field indicates the page is busy. Declaration protected bool _isBusy Field Value Type Description System.Boolean Properties DialogService This property contains the dialog service for this page. Declaration protected IDialogService DialogService { get; set; } Property Value Type Description IDialogService HttpContextAccessor This property contains the HTTP context accessor. Declaration protected IHttpContextAccessor HttpContextAccessor { get; set; } Property Value Type Description IHttpContextAccessor Logger This property contains the logger for this page. Declaration protected ILogger<MessagePropertiesDialog> Logger { get; set; } Property Value Type Description ILogger < MessagePropertiesDialog > Model This property contains the model for the dialog. Declaration public Message Model { get; set; } Property Value Type Description Message MudDialog This property contains the MudDialog instance. Declaration MudDialogInstance MudDialog { } Property Value Type Description MudDialogInstance PropertyTypes This property contains the valid property types. Declaration public IEnumerable<PropertyType> PropertyTypes { get; set; } Property Value Type Description IEnumerable < PropertyType > ProviderTypes This property contains the valid provider types. Declaration public IEnumerable<ProviderType> ProviderTypes { get; set; } Property Value Type Description IEnumerable < ProviderType > SnackbarService This property contains the snackbar service for this page. Declaration protected ISnackbar SnackbarService { get; set; } Property Value Type Description ISnackbar UserName This property contains the name of the current user, or the word 'anonymous' if nobody is currently authenticated. Declaration protected string UserName { get; } Property Value Type Description System.String Methods CanAddMessageProperty() This method indicates whether the model can have any additional message properties added to it, or not. Declaration protected bool CanAddMessageProperty() Returns Type Description System.Boolean true if the model can have additional message properties added to it; false otherwise. Cancel() This method cancels the dialog. Declaration protected void Cancel() OnCreateMessagePropertyAsync() This method creates a new message property. Declaration protected async Task OnCreateMessagePropertyAsync() Returns Type Description Task A task to perform the operation. OnDeleteMessagePropertyAsync(MessageProperty) This method deletes the currently selected message property. Declaration protected async Task OnDeleteMessagePropertyAsync(MessageProperty messageProperty) Parameters Type Name Description MessageProperty messageProperty The message property to use for the operation. Returns Type Description Task A task to perform the operation. OnEditMessagePropertyAsync(MessageProperty) This method edits the currently selected message property. Declaration protected async Task OnEditMessagePropertyAsync(MessageProperty messageProperty) Parameters Type Name Description MessageProperty messageProperty The message property to use for the operation. Returns Type Description Task A task to perform the operation. OnValidSubmit() This method is called when the form submits with valid data. Declaration protected void OnValidSubmit()"
  },
  "api/CG.Purple.Host.Pages.Messages.MessagePropertyDialog.html": {
    "href": "api/CG.Purple.Host.Pages.Messages.MessagePropertyDialog.html",
    "title": "Class MessagePropertyDialog",
    "keywords": "Class MessagePropertyDialog This class is the code-behind for the MessagePropertyDialog page. Inheritance System.Object MessagePropertyDialog Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.Pages.Messages Assembly : CG.Purple.Host.dll Syntax public class MessagePropertyDialog Fields Converter This delegate formats a property type for display in a dropdown. Declaration Func<PropertyType, string> Converter Field Value Type Description Func < PropertyType , System.String > Properties Logger This property contains the logger for this page. Declaration protected ILogger<MessagePropertyDialog> Logger { get; set; } Property Value Type Description ILogger < MessagePropertyDialog > Model This property contains the model for the dialog. Declaration public MessageProperty Model { get; set; } Property Value Type Description MessageProperty MudDialog This property contains the MudDialog instance. Declaration MudDialogInstance MudDialog { } Property Value Type Description MudDialogInstance PropertyTypes This property contains the valid property types. Declaration public IEnumerable<PropertyType> PropertyTypes { get; set; } Property Value Type Description IEnumerable < PropertyType > Methods Cancel() This method cancels the dialog. Declaration protected void Cancel() OnValidSubmit() This method is called when the form submits with valid data. Declaration protected void OnValidSubmit()"
  },
  "api/CG.Purple.Host.Pages.Messages.TextPreviewDialog.html": {
    "href": "api/CG.Purple.Host.Pages.Messages.TextPreviewDialog.html",
    "title": "Class TextPreviewDialog",
    "keywords": "Class TextPreviewDialog This class is the code-behind for the TextPreviewDialog page. Inheritance System.Object TextPreviewDialog Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.Pages.Messages Assembly : CG.Purple.Host.dll Syntax public class TextPreviewDialog Properties Logger This property contains the logger for this page. Declaration protected ILogger<TextPreviewDialog> Logger { get; set; } Property Value Type Description ILogger < TextPreviewDialog > Model This property contains the model for the dialog. Declaration public TextMessage Model { get; set; } Property Value Type Description TextMessage MudDialog This property contains the MudDialog instance. Declaration MudDialogInstance MudDialog { } Property Value Type Description MudDialogInstance Methods Ok() This method closes the dialog. Declaration protected void Ok()"
  },
  "api/CG.Purple.Host.Services.html": {
    "href": "api/CG.Purple.Host.Services.html",
    "title": "Namespace CG.Purple.Host.Services",
    "keywords": "Namespace CG.Purple.Host.Services Classes PipelineService This class is a hosted service that continuously pushes messages through a processing pipeline."
  },
  "api/CG.Purple.Host.Services.Options.HostedServiceOptions.html": {
    "href": "api/CG.Purple.Host.Services.Options.HostedServiceOptions.html",
    "title": "Class HostedServiceOptions",
    "keywords": "Class HostedServiceOptions This class contains configuration settings for Purple hosted services. Inheritance System.Object HostedServiceOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.Services.Options Assembly : CG.Purple.Host.Services.dll Syntax public class HostedServiceOptions Properties PipelineService This property contains the settings for the Purple pipeline service. Declaration public PipelineServiceOptions PipelineService { get; set; } Property Value Type Description PipelineServiceOptions"
  },
  "api/CG.Purple.Host.Services.Options.html": {
    "href": "api/CG.Purple.Host.Services.Options.html",
    "title": "Namespace CG.Purple.Host.Services.Options",
    "keywords": "Namespace CG.Purple.Host.Services.Options Classes HostedServiceOptions This class contains configuration settings for Purple hosted services. PipelineServiceOptions This class contains configuration settings for the Purple pipeline service."
  },
  "api/CG.Purple.Host.Services.Options.PipelineServiceOptions.html": {
    "href": "api/CG.Purple.Host.Services.Options.PipelineServiceOptions.html",
    "title": "Class PipelineServiceOptions",
    "keywords": "Class PipelineServiceOptions This class contains configuration settings for the Purple pipeline service. Inheritance System.Object PipelineServiceOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.Services.Options Assembly : CG.Purple.Host.Services.dll Syntax public class PipelineServiceOptions Properties SectionDelay This property indicates how long to pause, between sections, of each pipeline processing cycle. Declaration public TimeSpan? SectionDelay { get; set; } Property Value Type Description System.Nullable < TimeSpan > StartupDelay This property indicates how long to pause the service,at startup, before processing is allowed to begin. Declaration public TimeSpan? StartupDelay { get; set; } Property Value Type Description System.Nullable < TimeSpan >"
  },
  "api/CG.Purple.Host.Services.PipelineService.html": {
    "href": "api/CG.Purple.Host.Services.PipelineService.html",
    "title": "Class PipelineService",
    "keywords": "Class PipelineService This class is a hosted service that continuously pushes messages through a processing pipeline. Inheritance System.Object PipelineService Namespace : CG.Purple.Host.Services Assembly : CG.Purple.Host.Services.dll Syntax class PipelineService : BackgroundService Constructors PipelineService(IOptions<HostedServiceOptions>, IServiceProvider, ILogger<PipelineService>) This constructor creates a new instance of the PipelineService class. Declaration public PipelineService(IOptions<HostedServiceOptions> hostedServiceOptions, IServiceProvider serviceProvider, ILogger<PipelineService> logger) Parameters Type Name Description IOptions < HostedServiceOptions > hostedServiceOptions The hosted service options to use with this service. IServiceProvider serviceProvider The service provider to use with this service. ILogger < PipelineService > logger The logger to use with this service. Fields _logger This field contains the logger for this service. Declaration protected readonly ILogger<PipelineService> _logger Field Value Type Description ILogger < PipelineService > _pipelineServiceOptions This field contains the options for this service. Declaration protected readonly PipelineServiceOptions? _pipelineServiceOptions Field Value Type Description System.Nullable < PipelineServiceOptions > _serviceProvider This field contains the service provider for this service. Declaration protected readonly IServiceProvider _serviceProvider Field Value Type Description IServiceProvider Methods ExecuteAsync(CancellationToken) This method performs the work for this service. Declaration protected override async Task ExecuteAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is signaled when the service is stopping. Returns Type Description Task A task to perform the operation."
  },
  "api/CG.Purple.Host.Shared.html": {
    "href": "api/CG.Purple.Host.Shared.html",
    "title": "Namespace CG.Purple.Host.Shared",
    "keywords": "Namespace CG.Purple.Host.Shared Classes MainLayout This class is the code-behind for the MainLayout page."
  },
  "api/CG.Purple.Host.Shared.MainLayout.html": {
    "href": "api/CG.Purple.Host.Shared.MainLayout.html",
    "title": "Class MainLayout",
    "keywords": "Class MainLayout This class is the code-behind for the MainLayout page. Inheritance System.Object MainLayout Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.Shared Assembly : CG.Purple.Host.dll Syntax public class MainLayout Properties JsRuntime This property contains the JS runtime for the page. Declaration public IJSRuntime JsRuntime { get; set; } Property Value Type Description IJSRuntime Methods OnAfterRenderAsync(Boolean) This method is called after the page renders. Declaration protected override async Task OnAfterRenderAsync(bool firstRender) Parameters Type Name Description System.Boolean firstRender true for the first render, false otherwise. Returns Type Description Task"
  },
  "api/CG.Purple.Host.Themes.DefaultTheme.html": {
    "href": "api/CG.Purple.Host.Themes.DefaultTheme.html",
    "title": "Class DefaultTheme",
    "keywords": "Class DefaultTheme This class represents the default MudBlazor UI theme. Inheritance System.Object DefaultTheme Namespace : CG.Purple.Host.Themes Assembly : CG.Purple.Host.dll Syntax public class DefaultTheme : MudTheme Constructors DefaultTheme() This constructor creates a new instance of the DefaultTheme class. Declaration protected DefaultTheme() Fields _instance This field contains the singleton theme instance. Declaration static DefaultTheme _instance Field Value Type Description DefaultTheme Methods Instance() This method returns a singleton instance of DefaultTheme Declaration public static DefaultTheme Instance() Returns Type Description DefaultTheme The singleton instance of DefaultTheme"
  },
  "api/CG.Purple.Host.Themes.html": {
    "href": "api/CG.Purple.Host.Themes.html",
    "title": "Namespace CG.Purple.Host.Themes",
    "keywords": "Namespace CG.Purple.Host.Themes Classes DefaultTheme This class represents the default MudBlazor UI theme."
  },
  "api/CG.Purple.Host.ViewModels.AttachmentBrowserFile.html": {
    "href": "api/CG.Purple.Host.ViewModels.AttachmentBrowserFile.html",
    "title": "Class AttachmentBrowserFile",
    "keywords": "Class AttachmentBrowserFile This class is an implementation of the interface that adapts an for display in a browser. Inheritance System.Object AttachmentBrowserFile Namespace : CG.Purple.Host.ViewModels Assembly : CG.Purple.Host.dll Syntax class AttachmentBrowserFile : IBrowserFile Constructors AttachmentBrowserFile(Attachment) This constructor creates a new instance of the AttachmentBrowserFile class. Declaration public AttachmentBrowserFile(Attachment attachment) Parameters Type Name Description Attachment attachment The attachment to use with this view-model. Fields _attachment This field contains the attachment for this view-model. Declaration protected readonly Attachment _attachment Field Value Type Description Attachment Properties ContentType This property contains the MIME type for the view-model's file. Declaration public string ContentType { get; } Property Value Type Description System.String LastModified This property contains the modified date for the view-model's file. Declaration public DateTimeOffset LastModified { get; } Property Value Type Description DateTimeOffset Name This property contains the file name for the view-model's file. Declaration public string Name { get; } Property Value Type Description System.String Size This property contains the size for the view-model's file. Declaration public long Size { get; } Property Value Type Description System.Int64 Methods OpenReadStream(Int64, CancellationToken) This method returns the data for the view-model's file. Declaration public Stream OpenReadStream(long maxAllowedSize = 512000L, CancellationToken cancellationToken = null) Parameters Type Name Description System.Int64 maxAllowedSize The maximum size allowed for this operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Stream A containing the bytes for the view-model's associated file."
  },
  "api/CG.Purple.Host.ViewModels.AttachmentRequest.html": {
    "href": "api/CG.Purple.Host.ViewModels.AttachmentRequest.html",
    "title": "Class AttachmentRequest",
    "keywords": "Class AttachmentRequest This class represents a file attachment request. Inheritance System.Object AttachmentRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.ViewModels Assembly : CG.Purple.Host.Controllers.dll Syntax public class AttachmentRequest Properties Data This property contains the base64 encoded data for the attachment. Declaration public string Data { get; set; } Property Value Type Description System.String FileName This property contains the file name for the attachment. Declaration public string FileName { get; set; } Property Value Type Description System.String Length This property contains the length for the attachment. Declaration public long Length { get; set; } Property Value Type Description System.Int64 MimeType This property contains the MIME type for the attachment. Declaration public string MimeType { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Host.ViewModels.html": {
    "href": "api/CG.Purple.Host.ViewModels.html",
    "title": "Namespace CG.Purple.Host.ViewModels",
    "keywords": "Namespace CG.Purple.Host.ViewModels Classes AttachmentBrowserFile This class is an implementation of the interface that adapts an for display in a browser. AttachmentRequest This class represents a file attachment request. MailStorageRequest This class represents a mail storage request. MessagePropertyRequest This class represents a message property request. StatusResponse This class represents a response to a status request. StorageResponse This class represents a response to a mail request. TextStorageRequest This class represents a text storage request."
  },
  "api/CG.Purple.Host.ViewModels.MailStorageRequest.html": {
    "href": "api/CG.Purple.Host.ViewModels.MailStorageRequest.html",
    "title": "Class MailStorageRequest",
    "keywords": "Class MailStorageRequest This class represents a mail storage request. Inheritance System.Object MailStorageRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.ViewModels Assembly : CG.Purple.Host.Controllers.dll Syntax public class MailStorageRequest Constructors MailStorageRequest() This constructor creates a new instance of the MailStorageRequest class. Declaration public MailStorageRequest() Properties ArchiveAfterUtc This property contains an optional date for delaying the archiving, for this message. Declaration public DateTime? ArchiveAfterUtc { get; set; } Property Value Type Description System.Nullable < DateTime > Attachments This property contains the associated attachments, for the message. Declaration public ICollection<AttachmentRequest> Attachments { get; set; } Property Value Type Description ICollection < AttachmentRequest > BCC This property contains the 'BCC' address for the message. Declaration public string BCC { get; set; } Property Value Type Description System.String Body This property contains the body for the message. Declaration public string Body { get; set; } Property Value Type Description System.String CC This property contains the 'CC' address for the message. Declaration public string CC { get; set; } Property Value Type Description System.String From This property contains the 'From' address for the message. Declaration public string From { get; set; } Property Value Type Description System.String IsDisabled This property contains an optional disabled flag. Declaration public bool? IsDisabled { get; set; } Property Value Type Description System.Nullable < System.Boolean > IsHtml This property indicates whether the Body property contains formatted HTML, or not. Declaration public bool IsHtml { get; set; } Property Value Type Description System.Boolean MaxErrors This property indicates the point at which messages processing should stop. Declaration public int? MaxErrors { get; set; } Property Value Type Description System.Nullable < System.Int32 > MessageKey This property contains a optional key for the message. When specified, this property must be unique or the request will fail. A unique key is generated, for the message, if one is not specified here. Declaration public string MessageKey { get; set; } Property Value Type Description System.String Priority This property contains an optional priority, for the message. Declaration public int? Priority { get; set; } Property Value Type Description System.Nullable < System.Int32 > ProcessAfterUtc This property contains an optional date for delaying the start of process, for this message. Declaration public DateTime? ProcessAfterUtc { get; set; } Property Value Type Description System.Nullable < DateTime > Properties This property contains the associated properties, for the message. Declaration public ICollection<MessagePropertyRequest> Properties { get; set; } Property Value Type Description ICollection < MessagePropertyRequest > ProviderType This property contains an optional provider type, for the message. Declaration public string ProviderType { get; set; } Property Value Type Description System.String Subject This property contains the subject for the message. Declaration public string Subject { get; set; } Property Value Type Description System.String To This property contains the 'To' address for the message. Declaration public string To { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Host.ViewModels.MessagePropertyRequest.html": {
    "href": "api/CG.Purple.Host.ViewModels.MessagePropertyRequest.html",
    "title": "Class MessagePropertyRequest",
    "keywords": "Class MessagePropertyRequest This class represents a message property request. Inheritance System.Object MessagePropertyRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.ViewModels Assembly : CG.Purple.Host.Controllers.dll Syntax public class MessagePropertyRequest Properties PropertyName This property contains the name of the message property. Declaration public string PropertyName { get; set; } Property Value Type Description System.String Value This property contains the value of the message property. Declaration public string Value { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Host.ViewModels.StatusResponse.html": {
    "href": "api/CG.Purple.Host.ViewModels.StatusResponse.html",
    "title": "Class StatusResponse",
    "keywords": "Class StatusResponse This class represents a response to a status request. Inheritance System.Object StatusResponse Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.ViewModels Assembly : CG.Purple.Host.Controllers.dll Syntax public class StatusResponse Properties CreatedOnUtc This property contains the date/time when the message was created. Declaration public DateTime? CreatedOnUtc { get; set; } Property Value Type Description System.Nullable < DateTime > Error This property contains the error when the message failed to send. Declaration public string Error { get; set; } Property Value Type Description System.String FailedOnUtc This property contains the date/time when the message failed to send. Declaration public DateTime? FailedOnUtc { get; set; } Property Value Type Description System.Nullable < DateTime > MessageKey This property contains the key for the message. Declaration public string MessageKey { get; set; } Property Value Type Description System.String SentOnUtc This property contains the date/time when the message was sent. Declaration public DateTime? SentOnUtc { get; set; } Property Value Type Description System.Nullable < DateTime >"
  },
  "api/CG.Purple.Host.ViewModels.StorageResponse.html": {
    "href": "api/CG.Purple.Host.ViewModels.StorageResponse.html",
    "title": "Class StorageResponse",
    "keywords": "Class StorageResponse This class represents a response to a mail request. Inheritance System.Object StorageResponse Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.ViewModels Assembly : CG.Purple.Host.Controllers.dll Syntax public class StorageResponse Properties CreatedOnUtc This property contains the creation date/time for the message. Declaration public DateTime? CreatedOnUtc { get; set; } Property Value Type Description System.Nullable < DateTime > MessageKey This property contains the key for the message. Declaration public string MessageKey { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Host.ViewModels.TextStorageRequest.html": {
    "href": "api/CG.Purple.Host.ViewModels.TextStorageRequest.html",
    "title": "Class TextStorageRequest",
    "keywords": "Class TextStorageRequest This class represents a text storage request. Inheritance System.Object TextStorageRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Host.ViewModels Assembly : CG.Purple.Host.Controllers.dll Syntax public class TextStorageRequest Constructors TextStorageRequest() This constructor creates a new instance of the TextStorageRequest class. Declaration public TextStorageRequest() Properties ArchiveAfterUtc This property contains an optional date for delaying the archiving, for this message. Declaration public DateTime? ArchiveAfterUtc { get; set; } Property Value Type Description System.Nullable < DateTime > Attachments This property contains the associated attachments, for the message. Declaration public ICollection<AttachmentRequest> Attachments { get; set; } Property Value Type Description ICollection < AttachmentRequest > Body This property contains the body for the message. Declaration public string Body { get; set; } Property Value Type Description System.String From This property contains the 'From' address for the message. Declaration public string From { get; set; } Property Value Type Description System.String IsDisabled This property contains an optional disabled flag. Declaration public bool? IsDisabled { get; set; } Property Value Type Description System.Nullable < System.Boolean > MaxErrors This property indicates the point at which messages processing should stop. Declaration public int? MaxErrors { get; set; } Property Value Type Description System.Nullable < System.Int32 > MessageKey This property contains a optional key for the message. When specified, this property must be unique or the request will fail. A unique key is generated, for the message, if one is not specified here. Declaration public string MessageKey { get; set; } Property Value Type Description System.String Priority This property contains an optional priority, for the message. Declaration public int? Priority { get; set; } Property Value Type Description System.Nullable < System.Int32 > ProcessAfterUtc This property contains an optional date for delaying the start of process, for this message. Declaration public DateTime? ProcessAfterUtc { get; set; } Property Value Type Description System.Nullable < DateTime > Properties This property contains the associated properties, for the message. Declaration public ICollection<MessagePropertyRequest> Properties { get; set; } Property Value Type Description ICollection < MessagePropertyRequest > ProviderType This property contains an optional provider type, for the message. Declaration public string ProviderType { get; set; } Property Value Type Description System.String To This property contains the 'To' address for the message. Declaration public string To { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Managers.AttachmentManager.html": {
    "href": "api/CG.Purple.Managers.AttachmentManager.html",
    "title": "Class AttachmentManager",
    "keywords": "Class AttachmentManager This class is a default implementation of the IAttachmentManager interface. Inheritance System.Object AttachmentManager Implements IAttachmentManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Managers Assembly : CG.Purple.dll Syntax class AttachmentManager : IAttachmentManager Constructors AttachmentManager(IAttachmentRepository, ILogger<IAttachmentManager>) This constructor creates a new instance of the AttachmentManager class. Declaration public AttachmentManager(IAttachmentRepository attachmentRepository, ILogger<IAttachmentManager> logger) Parameters Type Name Description IAttachmentRepository attachmentRepository The attachment repository to use with this manager. ILogger < IAttachmentManager > logger The logger to use with this manager. Fields _attachmentRepository This field contains the repository for this manager. Declaration protected readonly IAttachmentRepository _attachmentRepository Field Value Type Description IAttachmentRepository _logger This field contains the logger for this manager. Declaration protected readonly ILogger<IAttachmentManager> _logger Field Value Type Description ILogger < IAttachmentManager > Methods AnyAsync(CancellationToken) Declaration public virtual async Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Boolean > CountAsync(CancellationToken) Declaration public virtual async Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Int64 > CreateAsync(Attachment, String, CancellationToken) Declaration public virtual async Task<Attachment> CreateAsync(Attachment attachment, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description Attachment attachment System.String userName CancellationToken cancellationToken Returns Type Description Task < Attachment > DeleteAsync(Attachment, String, CancellationToken) Declaration public virtual async Task DeleteAsync(Attachment attachment, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description Attachment attachment System.String userName CancellationToken cancellationToken Returns Type Description Task FindAllAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<Attachment>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < Attachment >> UpdateAsync(Attachment, String, CancellationToken) Declaration public virtual async Task<Attachment> UpdateAsync(Attachment attachment, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description Attachment attachment System.String userName CancellationToken cancellationToken Returns Type Description Task < Attachment > Implements IAttachmentManager"
  },
  "api/CG.Purple.Managers.FileTypeManager.html": {
    "href": "api/CG.Purple.Managers.FileTypeManager.html",
    "title": "Class FileTypeManager",
    "keywords": "Class FileTypeManager This class is a default implementation of the IFileTypeManager interface. Inheritance System.Object FileTypeManager Implements IFileTypeManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Managers Assembly : CG.Purple.dll Syntax class FileTypeManager : IFileTypeManager Constructors FileTypeManager(IFileTypeRepository, ILogger<IFileTypeManager>) This constructor creates a new instance of the FileTypeManager class. Declaration public FileTypeManager(IFileTypeRepository fileTypeRepository, ILogger<IFileTypeManager> logger) Parameters Type Name Description IFileTypeRepository fileTypeRepository The file type repository to use with this manager. ILogger < IFileTypeManager > logger The logger to use with this manager. Fields _fileTypeRepository This field contains the repository for this manager. Declaration protected readonly IFileTypeRepository _fileTypeRepository Field Value Type Description IFileTypeRepository _logger This field contains the logger for this manager. Declaration protected readonly ILogger<IFileTypeManager> _logger Field Value Type Description ILogger < IFileTypeManager > Methods AnyAsync(CancellationToken) Declaration public virtual async Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Boolean > CountAsync(CancellationToken) Declaration public virtual async Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Int64 > CreateAsync(FileType, String, CancellationToken) Declaration public virtual async Task<FileType> CreateAsync(FileType fileType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description FileType fileType System.String userName CancellationToken cancellationToken Returns Type Description Task < FileType > DeleteAsync(FileType, String, CancellationToken) Declaration public virtual async Task DeleteAsync(FileType fileType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description FileType fileType System.String userName CancellationToken cancellationToken Returns Type Description Task FindByExtensionAsync(String, CancellationToken) Declaration public virtual async Task<FileType?> FindByExtensionAsync(string extension, CancellationToken cancellationToken = null) Parameters Type Name Description System.String extension CancellationToken cancellationToken Returns Type Description Task < System.Nullable < FileType >> UpdateAsync(FileType, String, CancellationToken) Declaration public virtual async Task<FileType> UpdateAsync(FileType fileType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description FileType fileType System.String userName CancellationToken cancellationToken Returns Type Description Task < FileType > Implements IFileTypeManager"
  },
  "api/CG.Purple.Managers.html": {
    "href": "api/CG.Purple.Managers.html",
    "title": "Namespace CG.Purple.Managers",
    "keywords": "Namespace CG.Purple.Managers Classes AttachmentManager This class is a default implementation of the IAttachmentManager interface. FileTypeManager This class is a default implementation of the IFileTypeManager interface. MailMessageManager This class is a default implementation of the IMailMessageManager interface. ManagerException This class represents a manager related exception. MessageLogManager This class is a default implementation of the IMessageLogManager interface. MessageManager This class is a default implementation of the IMessageManager interface. MessagePropertyManager This class is a default implementation of the IMessagePropertyManager interface. MimeTypeManager This class is a default implementation of the IMimeTypeManager interface. MimeTypeManagerExtensions This class contains extension methods related to the IMimeTypeManager type. ParameterTypeManager This class is a default implementation of the IParameterTypeManager interface. PipelineLogManagerExtensions001 This class contains extension methods related to the IMessageLogManager type. PropertyTypeManager This class is a default implementation of the IPropertyTypeManager interface. ProviderParameterManager This class is a default implementation of the IProviderParameterManager interface. ProviderTypeManager This class is a default implementation of the IProviderTypeManager interface. TextMessageManager This class is a default implementation of the ITextMessageManager interface. Interfaces IAttachmentManager This interface represents an object that manages operations related to objects. IFileTypeManager This interface represents an object that manages operations related to objects. IMailMessageManager This interface represents an object that manages operations related to objects. IMessageLogManager This interface represents an object that manages operations related to the pipeline log. IMessageManager This interface represents an object that manages operations related to objects. IMessagePropertyManager This interface represents an object that manages operations related to objects. IMimeTypeManager This interface represents an object that manages operations related to objects. IParameterTypeManager This interface represents an object that manages operations related to objects. IPropertyTypeManager This interface represents an object that manages operations related to objects. IProviderParameterManager This interface represents an object that manages operations related to objects. IProviderTypeManager This interface represents an object that manages operations related to objects. ITextMessageManager This interface represents an object that manages operations related to objects."
  },
  "api/CG.Purple.Managers.IAttachmentManager.html": {
    "href": "api/CG.Purple.Managers.IAttachmentManager.html",
    "title": "Interface IAttachmentManager",
    "keywords": "Interface IAttachmentManager This interface represents an object that manages operations related to objects. Namespace : CG.Purple.Managers Assembly : CG.Purple.Abstractions.dll Syntax public interface IAttachmentManager Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CreateAsync(Attachment, String, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<Attachment> CreateAsync(Attachment attachment, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description Attachment attachment The model to create in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < Attachment > A task to perform the operation that returns the newly created object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. DeleteAsync(Attachment, String, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(Attachment attachment, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description Attachment attachment The model to delete from the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindAllAsync(CancellationToken) This method searches for all the objects. Declaration Task<IEnumerable<Attachment>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < Attachment >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. UpdateAsync(Attachment, String, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<Attachment> UpdateAsync(Attachment attachment, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description Attachment attachment The model to update in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < Attachment > A task to perform the operation that returns the newly updated object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation."
  },
  "api/CG.Purple.Managers.IFileTypeManager.html": {
    "href": "api/CG.Purple.Managers.IFileTypeManager.html",
    "title": "Interface IFileTypeManager",
    "keywords": "Interface IFileTypeManager This interface represents an object that manages operations related to objects. Namespace : CG.Purple.Managers Assembly : CG.Purple.Abstractions.dll Syntax public interface IFileTypeManager Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CreateAsync(FileType, String, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<FileType> CreateAsync(FileType fileType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description FileType fileType The model to create in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < FileType > A task to perform the operation that returns the newly created object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. DeleteAsync(FileType, String, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(FileType fileType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description FileType fileType The model to delete from the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindByExtensionAsync(String, CancellationToken) This method searches for a single matching object using the given file extension. Declaration Task<FileType?> FindByExtensionAsync(string extension, CancellationToken cancellationToken = null) Parameters Type Name Description System.String extension The file extension to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < FileType >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. UpdateAsync(FileType, String, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<FileType> UpdateAsync(FileType fileType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description FileType fileType The model to update in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < FileType > A task to perform the operation that returns the newly updated object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation."
  },
  "api/CG.Purple.Managers.IMailMessageManager.html": {
    "href": "api/CG.Purple.Managers.IMailMessageManager.html",
    "title": "Interface IMailMessageManager",
    "keywords": "Interface IMailMessageManager This interface represents an object that manages operations related to objects. Namespace : CG.Purple.Managers Assembly : CG.Purple.Abstractions.dll Syntax public interface IMailMessageManager Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CreateAsync(MailMessage, String, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<MailMessage> CreateAsync(MailMessage mailMessage, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MailMessage mailMessage The model to create in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MailMessage > A task to perform the operation that returns the newly created object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindAllAsync(CancellationToken) This method searches for a sequence of objects. Declaration Task<IEnumerable<MailMessage>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < MailMessage >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindByIdAsync(Int64, CancellationToken) This method searches for a single matching object using the given identifier. Declaration Task<MailMessage?> FindByIdAsync(long id, CancellationToken cancellationToken = null) Parameters Type Name Description System.Int64 id The message identifier to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < MailMessage >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindByKeyAsync(String, CancellationToken) This method searches for a single matching object using the given message key. Declaration Task<MailMessage?> FindByKeyAsync(string messageKey, CancellationToken cancellationToken = null) Parameters Type Name Description System.String messageKey The message key to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < MailMessage >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. UpdateAsync(MailMessage, String, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<MailMessage> UpdateAsync(MailMessage mailMessage, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MailMessage mailMessage The model to update in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MailMessage > A task to perform the operation that returns the newly updated object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation."
  },
  "api/CG.Purple.Managers.IMessageLogManager.html": {
    "href": "api/CG.Purple.Managers.IMessageLogManager.html",
    "title": "Interface IMessageLogManager",
    "keywords": "Interface IMessageLogManager This interface represents an object that manages operations related to the pipeline log. Namespace : CG.Purple.Managers Assembly : CG.Purple.Abstractions.dll Syntax public interface IMessageLogManager Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CreateAsync(MessageLog, String, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<MessageLog> CreateAsync(MessageLog messageLog, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MessageLog messageLog The model to create in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MessageLog > A task to perform the operation that returns the newly created object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. DeleteAsync(MessageLog, String, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(MessageLog messageLog, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MessageLog messageLog The model to delete from the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindAllAsync(CancellationToken) This method searches for a sequence of objects. Declaration Task<IEnumerable<MessageLog>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < MessageLog >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindByMessageAsync(Message, CancellationToken) This method searches for a sequence of objects that are associated with the given object. Declaration Task<IEnumerable<MessageLog>> FindByMessageAsync(Message message, CancellationToken cancellationToken = null) Parameters Type Name Description Message message The message to use for the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < MessageLog >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. Extension Methods PipelineLogManagerExtensions001.LogErrorEventAsync(IMessageLogManager, Message, MessageState, String, String, CancellationToken) PipelineLogManagerExtensions001.LogAssignedEventAsync(IMessageLogManager, Message, MessageState, ProviderType, String, CancellationToken) PipelineLogManagerExtensions001.LogResetEventAsync(IMessageLogManager, Message, MessageState, String, CancellationToken)"
  },
  "api/CG.Purple.Managers.IMessageManager.html": {
    "href": "api/CG.Purple.Managers.IMessageManager.html",
    "title": "Interface IMessageManager",
    "keywords": "Interface IMessageManager This interface represents an object that manages operations related to objects. Namespace : CG.Purple.Managers Assembly : CG.Purple.Abstractions.dll Syntax public interface IMessageManager Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. DeleteAsync(Message, String, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(Message message, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description Message message The model to delete from the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindAllAsync(CancellationToken) This method searches for a sequence of objects. Declaration Task<IEnumerable<Message>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < Message >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindByIdAsync(Int64, CancellationToken) This method searches for a single matching object using the given identifier. Declaration Task<Message?> FindByIdAsync(long id, CancellationToken cancellationToken = null) Parameters Type Name Description System.Int64 id The message identifier to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < Message >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindByKeyAsync(String, CancellationToken) This method searches for a single matching object using the given message key. Declaration Task<Message?> FindByKeyAsync(string messageKey, CancellationToken cancellationToken = null) Parameters Type Name Description System.String messageKey The message key to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < Message >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindReadyToArchiveAsync(CancellationToken) This method searches for a sequence of objects that are ready to archive. Declaration Task<IEnumerable<Message>> FindReadyToArchiveAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < Message >> A task to perform the operation that returns a sequence of matching objects. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindReadyToProcessAsync(CancellationToken) This method searches for a sequence of objects that are ready to process. Declaration Task<IEnumerable<Message>> FindReadyToProcessAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < Message >> A task to perform the operation that returns a sequence of matching objects. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindReadyToRetryAsync(CancellationToken) This method searches for a sequence of objects that are ready to retry. Declaration Task<IEnumerable<Message>> FindReadyToRetryAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < Message >> A task to perform the operation that returns a sequence of matching objects. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. UpdateAsync(Message, String, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<Message> UpdateAsync(Message message, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description Message message The model to update in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < Message > A task to perform the operation that returns the newly updated object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation."
  },
  "api/CG.Purple.Managers.IMessagePropertyManager.html": {
    "href": "api/CG.Purple.Managers.IMessagePropertyManager.html",
    "title": "Interface IMessagePropertyManager",
    "keywords": "Interface IMessagePropertyManager This interface represents an object that manages operations related to objects. Namespace : CG.Purple.Managers Assembly : CG.Purple.Abstractions.dll Syntax public interface IMessagePropertyManager Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CreateAsync(MessageProperty, String, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<MessageProperty> CreateAsync(MessageProperty messageProperty, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MessageProperty messageProperty The model to create in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MessageProperty > A task to perform the operation that returns the newly created object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. DeleteAsync(MessageProperty, String, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(MessageProperty messageProperty, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MessageProperty messageProperty The model to delete from the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. UpdateAsync(MessageProperty, String, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<MessageProperty> UpdateAsync(MessageProperty messageProperty, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MessageProperty messageProperty The model to update in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MessageProperty > A task to perform the operation that returns the newly updated object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation."
  },
  "api/CG.Purple.Managers.IMimeTypeManager.html": {
    "href": "api/CG.Purple.Managers.IMimeTypeManager.html",
    "title": "Interface IMimeTypeManager",
    "keywords": "Interface IMimeTypeManager This interface represents an object that manages operations related to objects. Namespace : CG.Purple.Managers Assembly : CG.Purple.Abstractions.dll Syntax public interface IMimeTypeManager Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CreateAsync(MimeType, String, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<MimeType> CreateAsync(MimeType mimeType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MimeType mimeType The model to create in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MimeType > A task to perform the operation that returns the newly created object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. DeleteAsync(MimeType, String, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(MimeType mimeType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MimeType mimeType The model to delete from the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindAllAsync(CancellationToken) This method searches for a sequence of objects. Declaration Task<IEnumerable<MimeType>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < MimeType >> A task to perform the operation that returns the results of the search. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindByExtensionAsync(String, CancellationToken) This method searches for a single matching object using the given file extension. Declaration Task<MimeType?> FindByExtensionAsync(string extension, CancellationToken cancellationToken = null) Parameters Type Name Description System.String extension The file extension to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < MimeType >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindByIdAsync(Int32, CancellationToken) This method searches for a single matching object using the given identifier. Declaration Task<MimeType?> FindByIdAsync(int id, CancellationToken cancellationToken = null) Parameters Type Name Description System.Int32 id The identifier to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < MimeType >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindByTypeAsync(String, String, CancellationToken) This method searches for matching objects using the given type and/or subtype. Declaration Task<IEnumerable<MimeType>> FindByTypeAsync(string type, string subType, CancellationToken cancellationToken = null) Parameters Type Name Description System.String type The MIME type to use for the search. System.String subType The MIME sub-type to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < MimeType >> A task to perform the operation that returns the results of the search. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. UpdateAsync(MimeType, String, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<MimeType> UpdateAsync(MimeType mimeType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MimeType mimeType The model to update in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MimeType > A task to perform the operation that returns the newly updated object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. Extension Methods MimeTypeManagerExtensions.FindByCanonicalTypeAsync(IMimeTypeManager, String, CancellationToken)"
  },
  "api/CG.Purple.Managers.IParameterTypeManager.html": {
    "href": "api/CG.Purple.Managers.IParameterTypeManager.html",
    "title": "Interface IParameterTypeManager",
    "keywords": "Interface IParameterTypeManager This interface represents an object that manages operations related to objects. Namespace : CG.Purple.Managers Assembly : CG.Purple.Abstractions.dll Syntax public interface IParameterTypeManager Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CreateAsync(ParameterType, String, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<ParameterType> CreateAsync(ParameterType parameterType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ParameterType parameterType The model to create in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ParameterType > A task to perform the operation that returns the newly created object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. DeleteAsync(ParameterType, String, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(ParameterType parameterType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ParameterType parameterType The model to delete from the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindAllAsync(CancellationToken) This method searches for a sequence of objects. Declaration Task<IEnumerable<ParameterType>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < ParameterType >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindByNameAsync(String, CancellationToken) This method searches for a single matching object using the given name. Declaration Task<ParameterType?> FindByNameAsync(string name, CancellationToken cancellationToken = null) Parameters Type Name Description System.String name The name to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < ParameterType >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. UpdateAsync(ParameterType, String, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<ParameterType> UpdateAsync(ParameterType parameterType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ParameterType parameterType The model to update in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ParameterType > A task to perform the operation that returns the newly updated object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation."
  },
  "api/CG.Purple.Managers.IPropertyTypeManager.html": {
    "href": "api/CG.Purple.Managers.IPropertyTypeManager.html",
    "title": "Interface IPropertyTypeManager",
    "keywords": "Interface IPropertyTypeManager This interface represents an object that manages operations related to objects. Namespace : CG.Purple.Managers Assembly : CG.Purple.Abstractions.dll Syntax public interface IPropertyTypeManager Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CreateAsync(PropertyType, String, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<PropertyType> CreateAsync(PropertyType propertyType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description PropertyType propertyType The model to create in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < PropertyType > A task to perform the operation that returns the newly created object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. DeleteAsync(PropertyType, String, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(PropertyType propertyType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description PropertyType propertyType The model to delete from the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindAllAsync(CancellationToken) This method searches for a sequence of objects. Declaration Task<IEnumerable<PropertyType>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < PropertyType >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindByNameAsync(String, CancellationToken) This method searches for a single matching object using the given name. Declaration Task<PropertyType?> FindByNameAsync(string name, CancellationToken cancellationToken = null) Parameters Type Name Description System.String name The name to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < PropertyType >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. UpdateAsync(PropertyType, String, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<PropertyType> UpdateAsync(PropertyType propertyType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description PropertyType propertyType The model to update in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < PropertyType > A task to perform the operation that returns the newly updated object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation."
  },
  "api/CG.Purple.Managers.IProviderParameterManager.html": {
    "href": "api/CG.Purple.Managers.IProviderParameterManager.html",
    "title": "Interface IProviderParameterManager",
    "keywords": "Interface IProviderParameterManager This interface represents an object that manages operations related to objects. Namespace : CG.Purple.Managers Assembly : CG.Purple.Abstractions.dll Syntax public interface IProviderParameterManager Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CreateAsync(ProviderParameter, String, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<ProviderParameter> CreateAsync(ProviderParameter providerParameter, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderParameter providerParameter The model to create in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProviderParameter > A task to perform the operation that returns the newly created object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. DeleteAsync(ProviderParameter, String, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(ProviderParameter providerParameter, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderParameter providerParameter The model to delete from the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. UpdateAsync(ProviderParameter, String, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<ProviderParameter> UpdateAsync(ProviderParameter providerParameter, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderParameter providerParameter The model to update in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProviderParameter > A task to perform the operation that returns the newly updated object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation."
  },
  "api/CG.Purple.Managers.IProviderTypeManager.html": {
    "href": "api/CG.Purple.Managers.IProviderTypeManager.html",
    "title": "Interface IProviderTypeManager",
    "keywords": "Interface IProviderTypeManager This interface represents an object that manages operations related to objects. Namespace : CG.Purple.Managers Assembly : CG.Purple.Abstractions.dll Syntax public interface IProviderTypeManager Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CreateAsync(ProviderType, String, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<ProviderType> CreateAsync(ProviderType providerType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderType providerType The model to create in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProviderType > A task to perform the operation that returns the newly created object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. DeleteAsync(ProviderType, String, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(ProviderType providerType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderType providerType The model to delete from the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindAllAsync(CancellationToken) This method searches for a sequence of objects. Declaration Task<IEnumerable<ProviderType>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < ProviderType >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindByIdAsync(Int32, CancellationToken) This method searches for a matching object by identifier. Declaration Task<ProviderType?> FindByIdAsync(int id, CancellationToken cancellationToken = null) Parameters Type Name Description System.Int32 id The identifier to use for the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < ProviderType >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindByNameAsync(String, CancellationToken) This method searches for a single matching object using the given name. Declaration Task<ProviderType?> FindByNameAsync(string name, CancellationToken cancellationToken = null) Parameters Type Name Description System.String name The name to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < ProviderType >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindForEmailsAsync(CancellationToken) This method searches for a sequence of objects that are capable of processing emails. Declaration Task<IEnumerable<ProviderType>> FindForEmailsAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < ProviderType >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindForTextsAsync(CancellationToken) This method searches for a sequence of objects that are capable of processing texts. Declaration Task<IEnumerable<ProviderType>> FindForTextsAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < ProviderType >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. UpdateAsync(ProviderType, String, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<ProviderType> UpdateAsync(ProviderType providerType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderType providerType The model to update in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProviderType > A task to perform the operation that returns the newly updated object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation."
  },
  "api/CG.Purple.Managers.ITextMessageManager.html": {
    "href": "api/CG.Purple.Managers.ITextMessageManager.html",
    "title": "Interface ITextMessageManager",
    "keywords": "Interface ITextMessageManager This interface represents an object that manages operations related to objects. Namespace : CG.Purple.Managers Assembly : CG.Purple.Abstractions.dll Syntax public interface ITextMessageManager Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. CreateAsync(TextMessage, String, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<TextMessage> CreateAsync(TextMessage textMessage, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description TextMessage textMessage The model to create in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < TextMessage > A task to perform the operation that returns the newly created object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindAllAsync(CancellationToken) This method searches for a sequence of objects. Declaration Task<IEnumerable<TextMessage>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < TextMessage >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindByIdAsync(Int64, CancellationToken) This method searches for a single matching object using the given identifier. Declaration Task<TextMessage?> FindByIdAsync(long id, CancellationToken cancellationToken = null) Parameters Type Name Description System.Int64 id The message identifier to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < TextMessage >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. FindByKeyAsync(String, CancellationToken) This method searches for a single matching object using the given message key. Declaration Task<TextMessage?> FindByKeyAsync(string messageKey, CancellationToken cancellationToken = null) Parameters Type Name Description System.String messageKey The message key to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < TextMessage >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation. UpdateAsync(TextMessage, String, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<TextMessage> UpdateAsync(TextMessage textMessage, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description TextMessage textMessage The model to update in the underlying storage. System.String userName The user name of the person performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < TextMessage > A task to perform the operation that returns the newly updated object. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation."
  },
  "api/CG.Purple.Managers.MailMessageManager.html": {
    "href": "api/CG.Purple.Managers.MailMessageManager.html",
    "title": "Class MailMessageManager",
    "keywords": "Class MailMessageManager This class is a default implementation of the IMailMessageManager interface. Inheritance System.Object MailMessageManager Implements IMailMessageManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Managers Assembly : CG.Purple.dll Syntax class MailMessageManager : IMailMessageManager Constructors MailMessageManager(IOptions<BllOptions>, IMailMessageRepository, ILogger<IMailMessageManager>) This constructor creates a new instance of the MailMessageManager class. Declaration public MailMessageManager(IOptions<BllOptions> bllOptions, IMailMessageRepository mailMessageRepository, ILogger<IMailMessageManager> logger) Parameters Type Name Description IOptions < BllOptions > bllOptions The business logic layer options to use with this manager. IMailMessageRepository mailMessageRepository The mail message repository to use with this manager. ILogger < IMailMessageManager > logger The logger to use with this manager. Fields _logger This field contains the logger for this manager. Declaration protected readonly ILogger<IMailMessageManager> _logger Field Value Type Description ILogger < IMailMessageManager > _mailMessageRepository This field contains the repository for this manager. Declaration protected readonly IMailMessageRepository _mailMessageRepository Field Value Type Description IMailMessageRepository _managerOptions This field contains the options for this manager. Declaration protected readonly MailMessageManagerOptions? _managerOptions Field Value Type Description System.Nullable < MailMessageManagerOptions > Methods AnyAsync(CancellationToken) Declaration public virtual async Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Boolean > CountAsync(CancellationToken) Declaration public virtual async Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Int64 > CreateAsync(MailMessage, String, CancellationToken) Declaration public virtual async Task<MailMessage> CreateAsync(MailMessage mailMessage, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MailMessage mailMessage System.String userName CancellationToken cancellationToken Returns Type Description Task < MailMessage > FindAllAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<MailMessage>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < MailMessage >> FindByIdAsync(Int64, CancellationToken) Declaration public virtual async Task<MailMessage?> FindByIdAsync(long id, CancellationToken cancellationToken = null) Parameters Type Name Description System.Int64 id CancellationToken cancellationToken Returns Type Description Task < System.Nullable < MailMessage >> FindByKeyAsync(String, CancellationToken) Declaration public virtual async Task<MailMessage?> FindByKeyAsync(string messageKey, CancellationToken cancellationToken = null) Parameters Type Name Description System.String messageKey CancellationToken cancellationToken Returns Type Description Task < System.Nullable < MailMessage >> UpdateAsync(MailMessage, String, CancellationToken) Declaration public virtual async Task<MailMessage> UpdateAsync(MailMessage mailMessage, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MailMessage mailMessage System.String userName CancellationToken cancellationToken Returns Type Description Task < MailMessage > Implements IMailMessageManager"
  },
  "api/CG.Purple.Managers.ManagerException.html": {
    "href": "api/CG.Purple.Managers.ManagerException.html",
    "title": "Class ManagerException",
    "keywords": "Class ManagerException This class represents a manager related exception. Inheritance System.Object ManagerException Namespace : CG.Purple.Managers Assembly : CG.Purple.Primitives.dll Syntax public class ManagerException : Exception Constructors ManagerException() This constructor creates a new instance of the ManagerException class. Declaration public ManagerException() ManagerException(SerializationInfo, StreamingContext) This constructor creates a new instance of the ManagerException class. Declaration public ManagerException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The serialization info to use for the exception. StreamingContext context The streaming context to use for the exception. ManagerException(String) This constructor creates a new instance of the ManagerException class. Declaration public ManagerException(string message) Parameters Type Name Description System.String message The message to use for the exception. ManagerException(String, Exception) This constructor creates a new instance of the ManagerException class. Declaration public ManagerException(string message, Exception innerException) Parameters Type Name Description System.String message The message to use for the exception. Exception innerException An optional inner exception reference."
  },
  "api/CG.Purple.Managers.MessageLogManager.html": {
    "href": "api/CG.Purple.Managers.MessageLogManager.html",
    "title": "Class MessageLogManager",
    "keywords": "Class MessageLogManager This class is a default implementation of the IMessageLogManager interface. Inheritance System.Object MessageLogManager Implements IMessageLogManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Managers Assembly : CG.Purple.dll Syntax class MessageLogManager : IMessageLogManager Constructors MessageLogManager(IMessageLogRepository, ILogger<IMessageLogManager>) This constructor creates a new instance of the MessageLogManager class. Declaration public MessageLogManager(IMessageLogRepository messageLogRepository, ILogger<IMessageLogManager> logger) Parameters Type Name Description IMessageLogRepository messageLogRepository The message log repository to use with this manager. ILogger < IMessageLogManager > logger The logger to use with this manager. Fields _logger This field contains the logger for this manager. Declaration protected readonly ILogger<IMessageLogManager> _logger Field Value Type Description ILogger < IMessageLogManager > _messageLogRepository This field contains the repository for this manager. Declaration protected readonly IMessageLogRepository _messageLogRepository Field Value Type Description IMessageLogRepository Methods AnyAsync(CancellationToken) Declaration public virtual async Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Boolean > CountAsync(CancellationToken) Declaration public virtual async Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Int64 > CreateAsync(MessageLog, String, CancellationToken) Declaration public virtual async Task<MessageLog> CreateAsync(MessageLog messageLog, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MessageLog messageLog System.String userName CancellationToken cancellationToken Returns Type Description Task < MessageLog > DeleteAsync(MessageLog, String, CancellationToken) Declaration public virtual async Task DeleteAsync(MessageLog messageLog, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MessageLog messageLog System.String userName CancellationToken cancellationToken Returns Type Description Task FindAllAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<MessageLog>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < MessageLog >> FindByMessageAsync(Message, CancellationToken) Declaration public virtual async Task<IEnumerable<MessageLog>> FindByMessageAsync(Message message, CancellationToken cancellationToken = null) Parameters Type Name Description Message message CancellationToken cancellationToken Returns Type Description Task < IEnumerable < MessageLog >> Implements IMessageLogManager"
  },
  "api/CG.Purple.Managers.MessageManager.html": {
    "href": "api/CG.Purple.Managers.MessageManager.html",
    "title": "Class MessageManager",
    "keywords": "Class MessageManager This class is a default implementation of the IMessageManager interface. Inheritance System.Object MessageManager Implements IMessageManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Managers Assembly : CG.Purple.dll Syntax class MessageManager : IMessageManager Constructors MessageManager(IMessageRepository, ICryptographer, ILogger<IMessageManager>) This constructor creates a new instance of the MessageManager class. Declaration public MessageManager(IMessageRepository messageRepository, ICryptographer cryptographer, ILogger<IMessageManager> logger) Parameters Type Name Description IMessageRepository messageRepository The message repository to use with this manager. ICryptographer cryptographer The cryptographer to use with this manager. ILogger < IMessageManager > logger The logger to use with this manager. Fields _cryptographer This field contains the cryptographer for this manager. Declaration protected readonly ICryptographer _cryptographer Field Value Type Description ICryptographer _logger This field contains the logger for this manager. Declaration protected readonly ILogger<IMessageManager> _logger Field Value Type Description ILogger < IMessageManager > _messageRepository This field contains the repository for this manager. Declaration protected readonly IMessageRepository _messageRepository Field Value Type Description IMessageRepository Methods AnyAsync(CancellationToken) Declaration public virtual async Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Boolean > CountAsync(CancellationToken) Declaration public virtual async Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Int64 > DeleteAsync(Message, String, CancellationToken) Declaration public virtual async Task DeleteAsync(Message message, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description Message message System.String userName CancellationToken cancellationToken Returns Type Description Task FindAllAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<Message>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < Message >> FindByIdAsync(Int64, CancellationToken) Declaration public virtual async Task<Message?> FindByIdAsync(long id, CancellationToken cancellationToken = null) Parameters Type Name Description System.Int64 id CancellationToken cancellationToken Returns Type Description Task < System.Nullable < Message >> FindByKeyAsync(String, CancellationToken) Declaration public virtual async Task<Message?> FindByKeyAsync(string messageKey, CancellationToken cancellationToken = null) Parameters Type Name Description System.String messageKey CancellationToken cancellationToken Returns Type Description Task < System.Nullable < Message >> FindReadyToArchiveAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<Message>> FindReadyToArchiveAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < Message >> FindReadyToProcessAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<Message>> FindReadyToProcessAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < Message >> FindReadyToRetryAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<Message>> FindReadyToRetryAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < Message >> UpdateAsync(Message, String, CancellationToken) Declaration public virtual async Task<Message> UpdateAsync(Message message, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description Message message System.String userName CancellationToken cancellationToken Returns Type Description Task < Message > Implements IMessageManager"
  },
  "api/CG.Purple.Managers.MessagePropertyManager.html": {
    "href": "api/CG.Purple.Managers.MessagePropertyManager.html",
    "title": "Class MessagePropertyManager",
    "keywords": "Class MessagePropertyManager This class is a default implementation of the IMessagePropertyManager interface. Inheritance System.Object MessagePropertyManager Implements IMessagePropertyManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Managers Assembly : CG.Purple.dll Syntax class MessagePropertyManager : IMessagePropertyManager Constructors MessagePropertyManager(IMessagePropertyRepository, ILogger<IMessagePropertyManager>) This constructor creates a new instance of the MessagePropertyManager class. Declaration public MessagePropertyManager(IMessagePropertyRepository messagePropertyRepository, ILogger<IMessagePropertyManager> logger) Parameters Type Name Description IMessagePropertyRepository messagePropertyRepository The messageProperty repository to use with this manager. ILogger < IMessagePropertyManager > logger The logger to use with this manager. Fields _logger This field contains the logger for this manager. Declaration protected readonly ILogger<IMessagePropertyManager> _logger Field Value Type Description ILogger < IMessagePropertyManager > _messagePropertyRepository This field contains the repository for this manager. Declaration protected readonly IMessagePropertyRepository _messagePropertyRepository Field Value Type Description IMessagePropertyRepository Methods AnyAsync(CancellationToken) Declaration public virtual async Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Boolean > CountAsync(CancellationToken) Declaration public virtual async Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Int64 > CreateAsync(MessageProperty, String, CancellationToken) Declaration public virtual async Task<MessageProperty> CreateAsync(MessageProperty messageProperty, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MessageProperty messageProperty System.String userName CancellationToken cancellationToken Returns Type Description Task < MessageProperty > DeleteAsync(MessageProperty, String, CancellationToken) Declaration public virtual async Task DeleteAsync(MessageProperty messageProperty, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MessageProperty messageProperty System.String userName CancellationToken cancellationToken Returns Type Description Task UpdateAsync(MessageProperty, String, CancellationToken) Declaration public virtual async Task<MessageProperty> UpdateAsync(MessageProperty messageProperty, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MessageProperty messageProperty System.String userName CancellationToken cancellationToken Returns Type Description Task < MessageProperty > Implements IMessagePropertyManager"
  },
  "api/CG.Purple.Managers.MimeTypeManager.html": {
    "href": "api/CG.Purple.Managers.MimeTypeManager.html",
    "title": "Class MimeTypeManager",
    "keywords": "Class MimeTypeManager This class is a default implementation of the IMimeTypeManager interface. Inheritance System.Object MimeTypeManager Implements IMimeTypeManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Managers Assembly : CG.Purple.dll Syntax class MimeTypeManager : IMimeTypeManager Constructors MimeTypeManager(IMimeTypeRepository, ILogger<IMimeTypeManager>) This constructor creates a new instance of the MimeTypeManager class. Declaration public MimeTypeManager(IMimeTypeRepository mimeTypeRepository, ILogger<IMimeTypeManager> logger) Parameters Type Name Description IMimeTypeRepository mimeTypeRepository The mime type repository to use with this manager. ILogger < IMimeTypeManager > logger The logger to use with this manager. Fields _logger This field contains the logger for this manager. Declaration protected readonly ILogger<IMimeTypeManager> _logger Field Value Type Description ILogger < IMimeTypeManager > _mimeTypeRepository This field contains the repository for this manager. Declaration protected readonly IMimeTypeRepository _mimeTypeRepository Field Value Type Description IMimeTypeRepository Methods AnyAsync(CancellationToken) Declaration public virtual async Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Boolean > CountAsync(CancellationToken) Declaration public virtual async Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Int64 > CreateAsync(MimeType, String, CancellationToken) Declaration public virtual async Task<MimeType> CreateAsync(MimeType mimeType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MimeType mimeType System.String userName CancellationToken cancellationToken Returns Type Description Task < MimeType > DeleteAsync(MimeType, String, CancellationToken) Declaration public virtual async Task DeleteAsync(MimeType mimeType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MimeType mimeType System.String userName CancellationToken cancellationToken Returns Type Description Task FindAllAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<MimeType>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < MimeType >> FindByExtensionAsync(String, CancellationToken) Declaration public virtual async Task<MimeType?> FindByExtensionAsync(string extension, CancellationToken cancellationToken = null) Parameters Type Name Description System.String extension CancellationToken cancellationToken Returns Type Description Task < System.Nullable < MimeType >> FindByIdAsync(Int32, CancellationToken) Declaration public virtual async Task<MimeType?> FindByIdAsync(int id, CancellationToken cancellationToken = null) Parameters Type Name Description System.Int32 id CancellationToken cancellationToken Returns Type Description Task < System.Nullable < MimeType >> FindByTypeAsync(String, String, CancellationToken) Declaration public virtual async Task<IEnumerable<MimeType>> FindByTypeAsync(string type, string subType, CancellationToken cancellationToken = null) Parameters Type Name Description System.String type System.String subType CancellationToken cancellationToken Returns Type Description Task < IEnumerable < MimeType >> UpdateAsync(MimeType, String, CancellationToken) Declaration public virtual async Task<MimeType> UpdateAsync(MimeType mimeType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description MimeType mimeType System.String userName CancellationToken cancellationToken Returns Type Description Task < MimeType > Implements IMimeTypeManager"
  },
  "api/CG.Purple.Managers.MimeTypeManagerExtensions.html": {
    "href": "api/CG.Purple.Managers.MimeTypeManagerExtensions.html",
    "title": "Class MimeTypeManagerExtensions",
    "keywords": "Class MimeTypeManagerExtensions This class contains extension methods related to the IMimeTypeManager type. Inheritance System.Object MimeTypeManagerExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Managers Assembly : CG.Purple.Abstractions.dll Syntax public static class MimeTypeManagerExtensions Methods FindByCanonicalTypeAsync(IMimeTypeManager, String, CancellationToken) This method searches for a matching object using the given canonical MIME type (ie, in the format: text/plain). Declaration public static async Task<MimeType?> FindByCanonicalTypeAsync(this IMimeTypeManager mimeTypeManager, string canonicalType, CancellationToken cancellationToken = null) Parameters Type Name Description IMimeTypeManager mimeTypeManager The mime type manager to use for the operation. System.String canonicalType The canonical MIME type to use for the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < MimeType >> A task to perform the operation that returns the matching object, or NULL if no match was found. Exceptions Type Condition ManagerException This exception is thrown whenever the manager fails to complete the operation."
  },
  "api/CG.Purple.Managers.ParameterTypeManager.html": {
    "href": "api/CG.Purple.Managers.ParameterTypeManager.html",
    "title": "Class ParameterTypeManager",
    "keywords": "Class ParameterTypeManager This class is a default implementation of the IParameterTypeManager interface. Inheritance System.Object ParameterTypeManager Implements IParameterTypeManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Managers Assembly : CG.Purple.dll Syntax class ParameterTypeManager : IParameterTypeManager Constructors ParameterTypeManager(IParameterTypeRepository, ILogger<IParameterTypeManager>) This constructor creates a new instance of the ParameterTypeManager class. Declaration public ParameterTypeManager(IParameterTypeRepository parameterTypeRepository, ILogger<IParameterTypeManager> logger) Parameters Type Name Description IParameterTypeRepository parameterTypeRepository The parameter type repository to use with this manager. ILogger < IParameterTypeManager > logger The logger to use with this manager. Fields _logger This field contains the logger for this manager. Declaration protected readonly ILogger<IParameterTypeManager> _logger Field Value Type Description ILogger < IParameterTypeManager > _parameterTypeRepository This field contains the repository for this manager. Declaration protected readonly IParameterTypeRepository _parameterTypeRepository Field Value Type Description IParameterTypeRepository Methods AnyAsync(CancellationToken) Declaration public virtual async Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Boolean > CountAsync(CancellationToken) Declaration public virtual async Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Int64 > CreateAsync(ParameterType, String, CancellationToken) Declaration public virtual async Task<ParameterType> CreateAsync(ParameterType parameterType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ParameterType parameterType System.String userName CancellationToken cancellationToken Returns Type Description Task < ParameterType > DeleteAsync(ParameterType, String, CancellationToken) Declaration public virtual async Task DeleteAsync(ParameterType parameterType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ParameterType parameterType System.String userName CancellationToken cancellationToken Returns Type Description Task FindAllAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<ParameterType>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < ParameterType >> FindByNameAsync(String, CancellationToken) Declaration public virtual async Task<ParameterType?> FindByNameAsync(string name, CancellationToken cancellationToken = null) Parameters Type Name Description System.String name CancellationToken cancellationToken Returns Type Description Task < System.Nullable < ParameterType >> UpdateAsync(ParameterType, String, CancellationToken) Declaration public virtual async Task<ParameterType> UpdateAsync(ParameterType parameterType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ParameterType parameterType System.String userName CancellationToken cancellationToken Returns Type Description Task < ParameterType > Implements IParameterTypeManager"
  },
  "api/CG.Purple.Managers.PipelineLogManagerExtensions001.html": {
    "href": "api/CG.Purple.Managers.PipelineLogManagerExtensions001.html",
    "title": "Class PipelineLogManagerExtensions001",
    "keywords": "Class PipelineLogManagerExtensions001 This class contains extension methods related to the IMessageLogManager type. Inheritance System.Object PipelineLogManagerExtensions001 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Managers Assembly : CG.Purple.Abstractions.dll Syntax public static class PipelineLogManagerExtensions001 Methods LogAssignedEventAsync(IMessageLogManager, Message, MessageState, ProviderType, String, CancellationToken) This method writes an event to the processing log, for an event that caused a state transition in the associated message. Declaration public static async Task<MessageLog> LogAssignedEventAsync(this IMessageLogManager messageLogManager, Message message, MessageState previousMessageState, ProviderType providerType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description IMessageLogManager messageLogManager The message log manager to use for the operation. Message message The message to use for the operation. MessageState previousMessageState The message state before the event took place. ProviderType providerType The provider type to use for the operation. System.String userName The user name of the perform performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MessageLog > A task to perform the operation that returns the newly created object. LogErrorEventAsync(IMessageLogManager, Message, MessageState, String, String, CancellationToken) This method writes an event to the processing log. Declaration public static async Task<MessageLog> LogErrorEventAsync(this IMessageLogManager messageLogManager, Message message, MessageState previousMessageState, string errorMessage, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description IMessageLogManager messageLogManager The message log manager to use for the operation. Message message The message to use for the operation. MessageState previousMessageState The message state before the event took place. System.String errorMessage The error message to use for the operation. System.String userName The user name of the perform performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MessageLog > A task to perform the operation that returns the newly created object. LogResetEventAsync(IMessageLogManager, Message, MessageState, String, CancellationToken) This method writes a event to the processing log, for an event that caused a state transition in the associated message. Declaration public static async Task<MessageLog> LogResetEventAsync(this IMessageLogManager messageLogManager, Message message, MessageState previousMessageState, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description IMessageLogManager messageLogManager The message log manager to use for the operation. Message message The message to use for the operation. MessageState previousMessageState The message state before the event took place. System.String userName The user name of the perform performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MessageLog > A task to perform the operation that returns the newly created object."
  },
  "api/CG.Purple.Managers.PropertyTypeManager.html": {
    "href": "api/CG.Purple.Managers.PropertyTypeManager.html",
    "title": "Class PropertyTypeManager",
    "keywords": "Class PropertyTypeManager This class is a default implementation of the IPropertyTypeManager interface. Inheritance System.Object PropertyTypeManager Implements IPropertyTypeManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Managers Assembly : CG.Purple.dll Syntax class PropertyTypeManager : IPropertyTypeManager Constructors PropertyTypeManager(IPropertyTypeRepository, ILogger<IPropertyTypeManager>) This constructor creates a new instance of the PropertyTypeManager class. Declaration public PropertyTypeManager(IPropertyTypeRepository propertyTypeRepository, ILogger<IPropertyTypeManager> logger) Parameters Type Name Description IPropertyTypeRepository propertyTypeRepository The property type repository to use with this manager. ILogger < IPropertyTypeManager > logger The logger to use with this manager. Fields _logger This field contains the logger for this manager. Declaration protected readonly ILogger<IPropertyTypeManager> _logger Field Value Type Description ILogger < IPropertyTypeManager > _propertyTypeRepository This field contains the repository for this manager. Declaration protected readonly IPropertyTypeRepository _propertyTypeRepository Field Value Type Description IPropertyTypeRepository Methods AnyAsync(CancellationToken) Declaration public virtual async Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Boolean > CountAsync(CancellationToken) Declaration public virtual async Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Int64 > CreateAsync(PropertyType, String, CancellationToken) Declaration public virtual async Task<PropertyType> CreateAsync(PropertyType propertyType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description PropertyType propertyType System.String userName CancellationToken cancellationToken Returns Type Description Task < PropertyType > DeleteAsync(PropertyType, String, CancellationToken) Declaration public virtual async Task DeleteAsync(PropertyType propertyType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description PropertyType propertyType System.String userName CancellationToken cancellationToken Returns Type Description Task FindAllAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<PropertyType>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < PropertyType >> FindByNameAsync(String, CancellationToken) Declaration public virtual async Task<PropertyType?> FindByNameAsync(string name, CancellationToken cancellationToken = null) Parameters Type Name Description System.String name CancellationToken cancellationToken Returns Type Description Task < System.Nullable < PropertyType >> UpdateAsync(PropertyType, String, CancellationToken) Declaration public virtual async Task<PropertyType> UpdateAsync(PropertyType propertyType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description PropertyType propertyType System.String userName CancellationToken cancellationToken Returns Type Description Task < PropertyType > Implements IPropertyTypeManager"
  },
  "api/CG.Purple.Managers.ProviderParameterManager.html": {
    "href": "api/CG.Purple.Managers.ProviderParameterManager.html",
    "title": "Class ProviderParameterManager",
    "keywords": "Class ProviderParameterManager This class is a default implementation of the IProviderParameterManager interface. Inheritance System.Object ProviderParameterManager Implements IProviderParameterManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Managers Assembly : CG.Purple.dll Syntax class ProviderParameterManager : IProviderParameterManager Constructors ProviderParameterManager(IProviderParameterRepository, ICryptographer, ILogger<IProviderParameterManager>) This constructor creates a new instance of the ProviderParameterManager class. Declaration public ProviderParameterManager(IProviderParameterRepository providerParameterRepository, ICryptographer cryptographer, ILogger<IProviderParameterManager> logger) Parameters Type Name Description IProviderParameterRepository providerParameterRepository The provider parameter repository to use with this manager. ICryptographer cryptographer The cryptographer to use with this manager. ILogger < IProviderParameterManager > logger The logger to use with this manager. Fields _cryptographer This field contains the cryptographer for this manager. Declaration protected ICryptographer _cryptographer Field Value Type Description ICryptographer _logger This field contains the logger for this manager. Declaration protected readonly ILogger<IProviderParameterManager> _logger Field Value Type Description ILogger < IProviderParameterManager > _providerParameterRepository This field contains the repository for this manager. Declaration protected readonly IProviderParameterRepository _providerParameterRepository Field Value Type Description IProviderParameterRepository Methods AesDecryptAsync(String, CancellationToken) This method wraps the corresponding cryptographer extension method so we can swap out the implementation in a test fixture (because extension methods are notoriously difficult to mock). Declaration protected virtual async Task<string> AesDecryptAsync(string value, CancellationToken cancellationToken = null) Parameters Type Name Description System.String value The value to be decrypted. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < System.String > The decrypted value. AesEncryptAsync(String, CancellationToken) This method wraps the corresponding cryptographer extension method so we can swap out the implementation in a test fixture (because extension methods are notoriously difficult to mock). Declaration protected virtual async Task<string> AesEncryptAsync(string value, CancellationToken cancellationToken = null) Parameters Type Name Description System.String value The value to be encrypted. CancellationToken cancellationToken The cancellation token. Returns Type Description Task < System.String > The encrypted value. AnyAsync(CancellationToken) Declaration public virtual async Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Boolean > CountAsync(CancellationToken) Declaration public virtual async Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Int64 > CreateAsync(ProviderParameter, String, CancellationToken) Declaration public virtual async Task<ProviderParameter> CreateAsync(ProviderParameter providerParameter, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderParameter providerParameter System.String userName CancellationToken cancellationToken Returns Type Description Task < ProviderParameter > DeleteAsync(ProviderParameter, String, CancellationToken) Declaration public virtual async Task DeleteAsync(ProviderParameter providerParameter, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderParameter providerParameter System.String userName CancellationToken cancellationToken Returns Type Description Task UpdateAsync(ProviderParameter, String, CancellationToken) Declaration public virtual async Task<ProviderParameter> UpdateAsync(ProviderParameter providerParameter, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderParameter providerParameter System.String userName CancellationToken cancellationToken Returns Type Description Task < ProviderParameter > Implements IProviderParameterManager"
  },
  "api/CG.Purple.Managers.ProviderTypeManager.html": {
    "href": "api/CG.Purple.Managers.ProviderTypeManager.html",
    "title": "Class ProviderTypeManager",
    "keywords": "Class ProviderTypeManager This class is a default implementation of the IProviderTypeManager interface. Inheritance System.Object ProviderTypeManager Implements IProviderTypeManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Managers Assembly : CG.Purple.dll Syntax class ProviderTypeManager : IProviderTypeManager Constructors ProviderTypeManager(IProviderTypeRepository, ICryptographer, ILogger<IProviderTypeManager>) This constructor creates a new instance of the ProviderTypeManager class. Declaration public ProviderTypeManager(IProviderTypeRepository providerTypeRepository, ICryptographer cryptographer, ILogger<IProviderTypeManager> logger) Parameters Type Name Description IProviderTypeRepository providerTypeRepository The provider type repository to use with this manager. ICryptographer cryptographer The cryptographer to use with this manager. ILogger < IProviderTypeManager > logger The logger to use with this manager. Fields _cryptographer This field contains the cryptographer for this manager. Declaration protected readonly ICryptographer _cryptographer Field Value Type Description ICryptographer _logger This field contains the logger for this manager. Declaration protected readonly ILogger<IProviderTypeManager> _logger Field Value Type Description ILogger < IProviderTypeManager > _providerTypeRepository This field contains the repository for this manager. Declaration protected readonly IProviderTypeRepository _providerTypeRepository Field Value Type Description IProviderTypeRepository Methods AnyAsync(CancellationToken) Declaration public virtual async Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Boolean > CountAsync(CancellationToken) Declaration public virtual async Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Int64 > CreateAsync(ProviderType, String, CancellationToken) Declaration public virtual async Task<ProviderType> CreateAsync(ProviderType providerType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderType providerType System.String userName CancellationToken cancellationToken Returns Type Description Task < ProviderType > DeleteAsync(ProviderType, String, CancellationToken) Declaration public virtual async Task DeleteAsync(ProviderType providerType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderType providerType System.String userName CancellationToken cancellationToken Returns Type Description Task FindAllAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<ProviderType>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < ProviderType >> FindByIdAsync(Int32, CancellationToken) Declaration public virtual async Task<ProviderType> FindByIdAsync(int id, CancellationToken cancellationToken = null) Parameters Type Name Description System.Int32 id CancellationToken cancellationToken Returns Type Description Task < ProviderType > FindByNameAsync(String, CancellationToken) Declaration public virtual async Task<ProviderType> FindByNameAsync(string name, CancellationToken cancellationToken = null) Parameters Type Name Description System.String name CancellationToken cancellationToken Returns Type Description Task < ProviderType > FindForEmailsAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<ProviderType>> FindForEmailsAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < ProviderType >> FindForTextsAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<ProviderType>> FindForTextsAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < ProviderType >> UpdateAsync(ProviderType, String, CancellationToken) Declaration public virtual async Task<ProviderType> UpdateAsync(ProviderType providerType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderType providerType System.String userName CancellationToken cancellationToken Returns Type Description Task < ProviderType > Implements IProviderTypeManager"
  },
  "api/CG.Purple.Managers.TextMessageManager.html": {
    "href": "api/CG.Purple.Managers.TextMessageManager.html",
    "title": "Class TextMessageManager",
    "keywords": "Class TextMessageManager This class is a default implementation of the ITextMessageManager interface. Inheritance System.Object TextMessageManager Implements ITextMessageManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Managers Assembly : CG.Purple.dll Syntax class TextMessageManager : ITextMessageManager Constructors TextMessageManager(IOptions<BllOptions>, ITextMessageRepository, ILogger<ITextMessageManager>) This constructor creates a new instance of the TextMessageManager class. Declaration public TextMessageManager(IOptions<BllOptions> bllOptions, ITextMessageRepository textMessageRepository, ILogger<ITextMessageManager> logger) Parameters Type Name Description IOptions < BllOptions > bllOptions The business logic layer options to use with this manager. ITextMessageRepository textMessageRepository The text message repository to use with this manager. ILogger < ITextMessageManager > logger The logger to use with this manager. Fields _logger This field contains the logger for this manager. Declaration protected readonly ILogger<ITextMessageManager> _logger Field Value Type Description ILogger < ITextMessageManager > _managerOptions This field contains the options for this manager. Declaration protected readonly TextMessageManagerOptions? _managerOptions Field Value Type Description System.Nullable < TextMessageManagerOptions > _textMessageRepository This field contains the repository for this manager. Declaration protected readonly ITextMessageRepository _textMessageRepository Field Value Type Description ITextMessageRepository Methods AnyAsync(CancellationToken) Declaration public virtual async Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Boolean > CountAsync(CancellationToken) Declaration public virtual async Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Int64 > CreateAsync(TextMessage, String, CancellationToken) Declaration public virtual async Task<TextMessage> CreateAsync(TextMessage textMessage, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description TextMessage textMessage System.String userName CancellationToken cancellationToken Returns Type Description Task < TextMessage > FindAllAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<TextMessage>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < TextMessage >> FindByIdAsync(Int64, CancellationToken) Declaration public virtual async Task<TextMessage?> FindByIdAsync(long id, CancellationToken cancellationToken = null) Parameters Type Name Description System.Int64 id CancellationToken cancellationToken Returns Type Description Task < System.Nullable < TextMessage >> FindByKeyAsync(String, CancellationToken) Declaration public virtual async Task<TextMessage?> FindByKeyAsync(string messageKey, CancellationToken cancellationToken = null) Parameters Type Name Description System.String messageKey CancellationToken cancellationToken Returns Type Description Task < System.Nullable < TextMessage >> UpdateAsync(TextMessage, String, CancellationToken) Declaration public virtual async Task<TextMessage> UpdateAsync(TextMessage textMessage, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description TextMessage textMessage System.String userName CancellationToken cancellationToken Returns Type Description Task < TextMessage > Implements ITextMessageManager"
  },
  "api/CG.Purple.Models.Attachment.html": {
    "href": "api/CG.Purple.Models.Attachment.html",
    "title": "Class Attachment",
    "keywords": "Class Attachment This class represents a message attachment model. Inheritance System.Object ModelBase Attachment Inherited Members ModelBase.CreatedBy ModelBase.CreatedOnUtc ModelBase.LastUpdatedBy ModelBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public class Attachment : ModelBase Properties Data This property contains the bits for the attachment. Declaration public byte[] Data { get; set; } Property Value Type Description System.Byte [] Id This property contains the unique identifier for the attachment. Declaration public long Id { get; set; } Property Value Type Description System.Int64 Length This property contains the length, in bits, for the attachment. Declaration public long Length { get; set; } Property Value Type Description System.Int64 Message This property contains the associated message. Declaration [Required] public virtual Message Message { get; set; } Property Value Type Description Message MimeType This property contains the associated MIME type. Declaration [Required] public virtual MimeType MimeType { get; set; } Property Value Type Description MimeType OriginalFileName This property contains the original file name for the attachment. Declaration [MaxLength(260)] public string OriginalFileName { get; set; } Property Value Type Description System.String Extension Methods AttachmentExtensions001.SafeOriginalFileName(Attachment)"
  },
  "api/CG.Purple.Models.AttachmentExtensions001.html": {
    "href": "api/CG.Purple.Models.AttachmentExtensions001.html",
    "title": "Class AttachmentExtensions001",
    "keywords": "Class AttachmentExtensions001 This class contains extension methods related to the Attachment type. Inheritance System.Object AttachmentExtensions001 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Host.dll Syntax static class AttachmentExtensions001 Methods SafeOriginalFileName(Attachment) This method returns a non-null file name for the given Attachment object. Declaration public static string SafeOriginalFileName(this Attachment attachment) Parameters Type Name Description Attachment attachment The attachment to use for the operation. Returns Type Description System.String A rendering of the property that is safe to use in a Blazor page."
  },
  "api/CG.Purple.Models.FileType.html": {
    "href": "api/CG.Purple.Models.FileType.html",
    "title": "Class FileType",
    "keywords": "Class FileType This class represents a file type model. Inheritance System.Object ModelBase FileType Inherited Members ModelBase.CreatedBy ModelBase.CreatedOnUtc ModelBase.LastUpdatedBy ModelBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public class FileType : ModelBase Properties Extension This property contains the extension for the file type. Declaration public string Extension { get; set; } Property Value Type Description System.String Id This property contains the unique identifier for the file type. Declaration public int Id { get; set; } Property Value Type Description System.Int32 MimeType This property contains the associated MIME type. Declaration public virtual MimeType MimeType { get; set; } Property Value Type Description MimeType"
  },
  "api/CG.Purple.Models.FileTypeEqualityComparer.html": {
    "href": "api/CG.Purple.Models.FileTypeEqualityComparer.html",
    "title": "Class FileTypeEqualityComparer",
    "keywords": "Class FileTypeEqualityComparer This class is a custom equality comparer for the FileType type. Inheritance System.Object FileTypeEqualityComparer Namespace : CG.Purple.Models Assembly : CG.Purple.Abstractions.dll Syntax public class FileTypeEqualityComparer : IEqualityComparer<FileType> Constructors FileTypeEqualityComparer() This constructor creates a new instance of the FileTypeEqualityComparer class. Declaration FileTypeEqualityComparer() Fields _instance This field contains the shared instance. Declaration static FileTypeEqualityComparer _instance Field Value Type Description FileTypeEqualityComparer Methods Equals(FileType, FileType) Declaration public bool Equals(FileType x, FileType y) Parameters Type Name Description FileType x FileType y Returns Type Description System.Boolean GetHashCode(FileType) Declaration public int GetHashCode(FileType obj) Parameters Type Name Description FileType obj Returns Type Description System.Int32 Instance() This method returns the singleton FileTypeEqualityComparer instance. Declaration public static FileTypeEqualityComparer Instance() Returns Type Description FileTypeEqualityComparer An FileTypeEqualityComparer instance."
  },
  "api/CG.Purple.Models.html": {
    "href": "api/CG.Purple.Models.html",
    "title": "Namespace CG.Purple.Models",
    "keywords": "Namespace CG.Purple.Models Classes Attachment This class represents a message attachment model. AttachmentExtensions001 This class contains extension methods related to the Attachment type. FileType This class represents a file type model. FileTypeEqualityComparer This class is a custom equality comparer for the FileType type. MailMessage This class represents a notification email model. MailMessageExtensions001 This class contains extension methods related to the MailMessage type. Message This class represents a notification message model. MessageEqualityComparer This class is a custom equality comparer for the Message type. MessageLog This class represents a message processing event model. MessageProperty This class represents a message property model. MessagePropertyEqualityComparer This class is a custom equality comparer for the MessageProperty type. MimeType This class represents a MIME type model. MimeTypeExtensions001 This class contains extension methods related to the MimeType type. ModelBase This class represents a base model. ParameterType This class represents a provider parameter type model. ParameterTypeEqualityComparer This class is a custom equality comparer for the ParameterType type. ParameterTypeExtensions001 This class contains extension methods related to the ParameterType type. ProcessLogExtensions001 This class contains extension methods related to the MessageLog type. PropertyType This class represents a property type model. PropertyTypeEqualityComparer This class is a custom equality comparer for the PropertyType type. PropertyTypeExtensions001 This class contains extension methods related to the PropertyType type. ProviderParameter This class represents a provider parameter model. ProviderType This class represents a message provider type model. ProviderTypeExtensions001 This class contains extension methods related to the ProviderType type. TextMessage This class represents a notification text model. Enums MessageEvent This enumeration represents the valid message events. MessageState This enumeration represents the valid message states. MessageType This enumeration represents the valid message types."
  },
  "api/CG.Purple.Models.MailMessage.html": {
    "href": "api/CG.Purple.Models.MailMessage.html",
    "title": "Class MailMessage",
    "keywords": "Class MailMessage This class represents a notification email model. Inheritance System.Object ModelBase Message MailMessage Inherited Members Message.Id Message.MessageKey Message.From Message.MessageType Message.MessageState Message.IsDisabled Message.Priority Message.ErrorCount Message.MaxErrors Message.ProcessAfterUtc Message.ProviderType Message.ArchiveAfterUtc Message.MessageProperties Message.Attachments ModelBase.CreatedBy ModelBase.CreatedOnUtc ModelBase.LastUpdatedBy ModelBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public class MailMessage : Message Properties BCC This property contains the BCC address for the message. Declaration public string BCC { get; set; } Property Value Type Description System.String Body This property contains the body for the message. Declaration public string Body { get; set; } Property Value Type Description System.String CC This property contains the CC address for the message. Declaration public string CC { get; set; } Property Value Type Description System.String IsHtml This property indicates whether the Body property contains formatted HTML, or not. Declaration public bool IsHtml { get; set; } Property Value Type Description System.Boolean Subject This property contains the subject for the message. Declaration public string Subject { get; set; } Property Value Type Description System.String To This property contains the to address for the message. Declaration public string To { get; set; } Property Value Type Description System.String Extension Methods MailMessageExtensions001.SafeSubject(MailMessage)"
  },
  "api/CG.Purple.Models.MailMessageExtensions001.html": {
    "href": "api/CG.Purple.Models.MailMessageExtensions001.html",
    "title": "Class MailMessageExtensions001",
    "keywords": "Class MailMessageExtensions001 This class contains extension methods related to the MailMessage type. Inheritance System.Object MailMessageExtensions001 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Host.dll Syntax static class MailMessageExtensions001 Methods SafeSubject(MailMessage) This method returns a safe subject for the given MailMessage object. Declaration public static string SafeSubject(this MailMessage mailMessage) Parameters Type Name Description MailMessage mailMessage The mail message to use for the operation. Returns Type Description System.String A rendering of the property that is safe to use in a Blazor page."
  },
  "api/CG.Purple.Models.Message.html": {
    "href": "api/CG.Purple.Models.Message.html",
    "title": "Class Message",
    "keywords": "Class Message This class represents a notification message model. Inheritance System.Object ModelBase Message MailMessage TextMessage Inherited Members ModelBase.CreatedBy ModelBase.CreatedOnUtc ModelBase.LastUpdatedBy ModelBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public class Message : ModelBase Properties ArchiveAfterUtc This property indicates when the message should be archived. Declaration public DateTime? ArchiveAfterUtc { get; set; } Property Value Type Description System.Nullable < DateTime > Attachments This property contains the associated file attachments. Declaration public virtual ICollection<Attachment> Attachments { get; set; } Property Value Type Description ICollection < Attachment > ErrorCount This property indicates how many errors have occurred during the processing of this message. Declaration public int ErrorCount { get; set; } Property Value Type Description System.Int32 From This property contains the origin of the message. Declaration public string From { get; set; } Property Value Type Description System.String Id This property contains the unique identifier for the message. Declaration public long Id { get; set; } Property Value Type Description System.Int64 IsDisabled This property indicates the message has been disabled. Declaration public bool IsDisabled { get; set; } Property Value Type Description System.Boolean MaxErrors This property indicates the point at which we stop trying to process this message. Declaration public int MaxErrors { get; set; } Property Value Type Description System.Int32 MessageKey This property contains a unique key for the message. Declaration public string MessageKey { get; set; } Property Value Type Description System.String MessageProperties This property contains the associated message properties. Declaration public virtual ICollection<MessageProperty> MessageProperties { get; set; } Property Value Type Description ICollection < MessageProperty > MessageState This property contains the message state. Declaration public MessageState MessageState { get; set; } Property Value Type Description MessageState MessageType This property contains the message type. Declaration public MessageType MessageType { get; set; } Property Value Type Description MessageType Priority This property contains the relative priority of the message. Declaration public int Priority { get; set; } Property Value Type Description System.Int32 ProcessAfterUtc This property indicates when the message should be sent through the pipeline for processing. Declaration public DateTime? ProcessAfterUtc { get; set; } Property Value Type Description System.Nullable < DateTime > ProviderType This property contains an associated provider type. Declaration public virtual ProviderType ProviderType { get; set; } Property Value Type Description ProviderType"
  },
  "api/CG.Purple.Models.MessageEqualityComparer.html": {
    "href": "api/CG.Purple.Models.MessageEqualityComparer.html",
    "title": "Class MessageEqualityComparer",
    "keywords": "Class MessageEqualityComparer This class is a custom equality comparer for the Message type. Inheritance System.Object MessageEqualityComparer Namespace : CG.Purple.Models Assembly : CG.Purple.Abstractions.dll Syntax public class MessageEqualityComparer : IEqualityComparer<Message> Constructors MessageEqualityComparer() This constructor creates a new instance of the MessageEqualityComparer class. Declaration MessageEqualityComparer() Fields _instance This field contains the shared instance. Declaration static MessageEqualityComparer _instance Field Value Type Description MessageEqualityComparer Methods Equals(Message, Message) Declaration public bool Equals(Message x, Message y) Parameters Type Name Description Message x Message y Returns Type Description System.Boolean GetHashCode(Message) Declaration public int GetHashCode(Message obj) Parameters Type Name Description Message obj Returns Type Description System.Int32 Instance() This method returns the singleton MessageEqualityComparer instance. Declaration public static MessageEqualityComparer Instance() Returns Type Description MessageEqualityComparer An MessageEqualityComparer instance."
  },
  "api/CG.Purple.Models.MessageEvent.html": {
    "href": "api/CG.Purple.Models.MessageEvent.html",
    "title": "Enum MessageEvent",
    "keywords": "Enum MessageEvent This enumeration represents the valid message events. Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public enum MessageEvent Fields Name Description Assigned This enumeration represents an assign processor event. Disabled This enumeration represents a message disable event. Enabled This enumeration represents an message enable event. Error This enumeration represents a processed related error event. Reset This enumeration represents a reset message event. Sent This enumeration represents a successful message send event. Stored This enumeration represents a message storage event."
  },
  "api/CG.Purple.Models.MessageLog.html": {
    "href": "api/CG.Purple.Models.MessageLog.html",
    "title": "Class MessageLog",
    "keywords": "Class MessageLog This class represents a message processing event model. Inheritance System.Object ModelBase MessageLog Inherited Members ModelBase.CreatedBy ModelBase.CreatedOnUtc ModelBase.LastUpdatedBy ModelBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public class MessageLog : ModelBase Properties AfterState This property contains the state of the message after the event took place. Declaration public MessageState? AfterState { get; set; } Property Value Type Description System.Nullable < MessageState > BeforeState This property contains the state of the message before the event took place. Declaration public MessageState? BeforeState { get; set; } Property Value Type Description System.Nullable < MessageState > Error This property contains error data associated with the event. Declaration public string Error { get; set; } Property Value Type Description System.String Id This property contains the unique identifier for the entry. Declaration public long Id { get; set; } Property Value Type Description System.Int64 Message This property contains the associate message. Declaration public virtual Message Message { get; set; } Property Value Type Description Message MessageEvent This property contains the associate message processing event. Declaration public MessageEvent MessageEvent { get; set; } Property Value Type Description MessageEvent ProviderType This property contains the associated provider type. Declaration public virtual ProviderType ProviderType { get; set; } Property Value Type Description ProviderType Extension Methods ProcessLogExtensions001.SafeBeforeState(MessageLog) ProcessLogExtensions001.SafeAfterState(MessageLog) ProcessLogExtensions001.SafeProviderType(MessageLog) ProcessLogExtensions001.SafeError(MessageLog) ProcessLogExtensions001.SafeMessage(MessageLog)"
  },
  "api/CG.Purple.Models.MessageProperty.html": {
    "href": "api/CG.Purple.Models.MessageProperty.html",
    "title": "Class MessageProperty",
    "keywords": "Class MessageProperty This class represents a message property model. Inheritance System.Object ModelBase MessageProperty Inherited Members ModelBase.CreatedBy ModelBase.CreatedOnUtc ModelBase.LastUpdatedBy ModelBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public class MessageProperty : ModelBase Properties Message This property contains the associate message. Declaration [Required] public virtual Message Message { get; set; } Property Value Type Description Message PropertyType This property contains the associate property type. Declaration [Required] public virtual PropertyType PropertyType { get; set; } Property Value Type Description PropertyType Value This property contains the value for the message property. Declaration [Required] public string Value { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Models.MessagePropertyEqualityComparer.html": {
    "href": "api/CG.Purple.Models.MessagePropertyEqualityComparer.html",
    "title": "Class MessagePropertyEqualityComparer",
    "keywords": "Class MessagePropertyEqualityComparer This class is a custom equality comparer for the MessageProperty type. Inheritance System.Object MessagePropertyEqualityComparer Namespace : CG.Purple.Models Assembly : CG.Purple.Abstractions.dll Syntax public class MessagePropertyEqualityComparer : IEqualityComparer<MessageProperty> Constructors MessagePropertyEqualityComparer() This constructor creates a new instance of the MessagePropertyEqualityComparer class. Declaration MessagePropertyEqualityComparer() Fields _instance This field contains the shared instance. Declaration static MessagePropertyEqualityComparer _instance Field Value Type Description MessagePropertyEqualityComparer Methods Equals(MessageProperty, MessageProperty) Declaration public bool Equals(MessageProperty x, MessageProperty y) Parameters Type Name Description MessageProperty x MessageProperty y Returns Type Description System.Boolean GetHashCode(MessageProperty) Declaration public int GetHashCode(MessageProperty obj) Parameters Type Name Description MessageProperty obj Returns Type Description System.Int32 Instance() This method returns the singleton MessagePropertyEqualityComparer instance. Declaration public static MessagePropertyEqualityComparer Instance() Returns Type Description MessagePropertyEqualityComparer An MessagePropertyEqualityComparer instance."
  },
  "api/CG.Purple.Models.MessageState.html": {
    "href": "api/CG.Purple.Models.MessageState.html",
    "title": "Enum MessageState",
    "keywords": "Enum MessageState This enumeration represents the valid message states. Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public enum MessageState Fields Name Description Failed This enumeration represents a message that has failed to process. Pending This enumeration represents a message that has been stored, but not yet picked up for processing. Processing This enumeration represents a message that has been picked up for processing, but not yet sent. Sent This enumeration represents a message that has been sent."
  },
  "api/CG.Purple.Models.MessageType.html": {
    "href": "api/CG.Purple.Models.MessageType.html",
    "title": "Enum MessageType",
    "keywords": "Enum MessageType This enumeration represents the valid message types. Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public enum MessageType Fields Name Description Mail This enumeration represents a mail message. Text This enumeration represents a text message."
  },
  "api/CG.Purple.Models.MimeType.html": {
    "href": "api/CG.Purple.Models.MimeType.html",
    "title": "Class MimeType",
    "keywords": "Class MimeType This class represents a MIME type model. Inheritance System.Object ModelBase MimeType Inherited Members ModelBase.CreatedBy ModelBase.CreatedOnUtc ModelBase.LastUpdatedBy ModelBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public class MimeType : ModelBase Properties FileTypes This property contains the associated file types. Declaration public virtual ICollection<FileType> FileTypes { get; set; } Property Value Type Description ICollection < FileType > Id This property contains the unique identifier for the MIME type. Declaration public int Id { get; set; } Property Value Type Description System.Int32 SubType This property contains the MIME sub-type. Declaration public string SubType { get; set; } Property Value Type Description System.String Type This property contains the MIME type. Declaration public string Type { get; set; } Property Value Type Description System.String Extension Methods MimeTypeExtensions001.FullType(MimeType)"
  },
  "api/CG.Purple.Models.MimeTypeExtensions001.html": {
    "href": "api/CG.Purple.Models.MimeTypeExtensions001.html",
    "title": "Class MimeTypeExtensions001",
    "keywords": "Class MimeTypeExtensions001 This class contains extension methods related to the MimeType type. Inheritance System.Object MimeTypeExtensions001 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Host.dll Syntax static class MimeTypeExtensions001 Methods FullType(MimeType) This method returns the full type for the given MimeType object, in the format: type/subtype. Declaration public static string FullType(this MimeType mimeType) Parameters Type Name Description MimeType mimeType The mime type to use for the operation. Returns Type Description System.String A rendering of the property that is safe to use in a Blazor page."
  },
  "api/CG.Purple.Models.ModelBase.html": {
    "href": "api/CG.Purple.Models.ModelBase.html",
    "title": "Class ModelBase",
    "keywords": "Class ModelBase This class represents a base model. Inheritance System.Object ModelBase Attachment FileType Message MessageLog MessageProperty MimeType ParameterType PropertyType ProviderParameter ProviderType Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public class ModelBase Properties CreatedBy This property contains the name of the person who created the model. Declaration public string CreatedBy { get; set; } Property Value Type Description System.String CreatedOnUtc This property contains the date/time when the model was created. Declaration public DateTime CreatedOnUtc { get; set; } Property Value Type Description DateTime LastUpdatedBy This property contains the name of the last person to update the model. Declaration public string LastUpdatedBy { get; set; } Property Value Type Description System.String LastUpdatedOnUtc This property contains the date/time when the model was last updated. Declaration public DateTime? LastUpdatedOnUtc { get; set; } Property Value Type Description System.Nullable < DateTime >"
  },
  "api/CG.Purple.Models.ParameterType.html": {
    "href": "api/CG.Purple.Models.ParameterType.html",
    "title": "Class ParameterType",
    "keywords": "Class ParameterType This class represents a provider parameter type model. Inheritance System.Object ModelBase ParameterType Inherited Members ModelBase.CreatedBy ModelBase.CreatedOnUtc ModelBase.LastUpdatedBy ModelBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public class ParameterType : ModelBase Properties Description This property contains the description of the parameter type. Declaration public string Description { get; set; } Property Value Type Description System.String Id This property contains the unique identifier for the parameter type. Declaration public int Id { get; set; } Property Value Type Description System.Int32 Name This property contains the name of the parameter type. Declaration public string Name { get; set; } Property Value Type Description System.String Extension Methods ParameterTypeExtensions001.SafeDescription(ParameterType)"
  },
  "api/CG.Purple.Models.ParameterTypeEqualityComparer.html": {
    "href": "api/CG.Purple.Models.ParameterTypeEqualityComparer.html",
    "title": "Class ParameterTypeEqualityComparer",
    "keywords": "Class ParameterTypeEqualityComparer This class is a custom equality comparer for the ParameterType type. Inheritance System.Object ParameterTypeEqualityComparer Namespace : CG.Purple.Models Assembly : CG.Purple.Abstractions.dll Syntax public class ParameterTypeEqualityComparer : IEqualityComparer<ParameterType> Constructors ParameterTypeEqualityComparer() This constructor creates a new instance of the ParameterTypeEqualityComparer class. Declaration ParameterTypeEqualityComparer() Fields _instance This field contains the shared instance. Declaration static ParameterTypeEqualityComparer _instance Field Value Type Description ParameterTypeEqualityComparer Methods Equals(ParameterType, ParameterType) Declaration public bool Equals(ParameterType x, ParameterType y) Parameters Type Name Description ParameterType x ParameterType y Returns Type Description System.Boolean GetHashCode(ParameterType) Declaration public int GetHashCode(ParameterType obj) Parameters Type Name Description ParameterType obj Returns Type Description System.Int32 Instance() This method returns the singleton ParameterTypeEqualityComparer instance. Declaration public static ParameterTypeEqualityComparer Instance() Returns Type Description ParameterTypeEqualityComparer An ParameterTypeEqualityComparer instance."
  },
  "api/CG.Purple.Models.ParameterTypeExtensions001.html": {
    "href": "api/CG.Purple.Models.ParameterTypeExtensions001.html",
    "title": "Class ParameterTypeExtensions001",
    "keywords": "Class ParameterTypeExtensions001 This class contains extension methods related to the ParameterType type. Inheritance System.Object ParameterTypeExtensions001 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Host.dll Syntax static class ParameterTypeExtensions001 Methods SafeDescription(ParameterType) This method returns a safe description for the given ParameterType object. Declaration public static string SafeDescription(this ParameterType parameterType) Parameters Type Name Description ParameterType parameterType The parameter type to use for the operation. Returns Type Description System.String A rendering of the description that is safe to use in a Blazor page."
  },
  "api/CG.Purple.Models.ProcessLogExtensions001.html": {
    "href": "api/CG.Purple.Models.ProcessLogExtensions001.html",
    "title": "Class ProcessLogExtensions001",
    "keywords": "Class ProcessLogExtensions001 This class contains extension methods related to the MessageLog type. Inheritance System.Object ProcessLogExtensions001 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Host.dll Syntax static class ProcessLogExtensions001 Methods SafeAfterState(MessageLog) This method returns a safe AfterState for the given MessageLog object. Declaration public static string SafeAfterState(this MessageLog processLog) Parameters Type Name Description MessageLog processLog The process log to use for the operation. Returns Type Description System.String A rendering of the property that is safe to use in a Blazor page. SafeBeforeState(MessageLog) This method returns a safe BeforeState for the given MessageLog object. Declaration public static string SafeBeforeState(this MessageLog processLog) Parameters Type Name Description MessageLog processLog The process log to use for the operation. Returns Type Description System.String A rendering of the property that is safe to use in a Blazor page. SafeError(MessageLog) This method returns a safe Error for the given MessageLog object. Declaration public static string SafeError(this MessageLog processLog) Parameters Type Name Description MessageLog processLog The process log to use for the operation. Returns Type Description System.String A rendering of the property that is safe to use in a Blazor page. SafeMessage(MessageLog) This method returns a safe Message for the given MessageLog object. Declaration public static string SafeMessage(this MessageLog processLog) Parameters Type Name Description MessageLog processLog The process log to use for the operation. Returns Type Description System.String A rendering of the message that is safe to use in a Blazor page. SafeProviderType(MessageLog) This method returns a safe ProviderType for the given MessageLog object. Declaration public static string SafeProviderType(this MessageLog processLog) Parameters Type Name Description MessageLog processLog The process log to use for the operation. Returns Type Description System.String A rendering of the property that is safe to use in a Blazor page."
  },
  "api/CG.Purple.Models.PropertyType.html": {
    "href": "api/CG.Purple.Models.PropertyType.html",
    "title": "Class PropertyType",
    "keywords": "Class PropertyType This class represents a property type model. Inheritance System.Object ModelBase PropertyType Inherited Members ModelBase.CreatedBy ModelBase.CreatedOnUtc ModelBase.LastUpdatedBy ModelBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public class PropertyType : ModelBase Properties Description This property contains the description of the property type. Declaration public string Description { get; set; } Property Value Type Description System.String Id This property contains the unique identifier for the property type. Declaration public int Id { get; set; } Property Value Type Description System.Int32 Name This property contains the name of the property type. Declaration public string Name { get; set; } Property Value Type Description System.String Extension Methods PropertyTypeExtensions001.SafeDescription(PropertyType)"
  },
  "api/CG.Purple.Models.PropertyTypeEqualityComparer.html": {
    "href": "api/CG.Purple.Models.PropertyTypeEqualityComparer.html",
    "title": "Class PropertyTypeEqualityComparer",
    "keywords": "Class PropertyTypeEqualityComparer This class is a custom equality comparer for the PropertyType type. Inheritance System.Object PropertyTypeEqualityComparer Namespace : CG.Purple.Models Assembly : CG.Purple.Abstractions.dll Syntax public class PropertyTypeEqualityComparer : IEqualityComparer<PropertyType> Constructors PropertyTypeEqualityComparer() This constructor creates a new instance of the PropertyTypeEqualityComparer class. Declaration PropertyTypeEqualityComparer() Fields _instance This field contains the shared instance. Declaration static PropertyTypeEqualityComparer _instance Field Value Type Description PropertyTypeEqualityComparer Methods Equals(PropertyType, PropertyType) Declaration public bool Equals(PropertyType x, PropertyType y) Parameters Type Name Description PropertyType x PropertyType y Returns Type Description System.Boolean GetHashCode(PropertyType) Declaration public int GetHashCode(PropertyType obj) Parameters Type Name Description PropertyType obj Returns Type Description System.Int32 Instance() This method returns the singleton PropertyTypeEqualityComparer instance. Declaration public static PropertyTypeEqualityComparer Instance() Returns Type Description PropertyTypeEqualityComparer An PropertyTypeEqualityComparer instance."
  },
  "api/CG.Purple.Models.PropertyTypeExtensions001.html": {
    "href": "api/CG.Purple.Models.PropertyTypeExtensions001.html",
    "title": "Class PropertyTypeExtensions001",
    "keywords": "Class PropertyTypeExtensions001 This class contains extension methods related to the PropertyType type. Inheritance System.Object PropertyTypeExtensions001 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Host.dll Syntax static class PropertyTypeExtensions001 Methods SafeDescription(PropertyType) This method returns a safe description for the given PropertyType object. Declaration public static string SafeDescription(this PropertyType propertyType) Parameters Type Name Description PropertyType propertyType The property type to use for the operation. Returns Type Description System.String A rendering of the description that is safe to use in a Blazor page."
  },
  "api/CG.Purple.Models.ProviderParameter.html": {
    "href": "api/CG.Purple.Models.ProviderParameter.html",
    "title": "Class ProviderParameter",
    "keywords": "Class ProviderParameter This class represents a provider parameter model. Inheritance System.Object ModelBase ProviderParameter Inherited Members ModelBase.CreatedBy ModelBase.CreatedOnUtc ModelBase.LastUpdatedBy ModelBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public class ProviderParameter : ModelBase Properties IsReadOnly This property indicates the provider parameter is not editable. Declaration public bool IsReadOnly { get; set; } Property Value Type Description System.Boolean ParameterType This property contains the associate parameter type. Declaration public virtual ParameterType ParameterType { get; set; } Property Value Type Description ParameterType ProviderType This property contains the associate provider type. Declaration public virtual ProviderType ProviderType { get; set; } Property Value Type Description ProviderType Value This property contains the value for the provider parameter. Declaration public string Value { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Models.ProviderType.html": {
    "href": "api/CG.Purple.Models.ProviderType.html",
    "title": "Class ProviderType",
    "keywords": "Class ProviderType This class represents a message provider type model. Inheritance System.Object ModelBase ProviderType Inherited Members ModelBase.CreatedBy ModelBase.CreatedOnUtc ModelBase.LastUpdatedBy ModelBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public class ProviderType : ModelBase Properties CanProcessEmails This property indicates whether this provider type can process emails. Declaration public bool CanProcessEmails { get; set; } Property Value Type Description System.Boolean CanProcessTexts This property indicates whether this provider type can process texts. Declaration public bool CanProcessTexts { get; set; } Property Value Type Description System.Boolean Description This property contains the description of the provider type. Declaration public string Description { get; set; } Property Value Type Description System.String FactoryType This property contains the .NET type for the associated provider. Declaration public string FactoryType { get; set; } Property Value Type Description System.String Id This property contains the unique identifier for the provider type. Declaration public int Id { get; set; } Property Value Type Description System.Int32 IsDisabled This property indicates the provider type has been disabled. Declaration public bool IsDisabled { get; set; } Property Value Type Description System.Boolean Name This property contains the name of the provider type. Declaration public string Name { get; set; } Property Value Type Description System.String Parameters This property contains the associated provider parameters. Declaration public virtual ICollection<ProviderParameter> Parameters { get; set; } Property Value Type Description ICollection < ProviderParameter > Priority This property contains the relative priority for this provider type. Declaration public int Priority { get; set; } Property Value Type Description System.Int32 Extension Methods ProviderTypeExtensions001.SafeDescription(ProviderType)"
  },
  "api/CG.Purple.Models.ProviderTypeExtensions001.html": {
    "href": "api/CG.Purple.Models.ProviderTypeExtensions001.html",
    "title": "Class ProviderTypeExtensions001",
    "keywords": "Class ProviderTypeExtensions001 This class contains extension methods related to the ProviderType type. Inheritance System.Object ProviderTypeExtensions001 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Host.dll Syntax static class ProviderTypeExtensions001 Methods SafeDescription(ProviderType) This method returns a safe description for the given ProviderType object. Declaration public static string SafeDescription(this ProviderType providerType) Parameters Type Name Description ProviderType providerType The provider type to use for the operation. Returns Type Description System.String A rendering of the description that is safe to use in a Blazor page."
  },
  "api/CG.Purple.Models.TextMessage.html": {
    "href": "api/CG.Purple.Models.TextMessage.html",
    "title": "Class TextMessage",
    "keywords": "Class TextMessage This class represents a notification text model. Inheritance System.Object ModelBase Message TextMessage Inherited Members Message.Id Message.MessageKey Message.From Message.MessageType Message.MessageState Message.IsDisabled Message.Priority Message.ErrorCount Message.MaxErrors Message.ProcessAfterUtc Message.ProviderType Message.ArchiveAfterUtc Message.MessageProperties Message.Attachments ModelBase.CreatedBy ModelBase.CreatedOnUtc ModelBase.LastUpdatedBy ModelBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Models Assembly : CG.Purple.Primitives.dll Syntax public class TextMessage : Message Properties Body This property contains the body for the message. Declaration public string Body { get; set; } Property Value Type Description System.String To This property contains the to address for the message. Declaration public string To { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Options.BllOptions.html": {
    "href": "api/CG.Purple.Options.BllOptions.html",
    "title": "Class BllOptions",
    "keywords": "Class BllOptions This class contains configuration settings for the Purple business logic layer. Inheritance System.Object BllOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Options Assembly : CG.Purple.dll Syntax public class BllOptions Properties MailMessageManager This property contains the configuration options for the manager. Declaration public virtual MailMessageManagerOptions MailMessageManager { get; set; } Property Value Type Description MailMessageManagerOptions TextMessageManager This property contains the configuration options for the manager. Declaration public virtual TextMessageManagerOptions TextMessageManager { get; set; } Property Value Type Description TextMessageManagerOptions"
  },
  "api/CG.Purple.Options.html": {
    "href": "api/CG.Purple.Options.html",
    "title": "Namespace CG.Purple.Options",
    "keywords": "Namespace CG.Purple.Options Classes BllOptions This class contains configuration settings for the Purple business logic layer. MailMessageManagerOptions This class contains configuration settings for the manager. MessageManagerOptions This class contains configuration settings that are common to all message managers. TextMessageManagerOptions This class contains configuration settings for the manager."
  },
  "api/CG.Purple.Options.MailMessageManagerOptions.html": {
    "href": "api/CG.Purple.Options.MailMessageManagerOptions.html",
    "title": "Class MailMessageManagerOptions",
    "keywords": "Class MailMessageManagerOptions This class contains configuration settings for the manager. Inheritance System.Object MessageManagerOptions MailMessageManagerOptions Inherited Members MessageManagerOptions.DefaultProcessDelay MessageManagerOptions.DefaultArchiveDelay System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Options Assembly : CG.Purple.dll Syntax public class MailMessageManagerOptions : MessageManagerOptions"
  },
  "api/CG.Purple.Options.MessageManagerOptions.html": {
    "href": "api/CG.Purple.Options.MessageManagerOptions.html",
    "title": "Class MessageManagerOptions",
    "keywords": "Class MessageManagerOptions This class contains configuration settings that are common to all message managers. Inheritance System.Object MessageManagerOptions MailMessageManagerOptions TextMessageManagerOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Options Assembly : CG.Purple.dll Syntax public abstract class MessageManagerOptions Properties DefaultArchiveDelay This property contains the default archiving delay that is added to all new messages, as they are created. Declaration public TimeSpan? DefaultArchiveDelay { get; set; } Property Value Type Description System.Nullable < TimeSpan > DefaultProcessDelay This property contains the default processing delay that may be added to all new messages, as they are created. Declaration public TimeSpan? DefaultProcessDelay { get; set; } Property Value Type Description System.Nullable < TimeSpan >"
  },
  "api/CG.Purple.Options.TextMessageManagerOptions.html": {
    "href": "api/CG.Purple.Options.TextMessageManagerOptions.html",
    "title": "Class TextMessageManagerOptions",
    "keywords": "Class TextMessageManagerOptions This class contains configuration settings for the manager. Inheritance System.Object MessageManagerOptions TextMessageManagerOptions Inherited Members MessageManagerOptions.DefaultProcessDelay MessageManagerOptions.DefaultArchiveDelay System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Options Assembly : CG.Purple.dll Syntax public class TextMessageManagerOptions : MessageManagerOptions"
  },
  "api/CG.Purple.Providers.DoNothing.DoNothingProvider.html": {
    "href": "api/CG.Purple.Providers.DoNothing.DoNothingProvider.html",
    "title": "Class DoNothingProvider",
    "keywords": "Class DoNothingProvider This class is a \"do nothing\" implementation of the IMessageProvider interface. Inheritance System.Object MessageProviderBase < DoNothingProvider > DoNothingProvider Implements IMessageProvider Inherited Members MessageProviderBase<DoNothingProvider>._statusHub MessageProviderBase<DoNothingProvider>._messageManager MessageProviderBase<DoNothingProvider>._messageLogManager MessageProviderBase<DoNothingProvider>._logger MessageProviderBase<DoNothingProvider>._random MessageProviderBase<DoNothingProvider>.MessageIsWrongTypeAsync(Message, CancellationToken) MessageProviderBase<DoNothingProvider>.UnableToFindMailMessageAsync(Message, CancellationToken) MessageProviderBase<DoNothingProvider>.UnableToFindTextMessageAsync(Message, CancellationToken) MessageProviderBase<DoNothingProvider>.MessageWasSentAsync(Message, CancellationToken) MessageProviderBase<DoNothingProvider>.MessageFailedToSendAsync(String, Message, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Providers.DoNothing Assembly : CG.Purple.Providers.DoNothing.dll Syntax class DoNothingProvider : MessageProviderBase<DoNothingProvider>, IMessageProvider Constructors DoNothingProvider(StatusHub, IMessageManager, IMessageLogManager, ILogger<DoNothingProvider>) This constructor creates a new instance of the DoNothingProvider class. Declaration public DoNothingProvider(StatusHub statusHub, IMessageManager messageManager, IMessageLogManager processLogManager, ILogger<DoNothingProvider> logger) Parameters Type Name Description StatusHub statusHub The SignalR status hub to use with this provider. IMessageManager messageManager The message manager to use with this provider. IMessageLogManager processLogManager The process log manager to use with this provider. ILogger < DoNothingProvider > logger The logger to use with this provider. Methods ProcessMessagesAsync(IEnumerable<Message>, ProviderType, CancellationToken) Declaration public override async Task ProcessMessagesAsync(IEnumerable<Message> messages, ProviderType providerType, CancellationToken cancellationToken = null) Parameters Type Name Description IEnumerable < Message > messages ProviderType providerType CancellationToken cancellationToken Returns Type Description Task Implements IMessageProvider"
  },
  "api/CG.Purple.Providers.DoNothing.html": {
    "href": "api/CG.Purple.Providers.DoNothing.html",
    "title": "Namespace CG.Purple.Providers.DoNothing",
    "keywords": "Namespace CG.Purple.Providers.DoNothing Classes DoNothingProvider This class is a \"do nothing\" implementation of the IMessageProvider interface."
  },
  "api/CG.Purple.Providers.html": {
    "href": "api/CG.Purple.Providers.html",
    "title": "Namespace CG.Purple.Providers",
    "keywords": "Namespace CG.Purple.Providers Classes MessageExtensions001 This class contains extension methods related to the type. MessageProviderBase<T> This class is a base implementation of the IMessageProvider interface. MessageProviderFactory This class is a default implementation of the IMessageProviderFactory interface. ProviderException This class represents a message provider related exception. StatusHub This class is a SignalR hub for the status back channel. Interfaces IMessageProvider This interface represents an object that integrates with third-party message providers, such as SMTP, or SendGrid. IMessageProviderFactory This interface represents an object that creates IMessageProvider instances, at runtime."
  },
  "api/CG.Purple.Providers.IMessageProvider.html": {
    "href": "api/CG.Purple.Providers.IMessageProvider.html",
    "title": "Interface IMessageProvider",
    "keywords": "Interface IMessageProvider This interface represents an object that integrates with third-party message providers, such as SMTP, or SendGrid. Namespace : CG.Purple.Providers Assembly : CG.Purple.Abstractions.dll Syntax public interface IMessageProvider Methods ProcessMessagesAsync(IEnumerable<Message>, ProviderType, CancellationToken) This method sends messages to an external provider. Declaration Task ProcessMessagesAsync(IEnumerable<Message> messages, ProviderType providerType, CancellationToken cancellationToken = null) Parameters Type Name Description IEnumerable < Message > messages The messages to use for the operation. ProviderType providerType The provider type to use for the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition ProviderException This exception is thrown whenever the provider fails to complete the operation."
  },
  "api/CG.Purple.Providers.IMessageProviderFactory.html": {
    "href": "api/CG.Purple.Providers.IMessageProviderFactory.html",
    "title": "Interface IMessageProviderFactory",
    "keywords": "Interface IMessageProviderFactory This interface represents an object that creates IMessageProvider instances, at runtime. Namespace : CG.Purple.Providers Assembly : CG.Purple.Abstractions.dll Syntax public interface IMessageProviderFactory Methods CreateAsync(ProviderType, CancellationToken) This method creates an IMessageProvider instance from the given object. Declaration Task<IMessageProvider> CreateAsync(ProviderType providerType, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderType providerType The provider type to use for the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IMessageProvider > A task to perform the operation that returns a IMessageProvider instance, or NULL if the operation cannot be completed."
  },
  "api/CG.Purple.Providers.MessageExtensions001.html": {
    "href": "api/CG.Purple.Providers.MessageExtensions001.html",
    "title": "Class MessageExtensions001",
    "keywords": "Class MessageExtensions001 This class contains extension methods related to the type. Inheritance System.Object MessageExtensions001 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Providers Assembly : CG.Purple.Abstractions.dll Syntax public static class MessageExtensions001 Methods ToFailedStateAsync(Message, IMessageManager, IMessageLogManager, String, String, CancellationToken) This method transitions the given to a state, and records the event in the processing log. Declaration public static async Task ToFailedStateAsync(this Message message, IMessageManager messageManager, IMessageLogManager messageLogManager, string errorMessage, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description Message message The message to use for the operation. IMessageManager messageManager The message manager to use for the operation. IMessageLogManager messageLogManager The message log manager to use for the operation. System.String errorMessage The error message to use for the operation. System.String userName The name of the user performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more arguments are missing, or invalid. ToPendingStateAsync(Message, IMessageManager, IMessageLogManager, String, CancellationToken) This method transitions the given to a state, clears any currently assigned provider type, and records the event in the message log. Declaration public static async Task ToPendingStateAsync(this Message message, IMessageManager messageManager, IMessageLogManager messageLogManager, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description Message message The message to use for the operation. IMessageManager messageManager The message manager to use for the operation. IMessageLogManager messageLogManager The message log manager to use for the operation. System.String userName The name of the user performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more arguments are missing, or invalid. ToProcessingStateAsync(Message, IMessageManager, IMessageLogManager, ProviderType, String, CancellationToken) This method transitions the given to a state, and records the event in the processing log. Declaration public static async Task ToProcessingStateAsync(this Message message, IMessageManager messageManager, IMessageLogManager messageLogManager, ProviderType assignedProviderType, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description Message message The message to use for the operation. IMessageManager messageManager The message manager to use for the operation. IMessageLogManager messageLogManager The message log manager to use for the operation. ProviderType assignedProviderType The assigned provider type to use for the operation. System.String userName The name of the user performing the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more arguments are missing, or invalid."
  },
  "api/CG.Purple.Providers.MessageProviderBase-1.html": {
    "href": "api/CG.Purple.Providers.MessageProviderBase-1.html",
    "title": "Class MessageProviderBase<T>",
    "keywords": "Class MessageProviderBase<T> This class is a base implementation of the IMessageProvider interface. Inheritance System.Object MessageProviderBase<T> DoNothingProvider SendGridProvider SmtpProvider TwillioProvider Implements IMessageProvider Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Providers Assembly : CG.Purple.Providers.dll Syntax public abstract class MessageProviderBase<T> : IMessageProvider where T : MessageProviderBase<T> Type Parameters Name Description T Constructors MessageProviderBase(StatusHub, IMessageManager, IMessageLogManager, ILogger<T>) This constructor create a new instance of the MessageProviderBase<T> class. Declaration protected MessageProviderBase(StatusHub statusHub, IMessageManager messageManager, IMessageLogManager messageLogManager, ILogger<T> logger) Parameters Type Name Description StatusHub statusHub The SignalR status hub to use with this provider. IMessageManager messageManager The message manager to use with this provider. IMessageLogManager messageLogManager The message log manager to use with this provider. ILogger <T> logger The logger to use with this provider. Fields _logger This field contains the logger for this provider. Declaration protected readonly ILogger<T> _logger Field Value Type Description ILogger <T> _messageLogManager This field contains the message log manager for this provider. Declaration protected readonly IMessageLogManager _messageLogManager Field Value Type Description IMessageLogManager _messageManager This field contains the message manager for this provider. Declaration protected readonly IMessageManager _messageManager Field Value Type Description IMessageManager _random This field contains the random number generator for this provider. Declaration protected readonly RandomNumberGenerator _random Field Value Type Description RandomNumberGenerator _statusHub This field contains the SignalR status hub for this provider. Declaration protected readonly StatusHub _statusHub Field Value Type Description StatusHub Methods MessageFailedToSendAsync(String, Message, CancellationToken) This method sets the given message to a 'Failed' state, bumps the error count, clears any previously assigned provider, and logs the event. Declaration protected virtual async Task MessageFailedToSendAsync(string providerMessage, Message message, CancellationToken cancellationToken = null) Parameters Type Name Description System.String providerMessage The provider message to use for the operation. Message message The message to use for the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. MessageIsWrongTypeAsync(Message, CancellationToken) This method sets the given message to a 'Failed' state, resets any associated provider type, increments the error count on the message, and logs the error. Declaration protected virtual async Task MessageIsWrongTypeAsync(Message message, CancellationToken cancellationToken = null) Parameters Type Name Description Message message The message to use for the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. MessageWasSentAsync(Message, CancellationToken) This method sets the given message to a 'Sent' state and logs the event. Declaration protected virtual async Task MessageWasSentAsync(Message message, CancellationToken cancellationToken = null) Parameters Type Name Description Message message The message to use for the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. ProcessMessagesAsync(IEnumerable<Message>, ProviderType, CancellationToken) Declaration public abstract Task ProcessMessagesAsync(IEnumerable<Message> messages, ProviderType providerType, CancellationToken cancellationToken = null) Parameters Type Name Description IEnumerable < Message > messages ProviderType providerType CancellationToken cancellationToken Returns Type Description Task UnableToFindMailMessageAsync(Message, CancellationToken) This method sets the given message to a 'Failed' state, resets any associated provider type, increments the error count on the message, and logs the error. Declaration protected virtual async Task UnableToFindMailMessageAsync(Message message, CancellationToken cancellationToken = null) Parameters Type Name Description Message message The message to use for the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. UnableToFindTextMessageAsync(Message, CancellationToken) This method sets the given message to a 'Failed' state, resets any associated provider type, increments the error count on the message, and logs the error. Declaration protected virtual async Task UnableToFindTextMessageAsync(Message message, CancellationToken cancellationToken = null) Parameters Type Name Description Message message The message to use for the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Implements IMessageProvider"
  },
  "api/CG.Purple.Providers.MessageProviderFactory.html": {
    "href": "api/CG.Purple.Providers.MessageProviderFactory.html",
    "title": "Class MessageProviderFactory",
    "keywords": "Class MessageProviderFactory This class is a default implementation of the IMessageProviderFactory interface. Inheritance System.Object MessageProviderFactory Implements IMessageProviderFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Providers Assembly : CG.Purple.dll Syntax class MessageProviderFactory : IMessageProviderFactory Constructors MessageProviderFactory(IServiceProvider, ILogger<IMessageProviderFactory>) This constructor creates a new instance of the MessageProviderFactory class. Declaration public MessageProviderFactory(IServiceProvider serviceProvider, ILogger<IMessageProviderFactory> logger) Parameters Type Name Description IServiceProvider serviceProvider The service provider to use with this factory. ILogger < IMessageProviderFactory > logger The logger to use with this factory. Fields _logger This field contains the logger for this factory. Declaration protected readonly ILogger<IMessageProviderFactory> _logger Field Value Type Description ILogger < IMessageProviderFactory > _serviceProvider This field contains the service provider for this factory. Declaration protected readonly IServiceProvider _serviceProvider Field Value Type Description IServiceProvider Methods CreateAsync(ProviderType, CancellationToken) Declaration public Task<IMessageProvider> CreateAsync(ProviderType providerType, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderType providerType CancellationToken cancellationToken Returns Type Description Task < IMessageProvider > Implements IMessageProviderFactory"
  },
  "api/CG.Purple.Providers.Models.html": {
    "href": "api/CG.Purple.Providers.Models.html",
    "title": "Namespace CG.Purple.Providers.Models",
    "keywords": "Namespace CG.Purple.Providers.Models Classes StatusNotification This class represents a status notification for a message."
  },
  "api/CG.Purple.Providers.Models.StatusNotification.html": {
    "href": "api/CG.Purple.Providers.Models.StatusNotification.html",
    "title": "Class StatusNotification",
    "keywords": "Class StatusNotification This class represents a status notification for a message. Inheritance System.Object StatusNotification Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Providers.Models Assembly : CG.Purple.Providers.dll Syntax public class StatusNotification Properties Error This property contains the error when the message failed to send. Declaration public string Error { get; set; } Property Value Type Description System.String MessageKey This property contains the key for the message. Declaration public string MessageKey { get; set; } Property Value Type Description System.String Sent This property indicates whether the message was sent. Declaration public bool Sent { get; set; } Property Value Type Description System.Boolean"
  },
  "api/CG.Purple.Providers.ProviderException.html": {
    "href": "api/CG.Purple.Providers.ProviderException.html",
    "title": "Class ProviderException",
    "keywords": "Class ProviderException This class represents a message provider related exception. Inheritance System.Object ProviderException Namespace : CG.Purple.Providers Assembly : CG.Purple.Primitives.dll Syntax public class ProviderException : Exception Constructors ProviderException() This constructor creates a new instance of the ProviderException class. Declaration public ProviderException() ProviderException(Message, ProviderType, String) This constructor creates a new instance of the ProviderException class. Declaration public ProviderException(Message relatedMessage, ProviderType relatedProvider, string message) Parameters Type Name Description Message relatedMessage The related message to use for the exception. ProviderType relatedProvider The related provider to use for the exception. System.String message The message to use for the exception. ProviderException(Message, ProviderType, String, Exception) This constructor creates a new instance of the ProviderException class. Declaration public ProviderException(Message relatedMessage, ProviderType relatedProvider, string message, Exception innerException) Parameters Type Name Description Message relatedMessage The related message to use for the exception. ProviderType relatedProvider The related provider to use for the exception. System.String message The message to use for the exception. Exception innerException An optional inner exception reference. ProviderException(ProviderType, String) This constructor creates a new instance of the ProviderException class. Declaration public ProviderException(ProviderType relatedProvider, string message) Parameters Type Name Description ProviderType relatedProvider The related provider to use for the exception. System.String message The message to use for the exception. ProviderException(ProviderType, String, Exception) This constructor creates a new instance of the ProviderException class. Declaration public ProviderException(ProviderType relatedProvider, string message, Exception innerException) Parameters Type Name Description ProviderType relatedProvider The related provider to use for the exception. System.String message The message to use for the exception. Exception innerException An optional inner exception reference. ProviderException(SerializationInfo, StreamingContext) This constructor creates a new instance of the ProviderException class. Declaration public ProviderException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The serialization info to use for the exception. StreamingContext context The streaming context to use for the exception. ProviderException(String, Exception) This constructor creates a new instance of the ProviderException class. Declaration public ProviderException(string message, Exception innerException) Parameters Type Name Description System.String message The message to use for the exception. Exception innerException An optional inner exception reference. Properties RelatedMessage This property contains the associated message. Declaration public Message? RelatedMessage { get; set; } Property Value Type Description System.Nullable < Message > RelatedProvider This property contains the associated provider type. Declaration public ProviderType? RelatedProvider { get; set; } Property Value Type Description System.Nullable < ProviderType > Methods GetObjectData(SerializationInfo, StreamingContext) This method sets the with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The serialization information to use for the operation. StreamingContext context The serialization context to use for the operation."
  },
  "api/CG.Purple.Providers.SendGrid.html": {
    "href": "api/CG.Purple.Providers.SendGrid.html",
    "title": "Namespace CG.Purple.Providers.SendGrid",
    "keywords": "Namespace CG.Purple.Providers.SendGrid Classes SendGridProvider This class is a SendGrid implementation of the IMessageProvider interface."
  },
  "api/CG.Purple.Providers.SendGrid.SendGridProvider.html": {
    "href": "api/CG.Purple.Providers.SendGrid.SendGridProvider.html",
    "title": "Class SendGridProvider",
    "keywords": "Class SendGridProvider This class is a SendGrid implementation of the IMessageProvider interface. Inheritance System.Object MessageProviderBase < SendGridProvider > SendGridProvider Implements IMessageProvider Inherited Members MessageProviderBase<SendGridProvider>._statusHub MessageProviderBase<SendGridProvider>._messageManager MessageProviderBase<SendGridProvider>._messageLogManager MessageProviderBase<SendGridProvider>._logger MessageProviderBase<SendGridProvider>._random MessageProviderBase<SendGridProvider>.MessageIsWrongTypeAsync(Message, CancellationToken) MessageProviderBase<SendGridProvider>.UnableToFindMailMessageAsync(Message, CancellationToken) MessageProviderBase<SendGridProvider>.UnableToFindTextMessageAsync(Message, CancellationToken) MessageProviderBase<SendGridProvider>.MessageWasSentAsync(Message, CancellationToken) MessageProviderBase<SendGridProvider>.MessageFailedToSendAsync(String, Message, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Providers.SendGrid Assembly : CG.Purple.Providers.SendGrid.dll Syntax class SendGridProvider : MessageProviderBase<SendGridProvider>, IMessageProvider Constructors SendGridProvider(ISendGridClient, StatusHub, IMailMessageManager, IMessageManager, IMessageLogManager, ILogger<SendGridProvider>) This constructor creates a new instance of the SendGridProvider class. Declaration public SendGridProvider(ISendGridClient sendGridClient, StatusHub statusHub, IMailMessageManager mailMessageManager, IMessageManager messageManager, IMessageLogManager processLogManager, ILogger<SendGridProvider> logger) Parameters Type Name Description ISendGridClient sendGridClient The SendGrid client to use with this provider. StatusHub statusHub The SignalR status hub to use with this provider. IMailMessageManager mailMessageManager The mail message manager to use with this provider. IMessageManager messageManager The message manager to use with this provider. IMessageLogManager processLogManager The process log manager to use with this provider. ILogger < SendGridProvider > logger The logger to use with this provider. Fields _mailMessageManager This field contains the mail manager for this provider. Declaration protected readonly IMailMessageManager _mailMessageManager Field Value Type Description IMailMessageManager _sendGridClient This field contains the SendGrid client for this provider. Declaration protected readonly ISendGridClient _sendGridClient Field Value Type Description ISendGridClient Methods CreateDotNetMessage(MailMessage) This method creates a new .NET wrapper for an email. Declaration SendGridMessage CreateDotNetMessage(MailMessage mailMessage) Parameters Type Name Description MailMessage mailMessage The mail message to use for the operation. Returns Type Description SendGridMessage An object. ProcessMessagesAsync(IEnumerable<Message>, ProviderType, CancellationToken) Declaration public override async Task ProcessMessagesAsync(IEnumerable<Message> messages, ProviderType providerType, CancellationToken cancellationToken = null) Parameters Type Name Description IEnumerable < Message > messages ProviderType providerType CancellationToken cancellationToken Returns Type Description Task Implements IMessageProvider"
  },
  "api/CG.Purple.Providers.Smtp.html": {
    "href": "api/CG.Purple.Providers.Smtp.html",
    "title": "Namespace CG.Purple.Providers.Smtp",
    "keywords": "Namespace CG.Purple.Providers.Smtp Classes SmtpProvider This class is a SMTP implementation of the IMessageProvider interface."
  },
  "api/CG.Purple.Providers.Smtp.Internal.html": {
    "href": "api/CG.Purple.Providers.Smtp.Internal.html",
    "title": "Namespace CG.Purple.Providers.Smtp.Internal",
    "keywords": "Namespace CG.Purple.Providers.Smtp.Internal Classes SmtpClientWrapper This class is a default implementation of the ISmtpClient interface. Interfaces ISmtpClient This interface represents a .NET SmtpClient."
  },
  "api/CG.Purple.Providers.Smtp.Internal.ISmtpClient.html": {
    "href": "api/CG.Purple.Providers.Smtp.Internal.ISmtpClient.html",
    "title": "Interface ISmtpClient",
    "keywords": "Interface ISmtpClient This interface represents a .NET SmtpClient. Namespace : CG.Purple.Providers.Smtp.Internal Assembly : CG.Purple.Providers.Smtp.dll Syntax public interface ISmtpClient Remarks The purpose of this interface is for testability. In short, the Microsoft SMTP client is simply not mockable, at all. Or at least, it isn't mockable in any way that I understand. If you know a way to mock the SmtpClient type, please let me know. This type wraps a standard SmtpClient instance and defers to that object at runtime. During testing, we can then mock up the ISmtpClient type, and use that, instead. Methods Send(MailMessage) This method sends the given mail message. Declaration void Send(MailMessage mailmessage) Parameters Type Name Description System.Net.Mail.MailMessage mailmessage The mail message to use for the operation."
  },
  "api/CG.Purple.Providers.Smtp.Internal.SmtpClientWrapper.html": {
    "href": "api/CG.Purple.Providers.Smtp.Internal.SmtpClientWrapper.html",
    "title": "Class SmtpClientWrapper",
    "keywords": "Class SmtpClientWrapper This class is a default implementation of the ISmtpClient interface. Inheritance System.Object SmtpClientWrapper Implements ISmtpClient Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Providers.Smtp.Internal Assembly : CG.Purple.Providers.Smtp.dll Syntax class SmtpClientWrapper : ISmtpClient Constructors SmtpClientWrapper(SmtpClient) This constructor creates a new instance of the SmtpClientWrapper class. Declaration public SmtpClientWrapper(SmtpClient innerSmtpClient) Parameters Type Name Description System.Net.Mail.SmtpClient innerSmtpClient The SMTP client to use for this wrapper. Fields _innerSmtpClient This field contains the inner SMTP client for this wrapper. Declaration protected readonly SmtpClient _innerSmtpClient Field Value Type Description System.Net.Mail.SmtpClient Methods Send(MailMessage) Declaration public virtual void Send(MailMessage mailmessage) Parameters Type Name Description System.Net.Mail.MailMessage mailmessage Implements ISmtpClient"
  },
  "api/CG.Purple.Providers.Smtp.SmtpProvider.html": {
    "href": "api/CG.Purple.Providers.Smtp.SmtpProvider.html",
    "title": "Class SmtpProvider",
    "keywords": "Class SmtpProvider This class is a SMTP implementation of the IMessageProvider interface. Inheritance System.Object MessageProviderBase < SmtpProvider > SmtpProvider Implements IMessageProvider Inherited Members MessageProviderBase<SmtpProvider>._statusHub MessageProviderBase<SmtpProvider>._messageManager MessageProviderBase<SmtpProvider>._messageLogManager MessageProviderBase<SmtpProvider>._logger MessageProviderBase<SmtpProvider>._random MessageProviderBase<SmtpProvider>.MessageIsWrongTypeAsync(Message, CancellationToken) MessageProviderBase<SmtpProvider>.UnableToFindMailMessageAsync(Message, CancellationToken) MessageProviderBase<SmtpProvider>.UnableToFindTextMessageAsync(Message, CancellationToken) MessageProviderBase<SmtpProvider>.MessageWasSentAsync(Message, CancellationToken) MessageProviderBase<SmtpProvider>.MessageFailedToSendAsync(String, Message, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Providers.Smtp Assembly : CG.Purple.Providers.Smtp.dll Syntax class SmtpProvider : MessageProviderBase<SmtpProvider>, IMessageProvider Constructors SmtpProvider(ISmtpClient, StatusHub, IMailMessageManager, IMessageManager, IMessageLogManager, ILogger<SmtpProvider>) This constructor creates a new instance of the SmtpProvider class. Declaration public SmtpProvider(ISmtpClient smtpClient, StatusHub statusHub, IMailMessageManager mailMessageManager, IMessageManager messageManager, IMessageLogManager processLogManager, ILogger<SmtpProvider> logger) Parameters Type Name Description ISmtpClient smtpClient The SMTP client to use with this provider. StatusHub statusHub The SignalR status context to use with this provider. IMailMessageManager mailMessageManager The mail message manager to use with this provider. IMessageManager messageManager The message manager to use with this provider. IMessageLogManager processLogManager The process log manager to use with this provider. ILogger < SmtpProvider > logger The logger to use with this provider. Fields _mailMessageManager This field contains the mail manager for this provider. Declaration protected readonly IMailMessageManager _mailMessageManager Field Value Type Description IMailMessageManager _smtpClient This field contains the mail manager for this provider. Declaration protected readonly ISmtpClient _smtpClient Field Value Type Description ISmtpClient Methods CreateDotNetMessage(MailMessage) This method creates a new .NET wrapper for an email. Declaration MailMessage CreateDotNetMessage(MailMessage mailMessage) Parameters Type Name Description MailMessage mailMessage The mail message to use for the operation. Returns Type Description System.Net.Mail.MailMessage An System.Net.Mail.MailMessage object. ProcessMessagesAsync(IEnumerable<Message>, ProviderType, CancellationToken) Declaration public override async Task ProcessMessagesAsync(IEnumerable<Message> messages, ProviderType providerType, CancellationToken cancellationToken = null) Parameters Type Name Description IEnumerable < Message > messages ProviderType providerType CancellationToken cancellationToken Returns Type Description Task ResetMessageAsync(Message, CancellationToken) This method resets the given message to a 'Pending' state and clears the error count on the message. Declaration async Task ResetMessageAsync(Message message, CancellationToken cancellationToken = null) Parameters Type Name Description Message message The message to use for the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Implements IMessageProvider"
  },
  "api/CG.Purple.Providers.StatusHub.html": {
    "href": "api/CG.Purple.Providers.StatusHub.html",
    "title": "Class StatusHub",
    "keywords": "Class StatusHub This class is a SignalR hub for the status back channel. Inheritance System.Object StatusHub Namespace : CG.Purple.Providers Assembly : CG.Purple.Providers.dll Syntax public class StatusHub : Hub Constructors StatusHub(IServiceProvider) This constructor creates a new instance of the StatusHub class. Declaration public StatusHub(IServiceProvider serviceProvider) Parameters Type Name Description IServiceProvider serviceProvider The service provider to use with this hub. Fields _serviceProvider This field contains the service provider for this hub. Declaration protected readonly IServiceProvider _serviceProvider Field Value Type Description IServiceProvider Methods OnStatusAsync(Message, CancellationToken) This method sends a status notification for the given message. Declaration public virtual async Task OnStatusAsync(Message message, CancellationToken cancellationToken = null) Parameters Type Name Description Message message The message to use for the operation. CancellationToken cancellationToken A cancellation token. Returns Type Description Task A task to perform the operation."
  },
  "api/CG.Purple.Providers.Twillio.html": {
    "href": "api/CG.Purple.Providers.Twillio.html",
    "title": "Namespace CG.Purple.Providers.Twillio",
    "keywords": "Namespace CG.Purple.Providers.Twillio Classes TwillioProvider This class is a Twillio implementation of the IMessageProvider interface."
  },
  "api/CG.Purple.Providers.Twillio.TwillioProvider.html": {
    "href": "api/CG.Purple.Providers.Twillio.TwillioProvider.html",
    "title": "Class TwillioProvider",
    "keywords": "Class TwillioProvider This class is a Twillio implementation of the IMessageProvider interface. Inheritance System.Object MessageProviderBase < TwillioProvider > TwillioProvider Implements IMessageProvider Inherited Members MessageProviderBase<TwillioProvider>._statusHub MessageProviderBase<TwillioProvider>._messageManager MessageProviderBase<TwillioProvider>._messageLogManager MessageProviderBase<TwillioProvider>._logger MessageProviderBase<TwillioProvider>._random MessageProviderBase<TwillioProvider>.MessageIsWrongTypeAsync(Message, CancellationToken) MessageProviderBase<TwillioProvider>.UnableToFindMailMessageAsync(Message, CancellationToken) MessageProviderBase<TwillioProvider>.UnableToFindTextMessageAsync(Message, CancellationToken) MessageProviderBase<TwillioProvider>.MessageWasSentAsync(Message, CancellationToken) MessageProviderBase<TwillioProvider>.MessageFailedToSendAsync(String, Message, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Providers.Twillio Assembly : CG.Purple.Providers.Twillio.dll Syntax class TwillioProvider : MessageProviderBase<TwillioProvider>, IMessageProvider Constructors TwillioProvider(StatusHub, ITextMessageManager, IMessageManager, IMessageLogManager, ILogger<TwillioProvider>) This constructor creates a new instance of the TwillioProvider class. Declaration public TwillioProvider(StatusHub statusHub, ITextMessageManager textMessageManager, IMessageManager messageManager, IMessageLogManager processLogManager, ILogger<TwillioProvider> logger) Parameters Type Name Description StatusHub statusHub The SignalR status context to use with this provider. ITextMessageManager textMessageManager The text message manager to use with this provider. IMessageManager messageManager The message manager to use with this provider. IMessageLogManager processLogManager The process log manager to use with this provider. ILogger < TwillioProvider > logger The logger to use with this provider. Fields _textMessageManager This field contains the text manager for this provider. Declaration protected readonly ITextMessageManager _textMessageManager Field Value Type Description ITextMessageManager Methods ProcessMessagesAsync(IEnumerable<Message>, ProviderType, CancellationToken) Declaration public override async Task ProcessMessagesAsync(IEnumerable<Message> messages, ProviderType providerType, CancellationToken cancellationToken = null) Parameters Type Name Description IEnumerable < Message > messages ProviderType providerType CancellationToken cancellationToken Returns Type Description Task Implements IMessageProvider"
  },
  "api/CG.Purple.Repositories.html": {
    "href": "api/CG.Purple.Repositories.html",
    "title": "Namespace CG.Purple.Repositories",
    "keywords": "Namespace CG.Purple.Repositories Classes RepositoryException This class represents a repository related exception. Interfaces IAttachmentRepository This interface represents an object that manages the storage and retrieval of objects. IFileTypeRepository This interface represents an object that manages the storage and retrieval of objects. IMailMessageRepository This interface represents an object that manages the storage and retrieval of objects. IMessageLogRepository This interface represents an object that manages the storage and retrieval of objects. IMessagePropertyRepository This interface represents an object that manages the storage and retrieval of objects. IMessageRepository This interface represents an object that manages the storage and retrieval of objects. IMimeTypeRepository This interface represents an object that manages the storage and retrieval of objects. IParameterTypeRepository This interface represents an object that manages the storage and retrieval of objects. IPropertyTypeRepository This interface represents an object that manages the storage and retrieval of objects. IProviderParameterRepository This interface represents an object that manages the storage and retrieval of objects. IProviderTypeRepository This interface represents an object that manages the storage and retrieval of objects. ITextMessageRepository This interface represents an object that manages the storage and retrieval of objects."
  },
  "api/CG.Purple.Repositories.IAttachmentRepository.html": {
    "href": "api/CG.Purple.Repositories.IAttachmentRepository.html",
    "title": "Interface IAttachmentRepository",
    "keywords": "Interface IAttachmentRepository This interface represents an object that manages the storage and retrieval of objects. Namespace : CG.Purple.Repositories Assembly : CG.Purple.Abstractions.dll Syntax public interface IAttachmentRepository Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CreateAsync(Attachment, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<Attachment> CreateAsync(Attachment attachment, CancellationToken cancellationToken = null) Parameters Type Name Description Attachment attachment The model to create in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < Attachment > A task to perform the operation that returns the newly created object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. DeleteAsync(Attachment, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(Attachment attachment, CancellationToken cancellationToken = null) Parameters Type Name Description Attachment attachment The model to delete from the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindAllAsync(CancellationToken) This method searches for all the objects. Declaration Task<IEnumerable<Attachment>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < Attachment >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. UpdateAsync(Attachment, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<Attachment> UpdateAsync(Attachment attachment, CancellationToken cancellationToken = null) Parameters Type Name Description Attachment attachment The model to update in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < Attachment > A task to perform the operation that returns the newly updated object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation."
  },
  "api/CG.Purple.Repositories.IFileTypeRepository.html": {
    "href": "api/CG.Purple.Repositories.IFileTypeRepository.html",
    "title": "Interface IFileTypeRepository",
    "keywords": "Interface IFileTypeRepository This interface represents an object that manages the storage and retrieval of objects. Namespace : CG.Purple.Repositories Assembly : CG.Purple.Abstractions.dll Syntax public interface IFileTypeRepository Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CreateAsync(FileType, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<FileType> CreateAsync(FileType fileType, CancellationToken cancellationToken = null) Parameters Type Name Description FileType fileType The model to create in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < FileType > A task to perform the operation that returns the newly created object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. DeleteAsync(FileType, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(FileType fileType, CancellationToken cancellationToken = null) Parameters Type Name Description FileType fileType The model to delete from the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindAllAsync(CancellationToken) This method searches for all the objects. Declaration Task<IEnumerable<FileType>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < FileType >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindByExtensionAsync(String, CancellationToken) This method searches for a single matching object using the given file extension. Declaration Task<FileType?> FindByExtensionAsync(string extension, CancellationToken cancellationToken = null) Parameters Type Name Description System.String extension The file extension to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < FileType >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. UpdateAsync(FileType, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<FileType> UpdateAsync(FileType fileType, CancellationToken cancellationToken = null) Parameters Type Name Description FileType fileType The model to update in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < FileType > A task to perform the operation that returns the newly updated object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation."
  },
  "api/CG.Purple.Repositories.IMailMessageRepository.html": {
    "href": "api/CG.Purple.Repositories.IMailMessageRepository.html",
    "title": "Interface IMailMessageRepository",
    "keywords": "Interface IMailMessageRepository This interface represents an object that manages the storage and retrieval of objects. Namespace : CG.Purple.Repositories Assembly : CG.Purple.Abstractions.dll Syntax public interface IMailMessageRepository Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CreateAsync(MailMessage, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<MailMessage> CreateAsync(MailMessage fileType, CancellationToken cancellationToken = null) Parameters Type Name Description MailMessage fileType The model to create in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MailMessage > A task to perform the operation that returns the newly created object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindAllAsync(CancellationToken) This method searches for all the objects. Declaration Task<IEnumerable<MailMessage>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < MailMessage >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindByIdAsync(Int64, CancellationToken) This method searches for a single matching object using the given identifier. Declaration Task<MailMessage?> FindByIdAsync(long id, CancellationToken cancellationToken = null) Parameters Type Name Description System.Int64 id The message identifier to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < MailMessage >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindByKeyAsync(String, CancellationToken) This method searches for a single matching object using the given message key. Declaration Task<MailMessage?> FindByKeyAsync(string messageKey, CancellationToken cancellationToken = null) Parameters Type Name Description System.String messageKey The message key to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < MailMessage >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. UpdateAsync(MailMessage, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<MailMessage> UpdateAsync(MailMessage mailMessage, CancellationToken cancellationToken = null) Parameters Type Name Description MailMessage mailMessage The model to update in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MailMessage > A task to perform the operation that returns the newly updated object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation."
  },
  "api/CG.Purple.Repositories.IMessageLogRepository.html": {
    "href": "api/CG.Purple.Repositories.IMessageLogRepository.html",
    "title": "Interface IMessageLogRepository",
    "keywords": "Interface IMessageLogRepository This interface represents an object that manages the storage and retrieval of objects. Namespace : CG.Purple.Repositories Assembly : CG.Purple.Abstractions.dll Syntax public interface IMessageLogRepository Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CreateAsync(MessageLog, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<MessageLog> CreateAsync(MessageLog providerLog, CancellationToken cancellationToken = null) Parameters Type Name Description MessageLog providerLog The model to create in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MessageLog > A task to perform the operation that returns the newly created object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. DeleteAsync(MessageLog, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(MessageLog providerLog, CancellationToken cancellationToken = null) Parameters Type Name Description MessageLog providerLog The model to delete from the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindAllAsync(CancellationToken) This method searches for a sequence of objects. Declaration Task<IEnumerable<MessageLog>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < MessageLog >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindByMessageAsync(Message, CancellationToken) This method searches for a sequence of objects that are associated with the given object. Declaration Task<IEnumerable<MessageLog>> FindByMessageAsync(Message message, CancellationToken cancellationToken = null) Parameters Type Name Description Message message The message to use for the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < MessageLog >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation."
  },
  "api/CG.Purple.Repositories.IMessagePropertyRepository.html": {
    "href": "api/CG.Purple.Repositories.IMessagePropertyRepository.html",
    "title": "Interface IMessagePropertyRepository",
    "keywords": "Interface IMessagePropertyRepository This interface represents an object that manages the storage and retrieval of objects. Namespace : CG.Purple.Repositories Assembly : CG.Purple.Abstractions.dll Syntax public interface IMessagePropertyRepository Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CreateAsync(MessageProperty, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<MessageProperty> CreateAsync(MessageProperty messageProperty, CancellationToken cancellationToken = null) Parameters Type Name Description MessageProperty messageProperty The model to create in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MessageProperty > A task to perform the operation that returns the newly created object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. DeleteAsync(MessageProperty, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(MessageProperty messageProperty, CancellationToken cancellationToken = null) Parameters Type Name Description MessageProperty messageProperty The model to delete from the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. UpdateAsync(MessageProperty, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<MessageProperty> UpdateAsync(MessageProperty messageProperty, CancellationToken cancellationToken = null) Parameters Type Name Description MessageProperty messageProperty The model to update in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MessageProperty > A task to perform the operation that returns the newly updated object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation."
  },
  "api/CG.Purple.Repositories.IMessageRepository.html": {
    "href": "api/CG.Purple.Repositories.IMessageRepository.html",
    "title": "Interface IMessageRepository",
    "keywords": "Interface IMessageRepository This interface represents an object that manages the storage and retrieval of objects. Namespace : CG.Purple.Repositories Assembly : CG.Purple.Abstractions.dll Syntax public interface IMessageRepository Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. DeleteAsync(Message, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(Message message, CancellationToken cancellationToken = null) Parameters Type Name Description Message message The model to delete from the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindAllAsync(CancellationToken) This method searches for all the objects. Declaration Task<IEnumerable<Message>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < Message >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindByIdAsync(Int64, CancellationToken) This method searches for a single matching object using the given identifier. Declaration Task<Message?> FindByIdAsync(long id, CancellationToken cancellationToken = null) Parameters Type Name Description System.Int64 id The message identifier to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < Message >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindByKeyAsync(String, CancellationToken) This method searches for a single matching object using the given message key. Declaration Task<Message?> FindByKeyAsync(string messageKey, CancellationToken cancellationToken = null) Parameters Type Name Description System.String messageKey The message key to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < Message >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindReadyToArchiveAsync(CancellationToken) This method searches for a sequence of objects that are ready to archive. days. Declaration Task<IEnumerable<Message>> FindReadyToArchiveAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < Message >> A task to perform the operation that returns a sequence of matching objects. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindReadyToProcessAsync(CancellationToken) This method searches for a sequence of objects that are ready to process. Declaration Task<IEnumerable<Message>> FindReadyToProcessAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < Message >> A task to perform the operation that returns a sequence of matching objects. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindReadyToRetryAsync(CancellationToken) This method searches for a sequence of objects that are ready to retry. Declaration Task<IEnumerable<Message>> FindReadyToRetryAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < Message >> A task to perform the operation that returns a sequence of matching objects. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. UpdateAsync(Message, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<Message> UpdateAsync(Message message, CancellationToken cancellationToken = null) Parameters Type Name Description Message message The model to update in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < Message > A task to perform the operation that returns the newly updated object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation."
  },
  "api/CG.Purple.Repositories.IMimeTypeRepository.html": {
    "href": "api/CG.Purple.Repositories.IMimeTypeRepository.html",
    "title": "Interface IMimeTypeRepository",
    "keywords": "Interface IMimeTypeRepository This interface represents an object that manages the storage and retrieval of objects. Namespace : CG.Purple.Repositories Assembly : CG.Purple.Abstractions.dll Syntax public interface IMimeTypeRepository Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CreateAsync(MimeType, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<MimeType> CreateAsync(MimeType mimeType, CancellationToken cancellationToken = null) Parameters Type Name Description MimeType mimeType The model to create in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MimeType > A task to perform the operation that returns the newly created object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. DeleteAsync(MimeType, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(MimeType mimeType, CancellationToken cancellationToken = null) Parameters Type Name Description MimeType mimeType The model to delete from the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindAllAsync(CancellationToken) This method searches for a sequence of objects. Declaration Task<IEnumerable<MimeType>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < MimeType >> A task to perform the operation that returns the results of the search. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindByExtensionAsync(String, CancellationToken) This method searches for a single matching object using the given file extension. Declaration Task<MimeType?> FindByExtensionAsync(string extension, CancellationToken cancellationToken = null) Parameters Type Name Description System.String extension The file extension to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < MimeType >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindByIdAsync(Int32, CancellationToken) This method searches for a single matching object using the given identifier. Declaration Task<MimeType?> FindByIdAsync(int id, CancellationToken cancellationToken = null) Parameters Type Name Description System.Int32 id The identifier to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < MimeType >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindByTypeAsync(String, String, CancellationToken) This method searches for matching objects using the given type and/or subtype. Declaration Task<IEnumerable<MimeType>> FindByTypeAsync(string type, string subType, CancellationToken cancellationToken = null) Parameters Type Name Description System.String type The MIME type to use for the search. System.String subType The MIME sub-type to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < MimeType >> A task to perform the operation that returns the results of the search. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. UpdateAsync(MimeType, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<MimeType> UpdateAsync(MimeType mimeType, CancellationToken cancellationToken = null) Parameters Type Name Description MimeType mimeType The model to update in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < MimeType > A task to perform the operation that returns the newly updated object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation."
  },
  "api/CG.Purple.Repositories.IParameterTypeRepository.html": {
    "href": "api/CG.Purple.Repositories.IParameterTypeRepository.html",
    "title": "Interface IParameterTypeRepository",
    "keywords": "Interface IParameterTypeRepository This interface represents an object that manages the storage and retrieval of objects. Namespace : CG.Purple.Repositories Assembly : CG.Purple.Abstractions.dll Syntax public interface IParameterTypeRepository Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CreateAsync(ParameterType, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<ParameterType> CreateAsync(ParameterType parameterType, CancellationToken cancellationToken = null) Parameters Type Name Description ParameterType parameterType The model to create in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ParameterType > A task to perform the operation that returns the newly created object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. DeleteAsync(ParameterType, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(ParameterType parameterType, CancellationToken cancellationToken = null) Parameters Type Name Description ParameterType parameterType The model to delete from the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindAllAsync(CancellationToken) This method searches for a sequence of objects. Declaration Task<IEnumerable<ParameterType>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < ParameterType >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindByNameAsync(String, CancellationToken) This method searches for a single matching object using the given name. Declaration Task<ParameterType?> FindByNameAsync(string name, CancellationToken cancellationToken = null) Parameters Type Name Description System.String name The name to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < ParameterType >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. UpdateAsync(ParameterType, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<ParameterType> UpdateAsync(ParameterType parameterType, CancellationToken cancellationToken = null) Parameters Type Name Description ParameterType parameterType The model to update in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ParameterType > A task to perform the operation that returns the newly updated object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation."
  },
  "api/CG.Purple.Repositories.IPropertyTypeRepository.html": {
    "href": "api/CG.Purple.Repositories.IPropertyTypeRepository.html",
    "title": "Interface IPropertyTypeRepository",
    "keywords": "Interface IPropertyTypeRepository This interface represents an object that manages the storage and retrieval of objects. Namespace : CG.Purple.Repositories Assembly : CG.Purple.Abstractions.dll Syntax public interface IPropertyTypeRepository Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CreateAsync(PropertyType, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<PropertyType> CreateAsync(PropertyType propertyType, CancellationToken cancellationToken = null) Parameters Type Name Description PropertyType propertyType The model to create in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < PropertyType > A task to perform the operation that returns the newly created object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. DeleteAsync(PropertyType, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(PropertyType propertyType, CancellationToken cancellationToken = null) Parameters Type Name Description PropertyType propertyType The model to delete from the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindAllAsync(CancellationToken) This method searches for a sequence of objects. Declaration Task<IEnumerable<PropertyType>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < PropertyType >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindByNameAsync(String, CancellationToken) This method searches for a single matching object using the given name. Declaration Task<PropertyType?> FindByNameAsync(string name, CancellationToken cancellationToken = null) Parameters Type Name Description System.String name The name to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < PropertyType >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. UpdateAsync(PropertyType, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<PropertyType> UpdateAsync(PropertyType propertyType, CancellationToken cancellationToken = null) Parameters Type Name Description PropertyType propertyType The model to update in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < PropertyType > A task to perform the operation that returns the newly updated object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation."
  },
  "api/CG.Purple.Repositories.IProviderParameterRepository.html": {
    "href": "api/CG.Purple.Repositories.IProviderParameterRepository.html",
    "title": "Interface IProviderParameterRepository",
    "keywords": "Interface IProviderParameterRepository This interface represents an object that manages the storage and retrieval of objects. Namespace : CG.Purple.Repositories Assembly : CG.Purple.Abstractions.dll Syntax public interface IProviderParameterRepository Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CreateAsync(ProviderParameter, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<ProviderParameter> CreateAsync(ProviderParameter providerParameter, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderParameter providerParameter The model to create in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProviderParameter > A task to perform the operation that returns the newly created object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. DeleteAsync(ProviderParameter, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(ProviderParameter providerParameter, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderParameter providerParameter The model to delete from the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. UpdateAsync(ProviderParameter, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<ProviderParameter> UpdateAsync(ProviderParameter providerParameter, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderParameter providerParameter The model to update in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProviderParameter > A task to perform the operation that returns the newly updated object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation."
  },
  "api/CG.Purple.Repositories.IProviderTypeRepository.html": {
    "href": "api/CG.Purple.Repositories.IProviderTypeRepository.html",
    "title": "Interface IProviderTypeRepository",
    "keywords": "Interface IProviderTypeRepository This interface represents an object that manages the storage and retrieval of objects. Namespace : CG.Purple.Repositories Assembly : CG.Purple.Abstractions.dll Syntax public interface IProviderTypeRepository Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CreateAsync(ProviderType, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<ProviderType> CreateAsync(ProviderType providerType, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderType providerType The model to create in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProviderType > A task to perform the operation that returns the newly created object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. DeleteAsync(ProviderType, CancellationToken) This method deletes an existing object from the underlying storage. Declaration Task DeleteAsync(ProviderType providerType, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderType providerType The model to delete from the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindAllAsync(CancellationToken) This method searches for a sequence of objects. Declaration Task<IEnumerable<ProviderType>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < ProviderType >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindByIdAsync(Int32, CancellationToken) This method searches for a matching object by identifier. Declaration Task<ProviderType?> FindByIdAsync(int id, CancellationToken cancellationToken = null) Parameters Type Name Description System.Int32 id The identifier to use for the operation. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < ProviderType >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindByNameAsync(String, CancellationToken) This method searches for a single matching object using the given name. Declaration Task<ProviderType?> FindByNameAsync(string name, CancellationToken cancellationToken = null) Parameters Type Name Description System.String name The name to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < ProviderType >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindForEmailsAsync(CancellationToken) This method searches for a sequence of objects that are capable of processing emails. Declaration Task<IEnumerable<ProviderType>> FindForEmailsAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < ProviderType >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindForTextsAsync(CancellationToken) This method searches for a sequence of objects that are capable of processing texts. Declaration Task<IEnumerable<ProviderType>> FindForTextsAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < ProviderType >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. UpdateAsync(ProviderType, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<ProviderType> UpdateAsync(ProviderType providerType, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderType providerType The model to update in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < ProviderType > A task to perform the operation that returns the newly updated object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation."
  },
  "api/CG.Purple.Repositories.ITextMessageRepository.html": {
    "href": "api/CG.Purple.Repositories.ITextMessageRepository.html",
    "title": "Interface ITextMessageRepository",
    "keywords": "Interface ITextMessageRepository This interface represents an object that manages the storage and retrieval of objects. Namespace : CG.Purple.Repositories Assembly : CG.Purple.Abstractions.dll Syntax public interface ITextMessageRepository Methods AnyAsync(CancellationToken) This method indicates whether there are any objects in the underlying storage. Declaration Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Boolean > A task to perform the operation that returns true if there are any objects; false otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CountAsync(CancellationToken) This method counts the number of objects in the underlying storage. Declaration Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Int64 > A task to perform the operation that returns a count of the number of objects in the underlying storage. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. CreateAsync(TextMessage, CancellationToken) This method creates a new object in the underlying storage. Declaration Task<TextMessage> CreateAsync(TextMessage textMessage, CancellationToken cancellationToken = null) Parameters Type Name Description TextMessage textMessage The model to create in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < TextMessage > A task to perform the operation that returns the newly created object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindAllAsync(CancellationToken) This method searches for all the objects. Declaration Task<IEnumerable<TextMessage>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < IEnumerable < TextMessage >> A task to perform the operation that returns a sequence of objects. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindByIdAsync(Int64, CancellationToken) This method searches for a single matching object using the given identifier. Declaration Task<TextMessage?> FindByIdAsync(long id, CancellationToken cancellationToken = null) Parameters Type Name Description System.Int64 id The message identifier to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < TextMessage >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. FindByKeyAsync(String, CancellationToken) This method searches for a single matching object using the given message key. Declaration Task<TextMessage?> FindByKeyAsync(string messageKey, CancellationToken cancellationToken = null) Parameters Type Name Description System.String messageKey The message key to use for the search. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < System.Nullable < TextMessage >> A task to perform the operation that returns a matching object, if one was found, or NULL otherwise. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation. UpdateAsync(TextMessage, CancellationToken) This method updates an existing object in the underlying storage. Declaration Task<TextMessage> UpdateAsync(TextMessage textMessage, CancellationToken cancellationToken = null) Parameters Type Name Description TextMessage textMessage The model to update in the underlying storage. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task < TextMessage > A task to perform the operation that returns the newly updated object. Exceptions Type Condition RepositoryException This exception is thrown whenever the repository fails to complete the operation."
  },
  "api/CG.Purple.Repositories.RepositoryException.html": {
    "href": "api/CG.Purple.Repositories.RepositoryException.html",
    "title": "Class RepositoryException",
    "keywords": "Class RepositoryException This class represents a repository related exception. Inheritance System.Object RepositoryException Namespace : CG.Purple.Repositories Assembly : CG.Purple.Primitives.dll Syntax public class RepositoryException : Exception Constructors RepositoryException() This constructor creates a new instance of the RepositoryException class. Declaration public RepositoryException() RepositoryException(SerializationInfo, StreamingContext) This constructor creates a new instance of the RepositoryException class. Declaration public RepositoryException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The serialization info to use for the exception. StreamingContext context The streaming context to use for the exception. RepositoryException(String) This constructor creates a new instance of the RepositoryException class. Declaration public RepositoryException(string message) Parameters Type Name Description System.String message The message to use for the exception. RepositoryException(String, Exception) This constructor creates a new instance of the RepositoryException class. Declaration public RepositoryException(string message, Exception innerException) Parameters Type Name Description System.String message The message to use for the exception. Exception innerException An optional inner exception reference."
  },
  "api/CG.Purple.Seeding.Directors.html": {
    "href": "api/CG.Purple.Seeding.Directors.html",
    "title": "Namespace CG.Purple.Seeding.Directors",
    "keywords": "Namespace CG.Purple.Seeding.Directors Classes SeedDirector This class is a default implementation of the interface."
  },
  "api/CG.Purple.Seeding.Directors.SeedDirector.html": {
    "href": "api/CG.Purple.Seeding.Directors.SeedDirector.html",
    "title": "Class SeedDirector",
    "keywords": "Class SeedDirector This class is a default implementation of the interface. Inheritance System.Object SeedDirector Namespace : CG.Purple.Seeding.Directors Assembly : CG.Purple.Seeding.dll Syntax class SeedDirector : ISeedDirector Constructors SeedDirector(IAttachmentManager, IFileTypeManager, IMailMessageManager, IMessagePropertyManager, IMimeTypeManager, IParameterTypeManager, IPropertyTypeManager, IProviderParameterManager, IProviderTypeManager, IMessageLogManager, ITextMessageManager, ILogger<ISeedDirector>) This constructor creates a new instance of the SeedDirector class. Declaration public SeedDirector(IAttachmentManager attachmenteManager, IFileTypeManager fileTypeManager, IMailMessageManager mailMessageManager, IMessagePropertyManager messagePropertyManager, IMimeTypeManager mimeTypeManager, IParameterTypeManager parameterTypeManager, IPropertyTypeManager propertyTypeManager, IProviderParameterManager providerParameterManager, IProviderTypeManager providerTypeManager, IMessageLogManager messageLogManager, ITextMessageManager textMessageManager, ILogger<ISeedDirector> logger) Parameters Type Name Description IAttachmentManager attachmenteManager The attachment manager to use with this director. IFileTypeManager fileTypeManager The file type manager to use with this director. IMailMessageManager mailMessageManager The mail message manager to use with this director. IMessagePropertyManager messagePropertyManager The message property manager to use with this director. IMimeTypeManager mimeTypeManager The mime type manager to use with this director. IParameterTypeManager parameterTypeManager The parameter type manager to use with this director. IPropertyTypeManager propertyTypeManager The property type manager to use with this director. IProviderParameterManager providerParameterManager The provider parameter manager to use with this director. IProviderTypeManager providerTypeManager The provider type manager to use with this director. IMessageLogManager messageLogManager The message log manager to use with this director. ITextMessageManager textMessageManager The text message manager to use with this director. ILogger < ISeedDirector > logger The logger to use with this director. Fields _attachmentManager This field contains the attachment manager for this director. Declaration protected readonly IAttachmentManager _attachmentManager Field Value Type Description IAttachmentManager _fileTypeManager This field contains the file type manager for this director. Declaration protected readonly IFileTypeManager _fileTypeManager Field Value Type Description IFileTypeManager _logger This field contains the logger for this director. Declaration protected readonly ILogger<ISeedDirector> _logger Field Value Type Description ILogger < ISeedDirector > _mailMessageManager This field contains the mail message manager for this director. Declaration protected readonly IMailMessageManager _mailMessageManager Field Value Type Description IMailMessageManager _messageLogManager This field contains the provider log manager for this director. Declaration protected readonly IMessageLogManager _messageLogManager Field Value Type Description IMessageLogManager _messagePropertyManager This field contains the message property manager for this director. Declaration protected readonly IMessagePropertyManager _messagePropertyManager Field Value Type Description IMessagePropertyManager _mimeTypeManager This field contains the mime type manager for this director. Declaration protected readonly IMimeTypeManager _mimeTypeManager Field Value Type Description IMimeTypeManager _parameterTypeManager This field contains the parameter type manager for this director. Declaration protected readonly IParameterTypeManager _parameterTypeManager Field Value Type Description IParameterTypeManager _propertyTypeManager This field contains the property type manager for this director. Declaration protected readonly IPropertyTypeManager _propertyTypeManager Field Value Type Description IPropertyTypeManager _providerParameterManager This field contains the provider parameter manager for this director. Declaration protected readonly IProviderParameterManager _providerParameterManager Field Value Type Description IProviderParameterManager _providerTypeManager This field contains the provider type manager for this director. Declaration protected readonly IProviderTypeManager _providerTypeManager Field Value Type Description IProviderTypeManager _textMessageManager This field contains the text message manager for this director. Declaration protected readonly ITextMessageManager _textMessageManager Field Value Type Description ITextMessageManager Methods SeedMailMessagesAsync(IConfiguration, String, Boolean, CancellationToken) Declaration public virtual async Task SeedMailMessagesAsync(IConfiguration configuration, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description IConfiguration configuration System.String userName System.Boolean force CancellationToken cancellationToken Returns Type Description Task SeedMailMessagesAsync(List<MailMessageOptions>, String, Boolean, CancellationToken) This method performs a seeding operation for the given list of MailMessageOptions objects. Declaration async Task SeedMailMessagesAsync(List<MailMessageOptions> mailMessageOptions, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description List < MailMessageOptions > mailMessageOptions The options to use for the operation. System.String userName The name of the user performing the operation. System.Boolean force true to force the operation; false otherwise. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. SeedMessageLogsAsync(IConfiguration, String, Boolean, CancellationToken) Declaration public virtual async Task SeedMessageLogsAsync(IConfiguration configuration, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description IConfiguration configuration System.String userName System.Boolean force CancellationToken cancellationToken Returns Type Description Task SeedMessageLogsAsync(List<ProcessLogOptions>, String, Boolean, CancellationToken) This method performs a seeding operation for the given list of ProcessLogOptions objects. Declaration async Task SeedMessageLogsAsync(List<ProcessLogOptions> providerLogOptions, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description List < ProcessLogOptions > providerLogOptions The options to use for the operation. System.String userName The name of the user performing the operation. System.Boolean force true to force the operation; false otherwise. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. SeedMimeTypesAsync(IConfiguration, String, Boolean, CancellationToken) Declaration public virtual async Task SeedMimeTypesAsync(IConfiguration configuration, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description IConfiguration configuration System.String userName System.Boolean force CancellationToken cancellationToken Returns Type Description Task SeedMimeTypesAsync(List<MimeTypeOptions>, String, Boolean, CancellationToken) This method performs a seeding operation for the given list of MimeTypeOptions objects. Declaration async Task SeedMimeTypesAsync(List<MimeTypeOptions> mimeTypeOptions, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description List < MimeTypeOptions > mimeTypeOptions The options to use for the operation. System.String userName The name of the user performing the operation. System.Boolean force true to force the operation; false otherwise. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. SeedParameterTypesAsync(IConfiguration, String, Boolean, CancellationToken) Declaration public virtual async Task SeedParameterTypesAsync(IConfiguration configuration, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description IConfiguration configuration System.String userName System.Boolean force CancellationToken cancellationToken Returns Type Description Task SeedParameterTypesAsync(List<ParameterTypeOptions>, String, Boolean, CancellationToken) This method performs a seeding operation for the given list of ParameterTypeOptions objects. Declaration async Task SeedParameterTypesAsync(List<ParameterTypeOptions> parameterTypeOptions, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description List < ParameterTypeOptions > parameterTypeOptions The options to use for the operation. System.String userName The name of the user performing the operation. System.Boolean force true to force the operation; false otherwise. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. SeedPropertyTypesAsync(IConfiguration, String, Boolean, CancellationToken) Declaration public virtual async Task SeedPropertyTypesAsync(IConfiguration configuration, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description IConfiguration configuration System.String userName System.Boolean force CancellationToken cancellationToken Returns Type Description Task SeedPropertyTypesAsync(List<PropertyTypeOptions>, String, Boolean, CancellationToken) This method performs a seeding operation for the given list of PropertyTypeOptions objects. Declaration async Task SeedPropertyTypesAsync(List<PropertyTypeOptions> propertyTypeOptions, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description List < PropertyTypeOptions > propertyTypeOptions The options to use for the operation. System.String userName The name of the user performing the operation. System.Boolean force true to force the operation; false otherwise. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. SeedProviderParametersAsync(IConfiguration, String, Boolean, CancellationToken) Declaration public virtual async Task SeedProviderParametersAsync(IConfiguration configuration, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description IConfiguration configuration System.String userName System.Boolean force CancellationToken cancellationToken Returns Type Description Task SeedProviderParametersAsync(List<ProviderParameterOptions>, String, Boolean, CancellationToken) This method performs a seeding operation for the given list of ProviderParameterOptions objects. Declaration async Task SeedProviderParametersAsync(List<ProviderParameterOptions> providerParameterOptions, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description List < ProviderParameterOptions > providerParameterOptions The options to use for the operation. System.String userName The name of the user performing the operation. System.Boolean force true to force the operation; false otherwise. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. SeedProviderTypesAsync(IConfiguration, String, Boolean, CancellationToken) Declaration public virtual async Task SeedProviderTypesAsync(IConfiguration configuration, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description IConfiguration configuration System.String userName System.Boolean force CancellationToken cancellationToken Returns Type Description Task SeedProviderTypesAsync(List<ProviderTypeOptions>, String, Boolean, CancellationToken) This method performs a seeding operation for the given list of ProviderTypeOptions objects. Declaration async Task SeedProviderTypesAsync(List<ProviderTypeOptions> providerTypeOptions, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description List < ProviderTypeOptions > providerTypeOptions The options to use for the operation. System.String userName The name of the user performing the operation. System.Boolean force true to force the operation; false otherwise. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation. SeedTextMessagesAsync(IConfiguration, String, Boolean, CancellationToken) Declaration public virtual async Task SeedTextMessagesAsync(IConfiguration configuration, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description IConfiguration configuration System.String userName System.Boolean force CancellationToken cancellationToken Returns Type Description Task SeedTextMessagesAsync(List<TextMessageOptions>, String, Boolean, CancellationToken) This method performs a seeding operation for the given list of TextMessageOptions objects. Declaration async Task SeedTextMessagesAsync(List<TextMessageOptions> textMessageOptions, string userName, bool force = false, CancellationToken cancellationToken = null) Parameters Type Name Description List < TextMessageOptions > textMessageOptions The options to use for the operation. System.String userName The name of the user performing the operation. System.Boolean force true to force the operation; false otherwise. CancellationToken cancellationToken A cancellation token that is monitored for the lifetime of the method. Returns Type Description Task A task to perform the operation."
  },
  "api/CG.Purple.Seeding.Options.html": {
    "href": "api/CG.Purple.Seeding.Options.html",
    "title": "Namespace CG.Purple.Seeding.Options",
    "keywords": "Namespace CG.Purple.Seeding.Options Classes MailMessageOptions This class contains configuration options related to mail message seeding. MessagePropertyOptions This class contains configuration options related to message property seeding. MimeTypeOptions This class contains configuration options related to mime type seeding. ParameterTypeOptions This class contains configuration options related to parameter type seeding. ProcessLogOptions This class contains configuration options related to process log seeding. PropertyTypeOptions This class contains configuration options related to property type seeding. ProviderParameterOptions This class contains configuration options related to provider parameter seeding. ProviderTypeOptions This class contains configuration options related to provider type seeding. SeedStartupOptions This class contains configuration options related to startup data seeding. TextMessageOptions This class contains configuration options related to text message seeding."
  },
  "api/CG.Purple.Seeding.Options.MailMessageOptions.html": {
    "href": "api/CG.Purple.Seeding.Options.MailMessageOptions.html",
    "title": "Class MailMessageOptions",
    "keywords": "Class MailMessageOptions This class contains configuration options related to mail message seeding. Inheritance System.Object MailMessageOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Seeding.Options Assembly : CG.Purple.Seeding.dll Syntax public class MailMessageOptions Properties ArchiveAfterUtc This property indicates when the message should be archived. Declaration public DateTime? ArchiveAfterUtc { get; set; } Property Value Type Description System.Nullable < DateTime > Attachments This property contains the file attachments for the message. Declaration public List<string> Attachments { get; set; } Property Value Type Description List < System.String > BCC This property contains the 'BCC' address for the message. Declaration public string BCC { get; set; } Property Value Type Description System.String Body This property contains the subject for the message. Declaration public string Body { get; set; } Property Value Type Description System.String CC This property contains the 'CC' address for the message. Declaration public string CC { get; set; } Property Value Type Description System.String From This property contains the origin of the message. Declaration public string From { get; set; } Property Value Type Description System.String IsDisabled This property indicates whether the message is disabled, or not. Declaration public bool IsDisabled { get; set; } Property Value Type Description System.Boolean IsHtml This property indicates whether the Body property contains HTML formatted text, or not. Declaration public bool IsHtml { get; set; } Property Value Type Description System.Boolean MaxErrors This property indicates the point at which we stop trying to process this message. Declaration public int MaxErrors { get; set; } Property Value Type Description System.Int32 MessageKey This property contains the key for the message. Declaration public string MessageKey { get; set; } Property Value Type Description System.String Priority This property contains the relative priority of the message. Declaration public int Priority { get; set; } Property Value Type Description System.Int32 ProcessAfterUtc This property indicates when the message should be sent through the pipeline for processing. Declaration public DateTime? ProcessAfterUtc { get; set; } Property Value Type Description System.Nullable < DateTime > Properties This property contains the properties for the message. Declaration public List<MessagePropertyOptions> Properties { get; set; } Property Value Type Description List < MessagePropertyOptions > ProviderTypeName This property contains an optional provider name, for pre-assigning a message to a specific provider. Declaration public string ProviderTypeName { get; set; } Property Value Type Description System.String Subject This property contains the subject for the message. Declaration public string Subject { get; set; } Property Value Type Description System.String To This property contains the 'To' address for the message. Declaration public string To { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Seeding.Options.MessagePropertyOptions.html": {
    "href": "api/CG.Purple.Seeding.Options.MessagePropertyOptions.html",
    "title": "Class MessagePropertyOptions",
    "keywords": "Class MessagePropertyOptions This class contains configuration options related to message property seeding. Inheritance System.Object MessagePropertyOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Seeding.Options Assembly : CG.Purple.Seeding.dll Syntax public class MessagePropertyOptions Properties PropertyTypeName This property contains the name of the associated property type. Declaration public string PropertyTypeName { get; set; } Property Value Type Description System.String Value This property contains the value of the property. Declaration public string Value { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Seeding.Options.MimeTypeOptions.html": {
    "href": "api/CG.Purple.Seeding.Options.MimeTypeOptions.html",
    "title": "Class MimeTypeOptions",
    "keywords": "Class MimeTypeOptions This class contains configuration options related to mime type seeding. Inheritance System.Object MimeTypeOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Seeding.Options Assembly : CG.Purple.Seeding.dll Syntax public class MimeTypeOptions Properties Extensions This property contains the associated file extensions. Declaration public List<string> Extensions { get; set; } Property Value Type Description List < System.String > SubType This property contains the sub-type for the mime type. Declaration public string SubType { get; set; } Property Value Type Description System.String Type This property contains the type for the mime type. Declaration public string Type { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Seeding.Options.ParameterTypeOptions.html": {
    "href": "api/CG.Purple.Seeding.Options.ParameterTypeOptions.html",
    "title": "Class ParameterTypeOptions",
    "keywords": "Class ParameterTypeOptions This class contains configuration options related to parameter type seeding. Inheritance System.Object ParameterTypeOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Seeding.Options Assembly : CG.Purple.Seeding.dll Syntax public class ParameterTypeOptions Properties Description This parameter contains the description for the parameter type. Declaration public string Description { get; set; } Property Value Type Description System.String Name This parameter contains the name for the parameter type. Declaration public string Name { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Seeding.Options.ProcessLogOptions.html": {
    "href": "api/CG.Purple.Seeding.Options.ProcessLogOptions.html",
    "title": "Class ProcessLogOptions",
    "keywords": "Class ProcessLogOptions This class contains configuration options related to process log seeding. Inheritance System.Object ProcessLogOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Seeding.Options Assembly : CG.Purple.Seeding.dll Syntax public class ProcessLogOptions Properties AfterState This property contains the state of the message after the event took place. Declaration public string AfterState { get; set; } Property Value Type Description System.String BeforeState This property contains the state of the message before the event took place. Declaration public string BeforeState { get; set; } Property Value Type Description System.String Error This property contains error data associated with the event. Declaration public string Error { get; set; } Property Value Type Description System.String Event This property contains the associated processing event. Declaration public string Event { get; set; } Property Value Type Description System.String MessageKey This property contains the key for the associated message. Declaration public string MessageKey { get; set; } Property Value Type Description System.String MessageType This property contains the type of the associated message. Declaration public string MessageType { get; set; } Property Value Type Description System.String ProviderTypeName This property contains the name of the associated provider type. Declaration public string ProviderTypeName { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Seeding.Options.PropertyTypeOptions.html": {
    "href": "api/CG.Purple.Seeding.Options.PropertyTypeOptions.html",
    "title": "Class PropertyTypeOptions",
    "keywords": "Class PropertyTypeOptions This class contains configuration options related to property type seeding. Inheritance System.Object PropertyTypeOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Seeding.Options Assembly : CG.Purple.Seeding.dll Syntax public class PropertyTypeOptions Properties Description This property contains the description for the property type. Declaration public string Description { get; set; } Property Value Type Description System.String Name This property contains the name for the property type. Declaration public string Name { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Seeding.Options.ProviderParameterOptions.html": {
    "href": "api/CG.Purple.Seeding.Options.ProviderParameterOptions.html",
    "title": "Class ProviderParameterOptions",
    "keywords": "Class ProviderParameterOptions This class contains configuration options related to provider parameter seeding. Inheritance System.Object ProviderParameterOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Seeding.Options Assembly : CG.Purple.Seeding.dll Syntax public class ProviderParameterOptions Properties ParameterTypeName This provider contains the name for the parameter type. Declaration public string ParameterTypeName { get; set; } Property Value Type Description System.String ProviderTypeName This provider contains the name for the provider type. Declaration public string ProviderTypeName { get; set; } Property Value Type Description System.String Value This provider contains the value for the parameter. Declaration public string Value { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.Seeding.Options.ProviderTypeOptions.html": {
    "href": "api/CG.Purple.Seeding.Options.ProviderTypeOptions.html",
    "title": "Class ProviderTypeOptions",
    "keywords": "Class ProviderTypeOptions This class contains configuration options related to provider type seeding. Inheritance System.Object ProviderTypeOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Seeding.Options Assembly : CG.Purple.Seeding.dll Syntax public class ProviderTypeOptions Properties CanProcessEmails This property indicates whether this provider can process emails. Declaration public bool CanProcessEmails { get; set; } Property Value Type Description System.Boolean CanProcessTexts This property indicates whether this provider can process texts. Declaration public bool CanProcessTexts { get; set; } Property Value Type Description System.Boolean Description This provider contains the description for the provider type. Declaration public string Description { get; set; } Property Value Type Description System.String FactoryType This provider contains the .NET type for the associated provider. Declaration public string FactoryType { get; set; } Property Value Type Description System.String IsDisabled This property indicates the provider has been disabled. Declaration public bool IsDisabled { get; set; } Property Value Type Description System.Boolean Name This provider contains the name for the provider type. Declaration public string Name { get; set; } Property Value Type Description System.String Priority This property contains the relative priority for this provider. Declaration public int Priority { get; set; } Property Value Type Description System.Int32"
  },
  "api/CG.Purple.Seeding.Options.SeedStartupOptions.html": {
    "href": "api/CG.Purple.Seeding.Options.SeedStartupOptions.html",
    "title": "Class SeedStartupOptions",
    "keywords": "Class SeedStartupOptions This class contains configuration options related to startup data seeding. Inheritance System.Object SeedStartupOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Seeding.Options Assembly : CG.Purple.Seeding.dll Syntax class SeedStartupOptions Properties FileNames This property contains a list of external JSON file names, each one containing settings for a seeding operation. Declaration public List<string>? FileNames { get; set; } Property Value Type Description System.Nullable < List < System.String >> Force This property indicates whether to force the seeding operation, which has the effect of possibly seeding tables with existing data. Declaration public bool Force { get; set; } Property Value Type Description System.Boolean SeedOnStartup This property indicates whether to perform a data seeding operation on startup. Declaration public bool SeedOnStartup { get; set; } Property Value Type Description System.Boolean"
  },
  "api/CG.Purple.Seeding.Options.TextMessageOptions.html": {
    "href": "api/CG.Purple.Seeding.Options.TextMessageOptions.html",
    "title": "Class TextMessageOptions",
    "keywords": "Class TextMessageOptions This class contains configuration options related to text message seeding. Inheritance System.Object TextMessageOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.Seeding.Options Assembly : CG.Purple.Seeding.dll Syntax public class TextMessageOptions Properties ArchiveAfterUtc This property indicates when the message should be archived. Declaration public DateTime? ArchiveAfterUtc { get; set; } Property Value Type Description System.Nullable < DateTime > Attachments This property contains the file attachments for the message. Declaration public List<string> Attachments { get; set; } Property Value Type Description List < System.String > Body This property contains the subject for the message. Declaration public string Body { get; set; } Property Value Type Description System.String From This property contains the origin of the message. Declaration public string From { get; set; } Property Value Type Description System.String IsDisabled This property indicates whether the message is disabled, or not. Declaration public bool IsDisabled { get; set; } Property Value Type Description System.Boolean MaxErrors This property indicates the point at which we stop trying to process this message. Declaration public int MaxErrors { get; set; } Property Value Type Description System.Int32 MessageKey This property contains the key for the message. Declaration public string MessageKey { get; set; } Property Value Type Description System.String Priority This property contains the relative priority of the message. Declaration public int Priority { get; set; } Property Value Type Description System.Int32 ProcessAfterUtc This property indicates when the message should be sent through the pipeline for processing. Declaration public DateTime? ProcessAfterUtc { get; set; } Property Value Type Description System.Nullable < DateTime > Properties This property contains the properties for the message. Declaration public List<MessagePropertyOptions> Properties { get; set; } Property Value Type Description List < MessagePropertyOptions > ProviderTypeName This property contains an optional provider name, for pre-assigning a message to a specific provider. Declaration public string ProviderTypeName { get; set; } Property Value Type Description System.String To This property contains the 'To' phone number for the message. Declaration public string To { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.SqlServer.Entities.Attachment.html": {
    "href": "api/CG.Purple.SqlServer.Entities.Attachment.html",
    "title": "Class Attachment",
    "keywords": "Class Attachment This class represents a message attachment entity. Inheritance System.Object EntityBase Attachment Inherited Members EntityBase.CreatedBy EntityBase.CreatedOnUtc EntityBase.LastUpdatedBy EntityBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.SqlServer.Entities Assembly : CG.Purple.SqlServer.dll Syntax class Attachment : EntityBase Properties Data This property contains the bits for the attachment. Declaration public byte[] Data { get; set; } Property Value Type Description System.Byte [] Id This property contains the unique identifier for the attachment. Declaration public long Id { get; set; } Property Value Type Description System.Int64 Length This property contains the length, in bits, for the attachment. Declaration public long Length { get; set; } Property Value Type Description System.Int64 Message This property contains the associated message. Declaration public virtual Message Message { get; set; } Property Value Type Description Message MessageId This property contains the identifier for the associated message. Declaration public long MessageId { get; set; } Property Value Type Description System.Int64 MimeType This property contains the associated MIME type. Declaration public virtual MimeType MimeType { get; set; } Property Value Type Description MimeType MimeTypeId This property contains the identifier for the associated MIME type. Declaration public int MimeTypeId { get; set; } Property Value Type Description System.Int32 OriginalFileName This property contains the original file name for the attachment. Declaration public string OriginalFileName { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.SqlServer.Entities.EntityBase.html": {
    "href": "api/CG.Purple.SqlServer.Entities.EntityBase.html",
    "title": "Class EntityBase",
    "keywords": "Class EntityBase This class represents a base entity. Inheritance System.Object EntityBase Attachment FileType Message MessageLog MessageProperty MimeType ParameterType PropertyType ProviderParameter ProviderType Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.SqlServer.Entities Assembly : CG.Purple.SqlServer.dll Syntax class EntityBase Properties CreatedBy This property contains the name of the person who created the entity. Declaration public string CreatedBy { get; set; } Property Value Type Description System.String CreatedOnUtc This property contains the date/time when the entity was created. Declaration public DateTime CreatedOnUtc { get; set; } Property Value Type Description DateTime LastUpdatedBy This property contains the name of the last person to update the entity. Declaration public string LastUpdatedBy { get; set; } Property Value Type Description System.String LastUpdatedOnUtc This property contains the date/time when the entity was last updated. Declaration public DateTime? LastUpdatedOnUtc { get; set; } Property Value Type Description System.Nullable < DateTime >"
  },
  "api/CG.Purple.SqlServer.Entities.FileType.html": {
    "href": "api/CG.Purple.SqlServer.Entities.FileType.html",
    "title": "Class FileType",
    "keywords": "Class FileType This class represents a file type entity. Inheritance System.Object EntityBase FileType Inherited Members EntityBase.CreatedBy EntityBase.CreatedOnUtc EntityBase.LastUpdatedBy EntityBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.SqlServer.Entities Assembly : CG.Purple.SqlServer.dll Syntax class FileType : EntityBase Properties Extension This property contains the extension for the file type. Declaration public string Extension { get; set; } Property Value Type Description System.String Id This property contains the unique identifier for the file type. Declaration public int Id { get; set; } Property Value Type Description System.Int32 MimeType This property contains the associated MIME type. Declaration public virtual MimeType MimeType { get; set; } Property Value Type Description MimeType MimeTypeId This property contains the identifier for the associated MIME type. Declaration public int MimeTypeId { get; set; } Property Value Type Description System.Int32"
  },
  "api/CG.Purple.SqlServer.Entities.html": {
    "href": "api/CG.Purple.SqlServer.Entities.html",
    "title": "Namespace CG.Purple.SqlServer.Entities",
    "keywords": "Namespace CG.Purple.SqlServer.Entities Classes Attachment This class represents a message attachment entity. EntityBase This class represents a base entity. FileType This class represents a file type entity. MailMessage This class represents a notification email entity. Message This class represents a notification message entity. MessageLog This class represents a message processing event entity. MessageProperty This class represents a message property entity. MimeType This class represents a MIME type entity. ParameterType This class represents a provider parameter type entity. PropertyType This class represents a property type entity. ProviderParameter This class represents a provider parameter entity. ProviderType This class represents a message provider type entity. TextMessage This class represents a notification text entity."
  },
  "api/CG.Purple.SqlServer.Entities.MailMessage.html": {
    "href": "api/CG.Purple.SqlServer.Entities.MailMessage.html",
    "title": "Class MailMessage",
    "keywords": "Class MailMessage This class represents a notification email entity. Inheritance System.Object EntityBase Message MailMessage Inherited Members Message.Id Message.MessageKey Message.From Message.MessageType Message.MessageState Message.IsDisabled Message.Priority Message.ErrorCount Message.MaxErrors Message.ProcessAfterUtc Message.ArchiveAfterUtc Message.ProviderTypeId Message.ProviderType Message.MessageProperties Message.Attachments EntityBase.CreatedBy EntityBase.CreatedOnUtc EntityBase.LastUpdatedBy EntityBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.SqlServer.Entities Assembly : CG.Purple.SqlServer.dll Syntax class MailMessage : Message Properties BCC This property contains the BCC address for the message. Declaration public string BCC { get; set; } Property Value Type Description System.String Body This property contains the body for the message. Declaration public string Body { get; set; } Property Value Type Description System.String CC This property contains the CC address for the message. Declaration public string CC { get; set; } Property Value Type Description System.String IsHtml This property indicates whether the Body property contains formatted HTML, or not. Declaration public bool IsHtml { get; set; } Property Value Type Description System.Boolean Subject This property contains the subject for the message. Declaration public string Subject { get; set; } Property Value Type Description System.String To This property contains the to address for the message. Declaration public string To { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.SqlServer.Entities.Message.html": {
    "href": "api/CG.Purple.SqlServer.Entities.Message.html",
    "title": "Class Message",
    "keywords": "Class Message This class represents a notification message entity. Inheritance System.Object EntityBase Message MailMessage TextMessage Inherited Members EntityBase.CreatedBy EntityBase.CreatedOnUtc EntityBase.LastUpdatedBy EntityBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.SqlServer.Entities Assembly : CG.Purple.SqlServer.dll Syntax class Message : EntityBase Properties ArchiveAfterUtc This property indicates when the message should be archived. Declaration public DateTime? ArchiveAfterUtc { get; set; } Property Value Type Description System.Nullable < DateTime > Attachments This property contains the associated file attachments. Declaration public virtual ICollection<Attachment> Attachments { get; set; } Property Value Type Description ICollection < Attachment > ErrorCount This property indicates how many errors have occurred during the processing of this message. Declaration public int ErrorCount { get; set; } Property Value Type Description System.Int32 From This property contains the origin of the message. Declaration public string From { get; set; } Property Value Type Description System.String Id This property contains the unique identifier for the message. Declaration public long Id { get; set; } Property Value Type Description System.Int64 IsDisabled This property indicates the message has been disabled. Declaration public bool IsDisabled { get; set; } Property Value Type Description System.Boolean MaxErrors This property indicates the point at which we stop trying to process this message. Declaration public int MaxErrors { get; set; } Property Value Type Description System.Int32 MessageKey This property contains a unique key for the message. Declaration public string MessageKey { get; set; } Property Value Type Description System.String MessageProperties This property contains the associated message properties. Declaration public virtual ICollection<MessageProperty> MessageProperties { get; set; } Property Value Type Description ICollection < MessageProperty > MessageState This property contains the message state. Declaration public MessageState MessageState { get; set; } Property Value Type Description MessageState MessageType This property contains the message type. Declaration public MessageType MessageType { get; set; } Property Value Type Description MessageType Priority This property contains the relative priority of the message. Declaration public int Priority { get; set; } Property Value Type Description System.Int32 ProcessAfterUtc This property indicates when the message should be sent through the pipeline for processing. Declaration public DateTime? ProcessAfterUtc { get; set; } Property Value Type Description System.Nullable < DateTime > ProviderType This property contains an associated provider type. Declaration public virtual ProviderType ProviderType { get; set; } Property Value Type Description ProviderType ProviderTypeId This property contains the identifier for an associated provider type. Declaration public int? ProviderTypeId { get; set; } Property Value Type Description System.Nullable < System.Int32 >"
  },
  "api/CG.Purple.SqlServer.Entities.MessageLog.html": {
    "href": "api/CG.Purple.SqlServer.Entities.MessageLog.html",
    "title": "Class MessageLog",
    "keywords": "Class MessageLog This class represents a message processing event entity. Inheritance System.Object EntityBase MessageLog Inherited Members EntityBase.CreatedBy EntityBase.CreatedOnUtc EntityBase.LastUpdatedBy EntityBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.SqlServer.Entities Assembly : CG.Purple.SqlServer.dll Syntax class MessageLog : EntityBase Properties AfterState This property contains the state of the message after the event took place. Declaration public MessageState? AfterState { get; set; } Property Value Type Description System.Nullable < MessageState > BeforeState This property contains the state of the message before the event took place. Declaration public MessageState? BeforeState { get; set; } Property Value Type Description System.Nullable < MessageState > Error This property contains error data associated with the event. Declaration public string Error { get; set; } Property Value Type Description System.String Id This property contains the unique identifier for the entry. Declaration public long Id { get; set; } Property Value Type Description System.Int64 Message This property contains the associate message. Declaration public virtual Message Message { get; set; } Property Value Type Description Message MessageEvent This property contains the associate processing event. Declaration public MessageEvent MessageEvent { get; set; } Property Value Type Description MessageEvent MessageId This property contains the unique identifier for the associated message. Declaration public long MessageId { get; set; } Property Value Type Description System.Int64 ProviderType This property contains the associated provider type. Declaration public virtual ProviderType ProviderType { get; set; } Property Value Type Description ProviderType ProviderTypeId This property contains the associated provider type. Declaration public int? ProviderTypeId { get; set; } Property Value Type Description System.Nullable < System.Int32 >"
  },
  "api/CG.Purple.SqlServer.Entities.MessageProperty.html": {
    "href": "api/CG.Purple.SqlServer.Entities.MessageProperty.html",
    "title": "Class MessageProperty",
    "keywords": "Class MessageProperty This class represents a message property entity. Inheritance System.Object EntityBase MessageProperty Inherited Members EntityBase.CreatedBy EntityBase.CreatedOnUtc EntityBase.LastUpdatedBy EntityBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.SqlServer.Entities Assembly : CG.Purple.SqlServer.dll Syntax class MessageProperty : EntityBase Properties Message This property contains the associate message. Declaration public virtual Message Message { get; set; } Property Value Type Description Message MessageId This property contains the unique identifier for the associated message. Declaration public long MessageId { get; set; } Property Value Type Description System.Int64 PropertyType This property contains the associate property type. Declaration public virtual PropertyType PropertyType { get; set; } Property Value Type Description PropertyType PropertyTypeId This property contains the unique identifier for the associated property type. Declaration public int PropertyTypeId { get; set; } Property Value Type Description System.Int32 Value This property contains the value for the message property. Declaration public string Value { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.SqlServer.Entities.MimeType.html": {
    "href": "api/CG.Purple.SqlServer.Entities.MimeType.html",
    "title": "Class MimeType",
    "keywords": "Class MimeType This class represents a MIME type entity. Inheritance System.Object EntityBase MimeType Inherited Members EntityBase.CreatedBy EntityBase.CreatedOnUtc EntityBase.LastUpdatedBy EntityBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.SqlServer.Entities Assembly : CG.Purple.SqlServer.dll Syntax class MimeType : EntityBase Properties FileTypes This property contains the associated file types. Declaration public virtual ICollection<FileType> FileTypes { get; set; } Property Value Type Description ICollection < FileType > Id This property contains the unique identifier for the MIME type. Declaration public int Id { get; set; } Property Value Type Description System.Int32 SubType This property contains the MIME sub-type. Declaration public string SubType { get; set; } Property Value Type Description System.String Type This property contains the MIME type. Declaration public string Type { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.SqlServer.Entities.ParameterType.html": {
    "href": "api/CG.Purple.SqlServer.Entities.ParameterType.html",
    "title": "Class ParameterType",
    "keywords": "Class ParameterType This class represents a provider parameter type entity. Inheritance System.Object EntityBase ParameterType Inherited Members EntityBase.CreatedBy EntityBase.CreatedOnUtc EntityBase.LastUpdatedBy EntityBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.SqlServer.Entities Assembly : CG.Purple.SqlServer.dll Syntax class ParameterType : EntityBase Properties Description This property contains the description of the parameter type. Declaration public string Description { get; set; } Property Value Type Description System.String Id This property contains the unique identifier for the parameter type. Declaration public int Id { get; set; } Property Value Type Description System.Int32 Name This property contains the name of the parameter type. Declaration public string Name { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.SqlServer.Entities.PropertyType.html": {
    "href": "api/CG.Purple.SqlServer.Entities.PropertyType.html",
    "title": "Class PropertyType",
    "keywords": "Class PropertyType This class represents a property type entity. Inheritance System.Object EntityBase PropertyType Inherited Members EntityBase.CreatedBy EntityBase.CreatedOnUtc EntityBase.LastUpdatedBy EntityBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.SqlServer.Entities Assembly : CG.Purple.SqlServer.dll Syntax class PropertyType : EntityBase Properties Description This property contains the description of the property type. Declaration public string Description { get; set; } Property Value Type Description System.String Id This property contains the unique identifier for the property type. Declaration public int Id { get; set; } Property Value Type Description System.Int32 Name This property contains the name of the property type. Declaration public string Name { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.SqlServer.Entities.ProviderParameter.html": {
    "href": "api/CG.Purple.SqlServer.Entities.ProviderParameter.html",
    "title": "Class ProviderParameter",
    "keywords": "Class ProviderParameter This class represents a provider parameter entity. Inheritance System.Object EntityBase ProviderParameter Inherited Members EntityBase.CreatedBy EntityBase.CreatedOnUtc EntityBase.LastUpdatedBy EntityBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.SqlServer.Entities Assembly : CG.Purple.SqlServer.dll Syntax class ProviderParameter : EntityBase Properties ParameterType This property contains the associate parameter type. Declaration public virtual ParameterType ParameterType { get; set; } Property Value Type Description ParameterType ParameterTypeId This property contains the unique identifier for the associated parameter type. Declaration public int ParameterTypeId { get; set; } Property Value Type Description System.Int32 ProviderType This property contains the associate provider type. Declaration public virtual ProviderType ProviderType { get; set; } Property Value Type Description ProviderType ProviderTypeId This property contains the unique identifier for the associated provider type. Declaration public int ProviderTypeId { get; set; } Property Value Type Description System.Int32 Value This property contains the value for the provider parameter. Declaration public string Value { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.SqlServer.Entities.ProviderType.html": {
    "href": "api/CG.Purple.SqlServer.Entities.ProviderType.html",
    "title": "Class ProviderType",
    "keywords": "Class ProviderType This class represents a message provider type entity. Inheritance System.Object EntityBase ProviderType Inherited Members EntityBase.CreatedBy EntityBase.CreatedOnUtc EntityBase.LastUpdatedBy EntityBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.SqlServer.Entities Assembly : CG.Purple.SqlServer.dll Syntax class ProviderType : EntityBase Properties CanProcessEmails This property indicates whether this provider type can process emails. Declaration public bool CanProcessEmails { get; set; } Property Value Type Description System.Boolean CanProcessTexts This property indicates whether this provider type can process texts. Declaration public bool CanProcessTexts { get; set; } Property Value Type Description System.Boolean Description This property contains the description of the provider type. Declaration public string Description { get; set; } Property Value Type Description System.String FactoryType This property contains the .NET type for the associated provider type. Declaration public string FactoryType { get; set; } Property Value Type Description System.String Id This property contains the unique identifier for the provider type. Declaration public int Id { get; set; } Property Value Type Description System.Int32 IsDisabled This property indicates the provider type has been disabled. Declaration public bool IsDisabled { get; set; } Property Value Type Description System.Boolean Name This property contains the name of the provider type. Declaration public string Name { get; set; } Property Value Type Description System.String Parameters This property contains the associated parameters. Declaration public virtual ICollection<ProviderParameter> Parameters { get; set; } Property Value Type Description ICollection < ProviderParameter > Priority This property contains the relative priority for this provider. Declaration public int Priority { get; set; } Property Value Type Description System.Int32"
  },
  "api/CG.Purple.SqlServer.Entities.TextMessage.html": {
    "href": "api/CG.Purple.SqlServer.Entities.TextMessage.html",
    "title": "Class TextMessage",
    "keywords": "Class TextMessage This class represents a notification text entity. Inheritance System.Object EntityBase Message TextMessage Inherited Members Message.Id Message.MessageKey Message.From Message.MessageType Message.MessageState Message.IsDisabled Message.Priority Message.ErrorCount Message.MaxErrors Message.ProcessAfterUtc Message.ArchiveAfterUtc Message.ProviderTypeId Message.ProviderType Message.MessageProperties Message.Attachments EntityBase.CreatedBy EntityBase.CreatedOnUtc EntityBase.LastUpdatedBy EntityBase.LastUpdatedOnUtc System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.SqlServer.Entities Assembly : CG.Purple.SqlServer.dll Syntax class TextMessage : Message Properties Body This property contains the body for the message. Declaration public string Body { get; set; } Property Value Type Description System.String To This property contains the to address for the message. Declaration public string To { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Purple.SqlServer.Factories.html": {
    "href": "api/CG.Purple.SqlServer.Factories.html",
    "title": "Namespace CG.Purple.SqlServer.Factories",
    "keywords": "Namespace CG.Purple.SqlServer.Factories Classes PurpleDbContextDesignTimeFactory This class is a default implementation of the interface."
  },
  "api/CG.Purple.SqlServer.Factories.PurpleDbContextDesignTimeFactory.html": {
    "href": "api/CG.Purple.SqlServer.Factories.PurpleDbContextDesignTimeFactory.html",
    "title": "Class PurpleDbContextDesignTimeFactory",
    "keywords": "Class PurpleDbContextDesignTimeFactory This class is a default implementation of the interface. Inheritance System.Object PurpleDbContextDesignTimeFactory Namespace : CG.Purple.SqlServer.Factories Assembly : CG.Purple.SqlServer.dll Syntax class PurpleDbContextDesignTimeFactory : IDesignTimeDbContextFactory<PurpleDbContext> Methods CreateDbContext(String[]) This method creates a new PurpleDbContext instance. Declaration public PurpleDbContext CreateDbContext(string[] args) Parameters Type Name Description System.String [] args Optional arguments. Returns Type Description PurpleDbContext A PurpleDbContext instance."
  },
  "api/CG.Purple.SqlServer.html": {
    "href": "api/CG.Purple.SqlServer.html",
    "title": "Namespace CG.Purple.SqlServer",
    "keywords": "Namespace CG.Purple.SqlServer Classes PurpleDbContext This class is an EFCore data context for the CG.Purple project\"> project."
  },
  "api/CG.Purple.SqlServer.Maps.AttachmentMap.html": {
    "href": "api/CG.Purple.SqlServer.Maps.AttachmentMap.html",
    "title": "Class AttachmentMap",
    "keywords": "Class AttachmentMap This class is an EFCore configuration map for the Attachment entity type. Inheritance System.Object EntityMapBase < Attachment > AttachmentMap Inherited Members EntityMapBase<Attachment>._modelBuilder Namespace : CG.Purple.SqlServer.Maps Assembly : CG.Purple.SqlServer.dll Syntax class AttachmentMap : EntityMapBase<Attachment> Constructors AttachmentMap(ModelBuilder) This constructor creates a new instance of the AttachmentMap class. Declaration public AttachmentMap(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder to use with this map. Methods Configure(EntityTypeBuilder<Attachment>) This method configures the Attachment entity. Declaration public override void Configure(EntityTypeBuilder<Attachment> builder) Parameters Type Name Description EntityTypeBuilder < Attachment > builder The builder to use for the operation. Overrides CG.Purple.SqlServer.Maps.EntityMapBase<CG.Purple.SqlServer.Entities.Attachment>.Configure(EntityTypeBuilder<CG.Purple.SqlServer.Entities.Attachment>)"
  },
  "api/CG.Purple.SqlServer.Maps.EntityMapBase-1.html": {
    "href": "api/CG.Purple.SqlServer.Maps.EntityMapBase-1.html",
    "title": "Class EntityMapBase<TEntity>",
    "keywords": "Class EntityMapBase<TEntity> This class represents a base map for entity types derived from EntityBase Inheritance System.Object EntityMapBase<TEntity> AttachmentMap FileTypeMap MailMessageMap MessageLogMap MessageMap MessagePropertyMap MimeTypeMap ParameterTypeMap PropertyTypeMap ProviderParameterMap ProviderTypeMap TextMessageMap Namespace : CG.Purple.SqlServer.Maps Assembly : CG.Purple.SqlServer.dll Syntax abstract class EntityMapBase<TEntity> : IEntityTypeConfiguration<TEntity> where TEntity : EntityBase Type Parameters Name Description TEntity Constructors EntityMapBase(ModelBuilder) This constructor creates a new instance of the EntityMapBase<TEntity> class. Declaration public EntityMapBase(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder to use with this map. Fields _modelBuilder This field contains the model builder for this map. Declaration protected readonly ModelBuilder _modelBuilder Field Value Type Description ModelBuilder Methods Configure(EntityTypeBuilder<TEntity>) This method configures the TEntity entity. Declaration public virtual void Configure(EntityTypeBuilder<TEntity> builder) Parameters Type Name Description EntityTypeBuilder <TEntity> builder The builder to use for the operation."
  },
  "api/CG.Purple.SqlServer.Maps.FileTypeMap.html": {
    "href": "api/CG.Purple.SqlServer.Maps.FileTypeMap.html",
    "title": "Class FileTypeMap",
    "keywords": "Class FileTypeMap This class is an EFCore configuration map for the FileType entity type. Inheritance System.Object EntityMapBase < FileType > FileTypeMap Inherited Members EntityMapBase<FileType>._modelBuilder Namespace : CG.Purple.SqlServer.Maps Assembly : CG.Purple.SqlServer.dll Syntax class FileTypeMap : EntityMapBase<FileType> Constructors FileTypeMap(ModelBuilder) This constructor creates a new instance of the FileTypeMap class. Declaration public FileTypeMap(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder to use with this map. Methods Configure(EntityTypeBuilder<FileType>) This method configures the FileType entity. Declaration public override void Configure(EntityTypeBuilder<FileType> builder) Parameters Type Name Description EntityTypeBuilder < FileType > builder The builder to use for the operation. Overrides CG.Purple.SqlServer.Maps.EntityMapBase<CG.Purple.SqlServer.Entities.FileType>.Configure(EntityTypeBuilder<CG.Purple.SqlServer.Entities.FileType>)"
  },
  "api/CG.Purple.SqlServer.Maps.html": {
    "href": "api/CG.Purple.SqlServer.Maps.html",
    "title": "Namespace CG.Purple.SqlServer.Maps",
    "keywords": "Namespace CG.Purple.SqlServer.Maps Classes AttachmentMap This class is an EFCore configuration map for the Attachment entity type. EntityMapBase<TEntity> This class represents a base map for entity types derived from EntityBase FileTypeMap This class is an EFCore configuration map for the FileType entity type. MailMessageMap This class is an EFCore configuration map for the MailMessage entity type. MessageLogMap This class is an EFCore configuration map for the MessageLog entity type. MessageMap This class is an EFCore configuration map for the Message entity type. MessagePropertyMap This class is an EFCore configuration map for the MessageProperty entity type. MimeTypeMap This class is an EFCore configuration map for the MimeType entity type. ParameterTypeMap This class is an EFCore configuration map for the ParameterType entity type. PropertyTypeMap This class is an EFCore configuration map for the PropertyType entity type. ProviderParameterMap This class is an EFCore configuration map for the ProviderParameter entity type. ProviderTypeMap This class is an EFCore configuration map for the ProviderType entity type. TextMessageMap This class is an EFCore configuration map for the TextMessage entity type."
  },
  "api/CG.Purple.SqlServer.Maps.MailMessageMap.html": {
    "href": "api/CG.Purple.SqlServer.Maps.MailMessageMap.html",
    "title": "Class MailMessageMap",
    "keywords": "Class MailMessageMap This class is an EFCore configuration map for the MailMessage entity type. Inheritance System.Object EntityMapBase < MailMessage > MailMessageMap Inherited Members EntityMapBase<MailMessage>._modelBuilder Namespace : CG.Purple.SqlServer.Maps Assembly : CG.Purple.SqlServer.dll Syntax class MailMessageMap : EntityMapBase<MailMessage> Constructors MailMessageMap(ModelBuilder) This constructor creates a new instance of the MailMessageMap class. Declaration public MailMessageMap(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder to use with this map. Methods Configure(EntityTypeBuilder<MailMessage>) This method configures the MailMessage entity. Declaration public override void Configure(EntityTypeBuilder<MailMessage> builder) Parameters Type Name Description EntityTypeBuilder < MailMessage > builder The builder to use for the operation. Overrides CG.Purple.SqlServer.Maps.EntityMapBase<CG.Purple.SqlServer.Entities.MailMessage>.Configure(EntityTypeBuilder<CG.Purple.SqlServer.Entities.MailMessage>)"
  },
  "api/CG.Purple.SqlServer.Maps.MessageLogMap.html": {
    "href": "api/CG.Purple.SqlServer.Maps.MessageLogMap.html",
    "title": "Class MessageLogMap",
    "keywords": "Class MessageLogMap This class is an EFCore configuration map for the MessageLog entity type. Inheritance System.Object EntityMapBase < MessageLog > MessageLogMap Inherited Members EntityMapBase<MessageLog>._modelBuilder Namespace : CG.Purple.SqlServer.Maps Assembly : CG.Purple.SqlServer.dll Syntax class MessageLogMap : EntityMapBase<MessageLog> Constructors MessageLogMap(ModelBuilder) This constructor creates a new instance of the MessageLogMap class. Declaration public MessageLogMap(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder to use with this map. Methods Configure(EntityTypeBuilder<MessageLog>) This method configures the MessageLog entity. Declaration public override void Configure(EntityTypeBuilder<MessageLog> builder) Parameters Type Name Description EntityTypeBuilder < MessageLog > builder The builder to use for the operation. Overrides CG.Purple.SqlServer.Maps.EntityMapBase<CG.Purple.SqlServer.Entities.MessageLog>.Configure(EntityTypeBuilder<CG.Purple.SqlServer.Entities.MessageLog>)"
  },
  "api/CG.Purple.SqlServer.Maps.MessageMap.html": {
    "href": "api/CG.Purple.SqlServer.Maps.MessageMap.html",
    "title": "Class MessageMap",
    "keywords": "Class MessageMap This class is an EFCore configuration map for the Message entity type. Inheritance System.Object EntityMapBase < Message > MessageMap Inherited Members EntityMapBase<Message>._modelBuilder Namespace : CG.Purple.SqlServer.Maps Assembly : CG.Purple.SqlServer.dll Syntax class MessageMap : EntityMapBase<Message> Constructors MessageMap(ModelBuilder) This constructor creates a new instance of the MessageMap class. Declaration public MessageMap(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder to use with this map. Methods Configure(EntityTypeBuilder<Message>) This method configures the Message entity. Declaration public override void Configure(EntityTypeBuilder<Message> builder) Parameters Type Name Description EntityTypeBuilder < Message > builder The builder to use for the operation. Overrides CG.Purple.SqlServer.Maps.EntityMapBase<CG.Purple.SqlServer.Entities.Message>.Configure(EntityTypeBuilder<CG.Purple.SqlServer.Entities.Message>)"
  },
  "api/CG.Purple.SqlServer.Maps.MessagePropertyMap.html": {
    "href": "api/CG.Purple.SqlServer.Maps.MessagePropertyMap.html",
    "title": "Class MessagePropertyMap",
    "keywords": "Class MessagePropertyMap This class is an EFCore configuration map for the MessageProperty entity type. Inheritance System.Object EntityMapBase < MessageProperty > MessagePropertyMap Inherited Members EntityMapBase<MessageProperty>._modelBuilder Namespace : CG.Purple.SqlServer.Maps Assembly : CG.Purple.SqlServer.dll Syntax class MessagePropertyMap : EntityMapBase<MessageProperty> Constructors MessagePropertyMap(ModelBuilder) This constructor creates a new instance of the MessagePropertyMap class. Declaration public MessagePropertyMap(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder to use with this map. Methods Configure(EntityTypeBuilder<MessageProperty>) This method configures the MessageProperty entity. Declaration public override void Configure(EntityTypeBuilder<MessageProperty> builder) Parameters Type Name Description EntityTypeBuilder < MessageProperty > builder The builder to use for the operation. Overrides CG.Purple.SqlServer.Maps.EntityMapBase<CG.Purple.SqlServer.Entities.MessageProperty>.Configure(EntityTypeBuilder<CG.Purple.SqlServer.Entities.MessageProperty>)"
  },
  "api/CG.Purple.SqlServer.Maps.MimeTypeMap.html": {
    "href": "api/CG.Purple.SqlServer.Maps.MimeTypeMap.html",
    "title": "Class MimeTypeMap",
    "keywords": "Class MimeTypeMap This class is an EFCore configuration map for the MimeType entity type. Inheritance System.Object EntityMapBase < MimeType > MimeTypeMap Inherited Members EntityMapBase<MimeType>._modelBuilder Namespace : CG.Purple.SqlServer.Maps Assembly : CG.Purple.SqlServer.dll Syntax class MimeTypeMap : EntityMapBase<MimeType> Constructors MimeTypeMap(ModelBuilder) This constructor creates a new instance of the MimeTypeMap class. Declaration public MimeTypeMap(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder to use with this map. Methods Configure(EntityTypeBuilder<MimeType>) This method configures the MimeType entity. Declaration public override void Configure(EntityTypeBuilder<MimeType> builder) Parameters Type Name Description EntityTypeBuilder < MimeType > builder The builder to use for the operation. Overrides CG.Purple.SqlServer.Maps.EntityMapBase<CG.Purple.SqlServer.Entities.MimeType>.Configure(EntityTypeBuilder<CG.Purple.SqlServer.Entities.MimeType>)"
  },
  "api/CG.Purple.SqlServer.Maps.ParameterTypeMap.html": {
    "href": "api/CG.Purple.SqlServer.Maps.ParameterTypeMap.html",
    "title": "Class ParameterTypeMap",
    "keywords": "Class ParameterTypeMap This class is an EFCore configuration map for the ParameterType entity type. Inheritance System.Object EntityMapBase < ParameterType > ParameterTypeMap Inherited Members EntityMapBase<ParameterType>._modelBuilder Namespace : CG.Purple.SqlServer.Maps Assembly : CG.Purple.SqlServer.dll Syntax class ParameterTypeMap : EntityMapBase<ParameterType> Constructors ParameterTypeMap(ModelBuilder) This constructor creates a new instance of the ParameterTypeMap class. Declaration public ParameterTypeMap(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder to use with this map. Methods Configure(EntityTypeBuilder<ParameterType>) This method configures the ParameterType entity. Declaration public override void Configure(EntityTypeBuilder<ParameterType> builder) Parameters Type Name Description EntityTypeBuilder < ParameterType > builder The builder to use for the operation. Overrides CG.Purple.SqlServer.Maps.EntityMapBase<CG.Purple.SqlServer.Entities.ParameterType>.Configure(EntityTypeBuilder<CG.Purple.SqlServer.Entities.ParameterType>)"
  },
  "api/CG.Purple.SqlServer.Maps.PropertyTypeMap.html": {
    "href": "api/CG.Purple.SqlServer.Maps.PropertyTypeMap.html",
    "title": "Class PropertyTypeMap",
    "keywords": "Class PropertyTypeMap This class is an EFCore configuration map for the PropertyType entity type. Inheritance System.Object EntityMapBase < PropertyType > PropertyTypeMap Inherited Members EntityMapBase<PropertyType>._modelBuilder Namespace : CG.Purple.SqlServer.Maps Assembly : CG.Purple.SqlServer.dll Syntax class PropertyTypeMap : EntityMapBase<PropertyType> Constructors PropertyTypeMap(ModelBuilder) This constructor creates a new instance of the PropertyTypeMap class. Declaration public PropertyTypeMap(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder to use with this map. Methods Configure(EntityTypeBuilder<PropertyType>) This method configures the PropertyType entity. Declaration public override void Configure(EntityTypeBuilder<PropertyType> builder) Parameters Type Name Description EntityTypeBuilder < PropertyType > builder The builder to use for the operation. Overrides CG.Purple.SqlServer.Maps.EntityMapBase<CG.Purple.SqlServer.Entities.PropertyType>.Configure(EntityTypeBuilder<CG.Purple.SqlServer.Entities.PropertyType>)"
  },
  "api/CG.Purple.SqlServer.Maps.ProviderParameterMap.html": {
    "href": "api/CG.Purple.SqlServer.Maps.ProviderParameterMap.html",
    "title": "Class ProviderParameterMap",
    "keywords": "Class ProviderParameterMap This class is an EFCore configuration map for the ProviderParameter entity type. Inheritance System.Object EntityMapBase < ProviderParameter > ProviderParameterMap Inherited Members EntityMapBase<ProviderParameter>._modelBuilder Namespace : CG.Purple.SqlServer.Maps Assembly : CG.Purple.SqlServer.dll Syntax class ProviderParameterMap : EntityMapBase<ProviderParameter> Constructors ProviderParameterMap(ModelBuilder) This constructor creates a new instance of the ProviderParameterMap class. Declaration public ProviderParameterMap(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder to use with this map. Methods Configure(EntityTypeBuilder<ProviderParameter>) This method configures the ProviderParameter entity. Declaration public override void Configure(EntityTypeBuilder<ProviderParameter> builder) Parameters Type Name Description EntityTypeBuilder < ProviderParameter > builder The builder to use for the operation. Overrides CG.Purple.SqlServer.Maps.EntityMapBase<CG.Purple.SqlServer.Entities.ProviderParameter>.Configure(EntityTypeBuilder<CG.Purple.SqlServer.Entities.ProviderParameter>)"
  },
  "api/CG.Purple.SqlServer.Maps.ProviderTypeMap.html": {
    "href": "api/CG.Purple.SqlServer.Maps.ProviderTypeMap.html",
    "title": "Class ProviderTypeMap",
    "keywords": "Class ProviderTypeMap This class is an EFCore configuration map for the ProviderType entity type. Inheritance System.Object EntityMapBase < ProviderType > ProviderTypeMap Inherited Members EntityMapBase<ProviderType>._modelBuilder Namespace : CG.Purple.SqlServer.Maps Assembly : CG.Purple.SqlServer.dll Syntax class ProviderTypeMap : EntityMapBase<ProviderType> Constructors ProviderTypeMap(ModelBuilder) This constructor creates a new instance of the ProviderTypeMap class. Declaration public ProviderTypeMap(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder to use with this map. Methods Configure(EntityTypeBuilder<ProviderType>) This method configures the ProviderType entity. Declaration public override void Configure(EntityTypeBuilder<ProviderType> builder) Parameters Type Name Description EntityTypeBuilder < ProviderType > builder The builder to use for the operation. Overrides CG.Purple.SqlServer.Maps.EntityMapBase<CG.Purple.SqlServer.Entities.ProviderType>.Configure(EntityTypeBuilder<CG.Purple.SqlServer.Entities.ProviderType>)"
  },
  "api/CG.Purple.SqlServer.Maps.TextMessageMap.html": {
    "href": "api/CG.Purple.SqlServer.Maps.TextMessageMap.html",
    "title": "Class TextMessageMap",
    "keywords": "Class TextMessageMap This class is an EFCore configuration map for the TextMessage entity type. Inheritance System.Object EntityMapBase < TextMessage > TextMessageMap Inherited Members EntityMapBase<TextMessage>._modelBuilder Namespace : CG.Purple.SqlServer.Maps Assembly : CG.Purple.SqlServer.dll Syntax class TextMessageMap : EntityMapBase<TextMessage> Constructors TextMessageMap(ModelBuilder) This constructor creates a new instance of the TextMessageMap class. Declaration public TextMessageMap(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder to use with this map. Methods Configure(EntityTypeBuilder<TextMessage>) This method configures the TextMessage entity. Declaration public override void Configure(EntityTypeBuilder<TextMessage> builder) Parameters Type Name Description EntityTypeBuilder < TextMessage > builder The builder to use for the operation. Overrides CG.Purple.SqlServer.Maps.EntityMapBase<CG.Purple.SqlServer.Entities.TextMessage>.Configure(EntityTypeBuilder<CG.Purple.SqlServer.Entities.TextMessage>)"
  },
  "api/CG.Purple.SqlServer.Migrations.html": {
    "href": "api/CG.Purple.SqlServer.Migrations.html",
    "title": "Namespace CG.Purple.SqlServer.Migrations",
    "keywords": "Namespace CG.Purple.SqlServer.Migrations Classes InitialCreate PurpleDbContextModelSnapshot"
  },
  "api/CG.Purple.SqlServer.Migrations.InitialCreate.html": {
    "href": "api/CG.Purple.SqlServer.Migrations.InitialCreate.html",
    "title": "Class InitialCreate",
    "keywords": "Class InitialCreate Inheritance System.Object Microsoft.EntityFrameworkCore.Migrations.Migration InitialCreate Inherited Members Microsoft.EntityFrameworkCore.Migrations.Migration.InitialDatabase Microsoft.EntityFrameworkCore.Migrations.Migration.TargetModel Microsoft.EntityFrameworkCore.Migrations.Migration.UpOperations Microsoft.EntityFrameworkCore.Migrations.Migration.DownOperations Microsoft.EntityFrameworkCore.Migrations.Migration.ActiveProvider System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.SqlServer.Migrations Assembly : CG.Purple.SqlServer.dll Syntax [DbContext(typeof(PurpleDbContext))] [Migration(\"20221205191157_InitialCreate\")] public class InitialCreate : Migration Methods BuildTargetModel(ModelBuilder) Declaration protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters Type Name Description Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder Overrides Microsoft.EntityFrameworkCore.Migrations.Migration.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder) Down(MigrationBuilder) Declaration protected override void Down(MigrationBuilder migrationBuilder) Parameters Type Name Description Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder migrationBuilder Overrides Microsoft.EntityFrameworkCore.Migrations.Migration.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder) Up(MigrationBuilder) Declaration protected override void Up(MigrationBuilder migrationBuilder) Parameters Type Name Description Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder migrationBuilder Overrides Microsoft.EntityFrameworkCore.Migrations.Migration.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)"
  },
  "api/CG.Purple.SqlServer.Migrations.PurpleDbContextModelSnapshot.html": {
    "href": "api/CG.Purple.SqlServer.Migrations.PurpleDbContextModelSnapshot.html",
    "title": "Class PurpleDbContextModelSnapshot",
    "keywords": "Class PurpleDbContextModelSnapshot Inheritance System.Object Microsoft.EntityFrameworkCore.Infrastructure.ModelSnapshot PurpleDbContextModelSnapshot Inherited Members Microsoft.EntityFrameworkCore.Infrastructure.ModelSnapshot.Model System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.SqlServer.Migrations Assembly : CG.Purple.SqlServer.dll Syntax [DbContext(typeof(PurpleDbContext))] class PurpleDbContextModelSnapshot : ModelSnapshot Methods BuildModel(ModelBuilder) Declaration protected override void BuildModel(ModelBuilder modelBuilder) Parameters Type Name Description Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder Overrides Microsoft.EntityFrameworkCore.Infrastructure.ModelSnapshot.BuildModel(Microsoft.EntityFrameworkCore.ModelBuilder)"
  },
  "api/CG.Purple.SqlServer.Options.DalOptions.html": {
    "href": "api/CG.Purple.SqlServer.Options.DalOptions.html",
    "title": "Class DalOptions",
    "keywords": "Class DalOptions This class contains configuration settings for the data access layer. Inheritance System.Object DalOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Purple.SqlServer.Options Assembly : CG.Purple.SqlServer.dll Syntax public class DalOptions Properties ConnectionString This property contains the connection string for the DAL. Declaration public string ConnectionString { get; set; } Property Value Type Description System.String DropDatabaseOnStartup This property directs the DAL to drop the underlying database on startup. Declaration public bool DropDatabaseOnStartup { get; set; } Property Value Type Description System.Boolean Remarks This property is ignored in production. MigrateDatabaseOnStartup This property directs the DAL to migrate the underlying database on startup. Declaration public bool MigrateDatabaseOnStartup { get; set; } Property Value Type Description System.Boolean Remarks This property is ignored in production. If the DropDatabaseOnStartup property is set to true then migrations are always applied, since the database is then dropped and re-created. This property allows migrations to be applied without dropping and re-creating the database."
  },
  "api/CG.Purple.SqlServer.Options.html": {
    "href": "api/CG.Purple.SqlServer.Options.html",
    "title": "Namespace CG.Purple.SqlServer.Options",
    "keywords": "Namespace CG.Purple.SqlServer.Options Classes DalOptions This class contains configuration settings for the data access layer."
  },
  "api/CG.Purple.SqlServer.PurpleDbContext.html": {
    "href": "api/CG.Purple.SqlServer.PurpleDbContext.html",
    "title": "Class PurpleDbContext",
    "keywords": "Class PurpleDbContext This class is an EFCore data context for the CG.Purple project\"> project. Inheritance System.Object PurpleDbContext Namespace : CG.Purple.SqlServer Assembly : CG.Purple.SqlServer.dll Syntax class PurpleDbContext : DbContext Constructors PurpleDbContext(DbContextOptions<PurpleDbContext>) This constructor creates a new instance of the PurpleDbContext class. Declaration public PurpleDbContext(DbContextOptions<PurpleDbContext> options) Parameters Type Name Description DbContextOptions < PurpleDbContext > options The options to use with the data-context. Properties Attachments This property contains the collection of attachments. Declaration public virtual DbSet<Attachment> Attachments { get; set; } Property Value Type Description DbSet < Attachment > FileTypes This property contains the collection of file types. Declaration public virtual DbSet<FileType> FileTypes { get; set; } Property Value Type Description DbSet < FileType > MailMessages This property contains the collection of mail messages. Declaration public virtual DbSet<MailMessage> MailMessages { get; set; } Property Value Type Description DbSet < MailMessage > MessageLogs This property contains the collection of pipeline events. Declaration public virtual DbSet<MessageLog> MessageLogs { get; set; } Property Value Type Description DbSet < MessageLog > MessageProperties This property contains the collection of message properties. Declaration public virtual DbSet<MessageProperty> MessageProperties { get; set; } Property Value Type Description DbSet < MessageProperty > Messages This property contains the collection of messages. Declaration public virtual DbSet<Message> Messages { get; set; } Property Value Type Description DbSet < Message > MimeTypes This property contains the collection of MIME types. Declaration public virtual DbSet<MimeType> MimeTypes { get; set; } Property Value Type Description DbSet < MimeType > ParameterTypes This property contains the collection of parameter types. Declaration public virtual DbSet<ParameterType> ParameterTypes { get; set; } Property Value Type Description DbSet < ParameterType > PropertyTypes This property contains the collection of property types. Declaration public virtual DbSet<PropertyType> PropertyTypes { get; set; } Property Value Type Description DbSet < PropertyType > ProviderLogs This property contains the collection of provider log entries. Declaration public virtual DbSet<MessageLog> ProviderLogs { get; set; } Property Value Type Description DbSet < MessageLog > ProviderParameters This property contains the collection of provider parameters. Declaration public virtual DbSet<ProviderParameter> ProviderParameters { get; set; } Property Value Type Description DbSet < ProviderParameter > ProviderTypes This property contains the collection of message provider types. Declaration public virtual DbSet<ProviderType> ProviderTypes { get; set; } Property Value Type Description DbSet < ProviderType > TextMessages This property contains the collection of text messages. Declaration public virtual DbSet<TextMessage> TextMessages { get; set; } Property Value Type Description DbSet < TextMessage > Methods OnModelCreating(ModelBuilder) This method is called to create the data model. Declaration protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The builder to use for the operation."
  },
  "api/CG.Purple.SqlServer.Repositories.AttachmentRepository.html": {
    "href": "api/CG.Purple.SqlServer.Repositories.AttachmentRepository.html",
    "title": "Class AttachmentRepository",
    "keywords": "Class AttachmentRepository This class is an EFCORE implementation of the interface. Inheritance System.Object AttachmentRepository Namespace : CG.Purple.SqlServer.Repositories Assembly : CG.Purple.SqlServer.dll Syntax class AttachmentRepository : IAttachmentRepository Constructors AttachmentRepository(IDbContextFactory<PurpleDbContext>, IMapper, ILogger<IAttachmentRepository>) This constructor creates a new instance of the AttachmentRepository class. Declaration public AttachmentRepository(IDbContextFactory<PurpleDbContext> dbContextFactory, IMapper mapper, ILogger<IAttachmentRepository> logger) Parameters Type Name Description IDbContextFactory < PurpleDbContext > dbContextFactory The EFCORE data-context factory to use with this repository. IMapper mapper The auto-mapper to use with this repository. ILogger < IAttachmentRepository > logger The logger to use with this repository. Fields _dbContextFactory This field contains the EFCORE data-context factory for this repository. Declaration protected readonly IDbContextFactory<PurpleDbContext> _dbContextFactory Field Value Type Description IDbContextFactory < PurpleDbContext > _logger This field contains the logger for this repository. Declaration protected readonly ILogger<IAttachmentRepository> _logger Field Value Type Description ILogger < IAttachmentRepository > _mapper This field contains the auto-mapper for this repository. Declaration protected readonly IMapper _mapper Field Value Type Description IMapper Methods AnyAsync(CancellationToken) Declaration public virtual async Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Boolean > CountAsync(CancellationToken) Declaration public virtual async Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Int64 > CreateAsync(Attachment, CancellationToken) Declaration public virtual async Task<Attachment> CreateAsync(Attachment attachment, CancellationToken cancellationToken = null) Parameters Type Name Description Attachment attachment CancellationToken cancellationToken Returns Type Description Task < Attachment > DeleteAsync(Attachment, CancellationToken) Declaration public virtual async Task DeleteAsync(Attachment attachment, CancellationToken cancellationToken = null) Parameters Type Name Description Attachment attachment CancellationToken cancellationToken Returns Type Description Task FindAllAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<Attachment>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < Attachment >> UpdateAsync(Attachment, CancellationToken) Declaration public virtual async Task<Attachment> UpdateAsync(Attachment attachment, CancellationToken cancellationToken = null) Parameters Type Name Description Attachment attachment CancellationToken cancellationToken Returns Type Description Task < Attachment >"
  },
  "api/CG.Purple.SqlServer.Repositories.FileTypeRepository.html": {
    "href": "api/CG.Purple.SqlServer.Repositories.FileTypeRepository.html",
    "title": "Class FileTypeRepository",
    "keywords": "Class FileTypeRepository This class is an EFCORE implementation of the interface. Inheritance System.Object FileTypeRepository Namespace : CG.Purple.SqlServer.Repositories Assembly : CG.Purple.SqlServer.dll Syntax class FileTypeRepository : IFileTypeRepository Constructors FileTypeRepository(IDbContextFactory<PurpleDbContext>, IMapper, ILogger<IFileTypeRepository>) This constructor creates a new instance of the FileTypeRepository class. Declaration public FileTypeRepository(IDbContextFactory<PurpleDbContext> dbContextFactory, IMapper mapper, ILogger<IFileTypeRepository> logger) Parameters Type Name Description IDbContextFactory < PurpleDbContext > dbContextFactory The EFCORE data-context factory to use with this repository. IMapper mapper The auto-mapper to use with this repository. ILogger < IFileTypeRepository > logger The logger to use with this repository. Fields _dbContextFactory This field contains the EFCORE data-context factory for this repository. Declaration protected readonly IDbContextFactory<PurpleDbContext> _dbContextFactory Field Value Type Description IDbContextFactory < PurpleDbContext > _logger This field contains the logger for this repository. Declaration protected readonly ILogger<IFileTypeRepository> _logger Field Value Type Description ILogger < IFileTypeRepository > _mapper This field contains the auto-mapper for this repository. Declaration protected readonly IMapper _mapper Field Value Type Description IMapper Methods AnyAsync(CancellationToken) Declaration public virtual async Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Boolean > CountAsync(CancellationToken) Declaration public virtual async Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Int64 > CreateAsync(FileType, CancellationToken) Declaration public virtual async Task<FileType> CreateAsync(FileType fileType, CancellationToken cancellationToken = null) Parameters Type Name Description FileType fileType CancellationToken cancellationToken Returns Type Description Task < FileType > DeleteAsync(FileType, CancellationToken) Declaration public virtual async Task DeleteAsync(FileType fileType, CancellationToken cancellationToken = null) Parameters Type Name Description FileType fileType CancellationToken cancellationToken Returns Type Description Task FindAllAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<FileType>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < FileType >> FindByExtensionAsync(String, CancellationToken) Declaration public virtual async Task<FileType?> FindByExtensionAsync(string extension, CancellationToken cancellationToken = null) Parameters Type Name Description System.String extension CancellationToken cancellationToken Returns Type Description Task < System.Nullable < FileType >> UpdateAsync(FileType, CancellationToken) Declaration public virtual async Task<FileType> UpdateAsync(FileType fileType, CancellationToken cancellationToken = null) Parameters Type Name Description FileType fileType CancellationToken cancellationToken Returns Type Description Task < FileType >"
  },
  "api/CG.Purple.SqlServer.Repositories.html": {
    "href": "api/CG.Purple.SqlServer.Repositories.html",
    "title": "Namespace CG.Purple.SqlServer.Repositories",
    "keywords": "Namespace CG.Purple.SqlServer.Repositories Classes AttachmentRepository This class is an EFCORE implementation of the interface. FileTypeRepository This class is an EFCORE implementation of the interface. MailMessageRepository This class is an EFCORE implementation of the interface. MessageLogRepository This class is an EFCORE implementation of the interface. MessagePropertyRepository This class is an EFCORE implementation of the interface. MessageRepository This class is an EFCORE implementation of the interface. MimeTypeRepository This class is an EFCORE implementation of the interface. ParameterTypeRepository This class is an EFCORE implementation of the interface. PropertyTypeRepository This class is an EFCORE implementation of the interface. ProviderParameterRepository This class is an EFCORE implementation of the interface. ProviderTypeRepository This class is an EFCORE implementation of the interface. TextMessageRepository This class is an EFCORE implementation of the interface."
  },
  "api/CG.Purple.SqlServer.Repositories.MailMessageRepository.html": {
    "href": "api/CG.Purple.SqlServer.Repositories.MailMessageRepository.html",
    "title": "Class MailMessageRepository",
    "keywords": "Class MailMessageRepository This class is an EFCORE implementation of the interface. Inheritance System.Object MailMessageRepository Namespace : CG.Purple.SqlServer.Repositories Assembly : CG.Purple.SqlServer.dll Syntax class MailMessageRepository : IMailMessageRepository Constructors MailMessageRepository(IDbContextFactory<PurpleDbContext>, IMapper, ILogger<IMailMessageRepository>) This constructor creates a new instance of the MailMessageRepository class. Declaration public MailMessageRepository(IDbContextFactory<PurpleDbContext> dbContextFactory, IMapper mapper, ILogger<IMailMessageRepository> logger) Parameters Type Name Description IDbContextFactory < PurpleDbContext > dbContextFactory The EFCORE data-context factory to use with this repository. IMapper mapper The auto-mapper to use with this repository. ILogger < IMailMessageRepository > logger The logger to use with this repository. Fields _dbContextFactory This field contains the EFCORE data-context factory for this repository. Declaration protected readonly IDbContextFactory<PurpleDbContext> _dbContextFactory Field Value Type Description IDbContextFactory < PurpleDbContext > _logger This field contains the logger for this repository. Declaration protected readonly ILogger<IMailMessageRepository> _logger Field Value Type Description ILogger < IMailMessageRepository > _mapper This field contains the auto-mapper for this repository. Declaration protected readonly IMapper _mapper Field Value Type Description IMapper Methods AnyAsync(CancellationToken) Declaration public virtual async Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Boolean > CountAsync(CancellationToken) Declaration public virtual async Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Int64 > CreateAsync(MailMessage, CancellationToken) Declaration public virtual async Task<MailMessage> CreateAsync(MailMessage mailMessage, CancellationToken cancellationToken = null) Parameters Type Name Description MailMessage mailMessage CancellationToken cancellationToken Returns Type Description Task < MailMessage > FindAllAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<MailMessage>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < MailMessage >> FindByIdAsync(Int64, CancellationToken) Declaration public virtual async Task<MailMessage?> FindByIdAsync(long id, CancellationToken cancellationToken = null) Parameters Type Name Description System.Int64 id CancellationToken cancellationToken Returns Type Description Task < System.Nullable < MailMessage >> FindByKeyAsync(String, CancellationToken) Declaration public virtual async Task<MailMessage?> FindByKeyAsync(string messageKey, CancellationToken cancellationToken = null) Parameters Type Name Description System.String messageKey CancellationToken cancellationToken Returns Type Description Task < System.Nullable < MailMessage >> UpdateAsync(MailMessage, CancellationToken) Declaration public virtual async Task<MailMessage> UpdateAsync(MailMessage mailMessage, CancellationToken cancellationToken = null) Parameters Type Name Description MailMessage mailMessage CancellationToken cancellationToken Returns Type Description Task < MailMessage >"
  },
  "api/CG.Purple.SqlServer.Repositories.MessageLogRepository.html": {
    "href": "api/CG.Purple.SqlServer.Repositories.MessageLogRepository.html",
    "title": "Class MessageLogRepository",
    "keywords": "Class MessageLogRepository This class is an EFCORE implementation of the interface. Inheritance System.Object MessageLogRepository Namespace : CG.Purple.SqlServer.Repositories Assembly : CG.Purple.SqlServer.dll Syntax class MessageLogRepository : IMessageLogRepository Constructors MessageLogRepository(IDbContextFactory<PurpleDbContext>, IMapper, ILogger<IMessageLogRepository>) This constructor creates a new instance of the MessageLogRepository class. Declaration public MessageLogRepository(IDbContextFactory<PurpleDbContext> dbContextFactory, IMapper mapper, ILogger<IMessageLogRepository> logger) Parameters Type Name Description IDbContextFactory < PurpleDbContext > dbContextFactory The EFCORE data-context factory to use with this repository. IMapper mapper The auto-mapper to use with this repository. ILogger < IMessageLogRepository > logger The logger to use with this repository. Fields _dbContextFactory This field contains the EFCORE data-context factory for this repository. Declaration protected readonly IDbContextFactory<PurpleDbContext> _dbContextFactory Field Value Type Description IDbContextFactory < PurpleDbContext > _logger This field contains the logger for this repository. Declaration protected readonly ILogger<IMessageLogRepository> _logger Field Value Type Description ILogger < IMessageLogRepository > _mapper This field contains the auto-mapper for this repository. Declaration protected readonly IMapper _mapper Field Value Type Description IMapper Methods AnyAsync(CancellationToken) Declaration public virtual async Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Boolean > CountAsync(CancellationToken) Declaration public virtual async Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Int64 > CreateAsync(MessageLog, CancellationToken) Declaration public virtual async Task<MessageLog> CreateAsync(MessageLog messageLog, CancellationToken cancellationToken = null) Parameters Type Name Description MessageLog messageLog CancellationToken cancellationToken Returns Type Description Task < MessageLog > DeleteAsync(MessageLog, CancellationToken) Declaration public virtual async Task DeleteAsync(MessageLog messageLog, CancellationToken cancellationToken = null) Parameters Type Name Description MessageLog messageLog CancellationToken cancellationToken Returns Type Description Task FindAllAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<MessageLog>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < MessageLog >> FindByMessageAsync(Message, CancellationToken) Declaration public virtual async Task<IEnumerable<MessageLog>> FindByMessageAsync(Message message, CancellationToken cancellationToken = null) Parameters Type Name Description Message message CancellationToken cancellationToken Returns Type Description Task < IEnumerable < MessageLog >>"
  },
  "api/CG.Purple.SqlServer.Repositories.MessagePropertyRepository.html": {
    "href": "api/CG.Purple.SqlServer.Repositories.MessagePropertyRepository.html",
    "title": "Class MessagePropertyRepository",
    "keywords": "Class MessagePropertyRepository This class is an EFCORE implementation of the interface. Inheritance System.Object MessagePropertyRepository Namespace : CG.Purple.SqlServer.Repositories Assembly : CG.Purple.SqlServer.dll Syntax class MessagePropertyRepository : IMessagePropertyRepository Constructors MessagePropertyRepository(IDbContextFactory<PurpleDbContext>, IMapper, ILogger<IMessagePropertyRepository>) This constructor creates a new instance of the MessagePropertyRepository class. Declaration public MessagePropertyRepository(IDbContextFactory<PurpleDbContext> dbContextFactory, IMapper mapper, ILogger<IMessagePropertyRepository> logger) Parameters Type Name Description IDbContextFactory < PurpleDbContext > dbContextFactory The EFCORE data-context factory to use with this repository. IMapper mapper The auto-mapper to use with this repository. ILogger < IMessagePropertyRepository > logger The logger to use with this repository. Fields _dbContextFactory This field contains the EFCORE data-context factory for this repository. Declaration protected readonly IDbContextFactory<PurpleDbContext> _dbContextFactory Field Value Type Description IDbContextFactory < PurpleDbContext > _logger This field contains the logger for this repository. Declaration protected readonly ILogger<IMessagePropertyRepository> _logger Field Value Type Description ILogger < IMessagePropertyRepository > _mapper This field contains the auto-mapper for this repository. Declaration protected readonly IMapper _mapper Field Value Type Description IMapper Methods AnyAsync(CancellationToken) Declaration public virtual async Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Boolean > CountAsync(CancellationToken) Declaration public virtual async Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Int64 > CreateAsync(MessageProperty, CancellationToken) Declaration public virtual async Task<MessageProperty> CreateAsync(MessageProperty messageProperty, CancellationToken cancellationToken = null) Parameters Type Name Description MessageProperty messageProperty CancellationToken cancellationToken Returns Type Description Task < MessageProperty > DeleteAsync(MessageProperty, CancellationToken) Declaration public virtual async Task DeleteAsync(MessageProperty messageProperty, CancellationToken cancellationToken = null) Parameters Type Name Description MessageProperty messageProperty CancellationToken cancellationToken Returns Type Description Task UpdateAsync(MessageProperty, CancellationToken) Declaration public virtual async Task<MessageProperty> UpdateAsync(MessageProperty messageProperty, CancellationToken cancellationToken = null) Parameters Type Name Description MessageProperty messageProperty CancellationToken cancellationToken Returns Type Description Task < MessageProperty >"
  },
  "api/CG.Purple.SqlServer.Repositories.MessageRepository.html": {
    "href": "api/CG.Purple.SqlServer.Repositories.MessageRepository.html",
    "title": "Class MessageRepository",
    "keywords": "Class MessageRepository This class is an EFCORE implementation of the interface. Inheritance System.Object MessageRepository Namespace : CG.Purple.SqlServer.Repositories Assembly : CG.Purple.SqlServer.dll Syntax class MessageRepository : IMessageRepository Constructors MessageRepository(IDbContextFactory<PurpleDbContext>, IMapper, ILogger<IMessageRepository>) This constructor creates a new instance of the MessageRepository class. Declaration public MessageRepository(IDbContextFactory<PurpleDbContext> dbContextFactory, IMapper mapper, ILogger<IMessageRepository> logger) Parameters Type Name Description IDbContextFactory < PurpleDbContext > dbContextFactory The EFCORE data-context factory to use with this repository. IMapper mapper The auto-mapper to use with this repository. ILogger < IMessageRepository > logger The logger to use with this repository. Fields _dbContextFactory This field contains the EFCORE data-context factory for this repository. Declaration protected readonly IDbContextFactory<PurpleDbContext> _dbContextFactory Field Value Type Description IDbContextFactory < PurpleDbContext > _logger This field contains the logger for this repository. Declaration protected readonly ILogger<IMessageRepository> _logger Field Value Type Description ILogger < IMessageRepository > _mapper This field contains the auto-mapper for this repository. Declaration protected readonly IMapper _mapper Field Value Type Description IMapper Methods AnyAsync(CancellationToken) Declaration public virtual async Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Boolean > CountAsync(CancellationToken) Declaration public virtual async Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Int64 > DeleteAsync(Message, CancellationToken) Declaration public virtual async Task DeleteAsync(Message message, CancellationToken cancellationToken = null) Parameters Type Name Description Message message CancellationToken cancellationToken Returns Type Description Task FindAllAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<Message>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < Message >> FindByIdAsync(Int64, CancellationToken) Declaration public virtual async Task<Message?> FindByIdAsync(long id, CancellationToken cancellationToken = null) Parameters Type Name Description System.Int64 id CancellationToken cancellationToken Returns Type Description Task < System.Nullable < Message >> FindByKeyAsync(String, CancellationToken) Declaration public virtual async Task<Message?> FindByKeyAsync(string messageKey, CancellationToken cancellationToken = null) Parameters Type Name Description System.String messageKey CancellationToken cancellationToken Returns Type Description Task < System.Nullable < Message >> FindReadyToArchiveAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<Message>> FindReadyToArchiveAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < Message >> FindReadyToProcessAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<Message>> FindReadyToProcessAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < Message >> FindReadyToRetryAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<Message>> FindReadyToRetryAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < Message >> UpdateAsync(Message, CancellationToken) Declaration public virtual async Task<Message> UpdateAsync(Message message, CancellationToken cancellationToken = null) Parameters Type Name Description Message message CancellationToken cancellationToken Returns Type Description Task < Message >"
  },
  "api/CG.Purple.SqlServer.Repositories.MimeTypeRepository.html": {
    "href": "api/CG.Purple.SqlServer.Repositories.MimeTypeRepository.html",
    "title": "Class MimeTypeRepository",
    "keywords": "Class MimeTypeRepository This class is an EFCORE implementation of the interface. Inheritance System.Object MimeTypeRepository Namespace : CG.Purple.SqlServer.Repositories Assembly : CG.Purple.SqlServer.dll Syntax class MimeTypeRepository : IMimeTypeRepository Constructors MimeTypeRepository(IDbContextFactory<PurpleDbContext>, IMapper, ILogger<IMimeTypeRepository>) This constructor creates a new instance of the MimeTypeRepository class. Declaration public MimeTypeRepository(IDbContextFactory<PurpleDbContext> dbContextFactory, IMapper mapper, ILogger<IMimeTypeRepository> logger) Parameters Type Name Description IDbContextFactory < PurpleDbContext > dbContextFactory The EFCORE data-context factory to use with this repository. IMapper mapper The auto-mapper to use with this repository. ILogger < IMimeTypeRepository > logger The logger to use with this repository. Fields _dbContextFactory This field contains the EFCORE data-context factory for this repository. Declaration protected readonly IDbContextFactory<PurpleDbContext> _dbContextFactory Field Value Type Description IDbContextFactory < PurpleDbContext > _logger This field contains the logger for this repository. Declaration protected readonly ILogger<IMimeTypeRepository> _logger Field Value Type Description ILogger < IMimeTypeRepository > _mapper This field contains the auto-mapper for this repository. Declaration protected readonly IMapper _mapper Field Value Type Description IMapper Methods AnyAsync(CancellationToken) Declaration public virtual async Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Boolean > CountAsync(CancellationToken) Declaration public virtual async Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Int64 > CreateAsync(MimeType, CancellationToken) Declaration public virtual async Task<MimeType> CreateAsync(MimeType mimeType, CancellationToken cancellationToken = null) Parameters Type Name Description MimeType mimeType CancellationToken cancellationToken Returns Type Description Task < MimeType > DeleteAsync(MimeType, CancellationToken) Declaration public virtual async Task DeleteAsync(MimeType mimeType, CancellationToken cancellationToken = null) Parameters Type Name Description MimeType mimeType CancellationToken cancellationToken Returns Type Description Task FindAllAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<MimeType>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < MimeType >> FindByExtensionAsync(String, CancellationToken) Declaration public virtual async Task<MimeType?> FindByExtensionAsync(string extension, CancellationToken cancellationToken = null) Parameters Type Name Description System.String extension CancellationToken cancellationToken Returns Type Description Task < System.Nullable < MimeType >> FindByIdAsync(Int32, CancellationToken) Declaration public virtual async Task<MimeType?> FindByIdAsync(int id, CancellationToken cancellationToken = null) Parameters Type Name Description System.Int32 id CancellationToken cancellationToken Returns Type Description Task < System.Nullable < MimeType >> FindByTypeAsync(String, String, CancellationToken) Declaration public virtual async Task<IEnumerable<MimeType>> FindByTypeAsync(string type, string subType, CancellationToken cancellationToken = null) Parameters Type Name Description System.String type System.String subType CancellationToken cancellationToken Returns Type Description Task < IEnumerable < MimeType >> UpdateAsync(MimeType, CancellationToken) Declaration public virtual async Task<MimeType> UpdateAsync(MimeType mimeType, CancellationToken cancellationToken = null) Parameters Type Name Description MimeType mimeType CancellationToken cancellationToken Returns Type Description Task < MimeType >"
  },
  "api/CG.Purple.SqlServer.Repositories.ParameterTypeRepository.html": {
    "href": "api/CG.Purple.SqlServer.Repositories.ParameterTypeRepository.html",
    "title": "Class ParameterTypeRepository",
    "keywords": "Class ParameterTypeRepository This class is an EFCORE implementation of the interface. Inheritance System.Object ParameterTypeRepository Namespace : CG.Purple.SqlServer.Repositories Assembly : CG.Purple.SqlServer.dll Syntax class ParameterTypeRepository : IParameterTypeRepository Constructors ParameterTypeRepository(IDbContextFactory<PurpleDbContext>, IMapper, ILogger<IParameterTypeRepository>) This constructor creates a new instance of the ParameterTypeRepository class. Declaration public ParameterTypeRepository(IDbContextFactory<PurpleDbContext> dbContextFactory, IMapper mapper, ILogger<IParameterTypeRepository> logger) Parameters Type Name Description IDbContextFactory < PurpleDbContext > dbContextFactory The EFCORE data-context factory to use with this repository. IMapper mapper The auto-mapper to use with this repository. ILogger < IParameterTypeRepository > logger The logger to use with this repository. Fields _dbContextFactory This field contains the EFCORE data-context factory for this repository. Declaration protected readonly IDbContextFactory<PurpleDbContext> _dbContextFactory Field Value Type Description IDbContextFactory < PurpleDbContext > _logger This field contains the logger for this repository. Declaration protected readonly ILogger<IParameterTypeRepository> _logger Field Value Type Description ILogger < IParameterTypeRepository > _mapper This field contains the auto-mapper for this repository. Declaration protected readonly IMapper _mapper Field Value Type Description IMapper Methods AnyAsync(CancellationToken) Declaration public virtual async Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Boolean > CountAsync(CancellationToken) Declaration public virtual async Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Int64 > CreateAsync(ParameterType, CancellationToken) Declaration public virtual async Task<ParameterType> CreateAsync(ParameterType parameterType, CancellationToken cancellationToken = null) Parameters Type Name Description ParameterType parameterType CancellationToken cancellationToken Returns Type Description Task < ParameterType > DeleteAsync(ParameterType, CancellationToken) Declaration public virtual async Task DeleteAsync(ParameterType parameterType, CancellationToken cancellationToken = null) Parameters Type Name Description ParameterType parameterType CancellationToken cancellationToken Returns Type Description Task FindAllAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<ParameterType>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < ParameterType >> FindByNameAsync(String, CancellationToken) Declaration public virtual async Task<ParameterType?> FindByNameAsync(string name, CancellationToken cancellationToken = null) Parameters Type Name Description System.String name CancellationToken cancellationToken Returns Type Description Task < System.Nullable < ParameterType >> UpdateAsync(ParameterType, CancellationToken) Declaration public virtual async Task<ParameterType> UpdateAsync(ParameterType parameterType, CancellationToken cancellationToken = null) Parameters Type Name Description ParameterType parameterType CancellationToken cancellationToken Returns Type Description Task < ParameterType >"
  },
  "api/CG.Purple.SqlServer.Repositories.PropertyTypeRepository.html": {
    "href": "api/CG.Purple.SqlServer.Repositories.PropertyTypeRepository.html",
    "title": "Class PropertyTypeRepository",
    "keywords": "Class PropertyTypeRepository This class is an EFCORE implementation of the interface. Inheritance System.Object PropertyTypeRepository Namespace : CG.Purple.SqlServer.Repositories Assembly : CG.Purple.SqlServer.dll Syntax class PropertyTypeRepository : IPropertyTypeRepository Constructors PropertyTypeRepository(IDbContextFactory<PurpleDbContext>, IMapper, ILogger<IPropertyTypeRepository>) This constructor creates a new instance of the PropertyTypeRepository class. Declaration public PropertyTypeRepository(IDbContextFactory<PurpleDbContext> dbContextFactory, IMapper mapper, ILogger<IPropertyTypeRepository> logger) Parameters Type Name Description IDbContextFactory < PurpleDbContext > dbContextFactory The EFCORE data-context factory to use with this repository. IMapper mapper The auto-mapper to use with this repository. ILogger < IPropertyTypeRepository > logger The logger to use with this repository. Fields _dbContextFactory This field contains the EFCORE data-context factory for this repository. Declaration protected readonly IDbContextFactory<PurpleDbContext> _dbContextFactory Field Value Type Description IDbContextFactory < PurpleDbContext > _logger This field contains the logger for this repository. Declaration protected readonly ILogger<IPropertyTypeRepository> _logger Field Value Type Description ILogger < IPropertyTypeRepository > _mapper This field contains the auto-mapper for this repository. Declaration protected readonly IMapper _mapper Field Value Type Description IMapper Methods AnyAsync(CancellationToken) Declaration public virtual async Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Boolean > CountAsync(CancellationToken) Declaration public virtual async Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Int64 > CreateAsync(PropertyType, CancellationToken) Declaration public virtual async Task<PropertyType> CreateAsync(PropertyType propertyType, CancellationToken cancellationToken = null) Parameters Type Name Description PropertyType propertyType CancellationToken cancellationToken Returns Type Description Task < PropertyType > DeleteAsync(PropertyType, CancellationToken) Declaration public virtual async Task DeleteAsync(PropertyType propertyType, CancellationToken cancellationToken = null) Parameters Type Name Description PropertyType propertyType CancellationToken cancellationToken Returns Type Description Task FindAllAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<PropertyType>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < PropertyType >> FindByNameAsync(String, CancellationToken) Declaration public virtual async Task<PropertyType?> FindByNameAsync(string name, CancellationToken cancellationToken = null) Parameters Type Name Description System.String name CancellationToken cancellationToken Returns Type Description Task < System.Nullable < PropertyType >> UpdateAsync(PropertyType, CancellationToken) Declaration public virtual async Task<PropertyType> UpdateAsync(PropertyType propertyType, CancellationToken cancellationToken = null) Parameters Type Name Description PropertyType propertyType CancellationToken cancellationToken Returns Type Description Task < PropertyType >"
  },
  "api/CG.Purple.SqlServer.Repositories.ProviderParameterRepository.html": {
    "href": "api/CG.Purple.SqlServer.Repositories.ProviderParameterRepository.html",
    "title": "Class ProviderParameterRepository",
    "keywords": "Class ProviderParameterRepository This class is an EFCORE implementation of the interface. Inheritance System.Object ProviderParameterRepository Namespace : CG.Purple.SqlServer.Repositories Assembly : CG.Purple.SqlServer.dll Syntax class ProviderParameterRepository : IProviderParameterRepository Constructors ProviderParameterRepository(IDbContextFactory<PurpleDbContext>, IMapper, ILogger<IProviderParameterRepository>) This constructor creates a new instance of the ProviderParameterRepository class. Declaration public ProviderParameterRepository(IDbContextFactory<PurpleDbContext> dbContextFactory, IMapper mapper, ILogger<IProviderParameterRepository> logger) Parameters Type Name Description IDbContextFactory < PurpleDbContext > dbContextFactory The EFCORE data-context factory to use with this repository. IMapper mapper The auto-mapper to use with this repository. ILogger < IProviderParameterRepository > logger The logger to use with this repository. Fields _dbContextFactory This field contains the EFCORE data-context factory for this repository. Declaration protected readonly IDbContextFactory<PurpleDbContext> _dbContextFactory Field Value Type Description IDbContextFactory < PurpleDbContext > _logger This field contains the logger for this repository. Declaration protected readonly ILogger<IProviderParameterRepository> _logger Field Value Type Description ILogger < IProviderParameterRepository > _mapper This field contains the auto-mapper for this repository. Declaration protected readonly IMapper _mapper Field Value Type Description IMapper Methods AnyAsync(CancellationToken) Declaration public virtual async Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Boolean > CountAsync(CancellationToken) Declaration public virtual async Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Int64 > CreateAsync(ProviderParameter, CancellationToken) Declaration public virtual async Task<ProviderParameter> CreateAsync(ProviderParameter providerParameter, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderParameter providerParameter CancellationToken cancellationToken Returns Type Description Task < ProviderParameter > DeleteAsync(ProviderParameter, CancellationToken) Declaration public virtual async Task DeleteAsync(ProviderParameter providerParameter, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderParameter providerParameter CancellationToken cancellationToken Returns Type Description Task UpdateAsync(ProviderParameter, CancellationToken) Declaration public virtual async Task<ProviderParameter> UpdateAsync(ProviderParameter providerParameter, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderParameter providerParameter CancellationToken cancellationToken Returns Type Description Task < ProviderParameter >"
  },
  "api/CG.Purple.SqlServer.Repositories.ProviderTypeRepository.html": {
    "href": "api/CG.Purple.SqlServer.Repositories.ProviderTypeRepository.html",
    "title": "Class ProviderTypeRepository",
    "keywords": "Class ProviderTypeRepository This class is an EFCORE implementation of the interface. Inheritance System.Object ProviderTypeRepository Namespace : CG.Purple.SqlServer.Repositories Assembly : CG.Purple.SqlServer.dll Syntax class ProviderTypeRepository : IProviderTypeRepository Constructors ProviderTypeRepository(IDbContextFactory<PurpleDbContext>, IMapper, ILogger<IProviderTypeRepository>) This constructor creates a new instance of the ProviderTypeRepository class. Declaration public ProviderTypeRepository(IDbContextFactory<PurpleDbContext> dbContextFactory, IMapper mapper, ILogger<IProviderTypeRepository> logger) Parameters Type Name Description IDbContextFactory < PurpleDbContext > dbContextFactory The EFCORE data-context factory to use with this repository. IMapper mapper The auto-mapper to use with this repository. ILogger < IProviderTypeRepository > logger The logger to use with this repository. Fields _dbContextFactory This field contains the EFCORE data-context factory for this repository. Declaration protected readonly IDbContextFactory<PurpleDbContext> _dbContextFactory Field Value Type Description IDbContextFactory < PurpleDbContext > _logger This field contains the logger for this repository. Declaration protected readonly ILogger<IProviderTypeRepository> _logger Field Value Type Description ILogger < IProviderTypeRepository > _mapper This field contains the auto-mapper for this repository. Declaration protected readonly IMapper _mapper Field Value Type Description IMapper Methods AnyAsync(CancellationToken) Declaration public virtual async Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Boolean > CountAsync(CancellationToken) Declaration public virtual async Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Int64 > CreateAsync(ProviderType, CancellationToken) Declaration public virtual async Task<ProviderType> CreateAsync(ProviderType providerType, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderType providerType CancellationToken cancellationToken Returns Type Description Task < ProviderType > DeleteAsync(ProviderType, CancellationToken) Declaration public virtual async Task DeleteAsync(ProviderType providerType, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderType providerType CancellationToken cancellationToken Returns Type Description Task FindAllAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<ProviderType>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < ProviderType >> FindByIdAsync(Int32, CancellationToken) Declaration public virtual async Task<ProviderType?> FindByIdAsync(int id, CancellationToken cancellationToken = null) Parameters Type Name Description System.Int32 id CancellationToken cancellationToken Returns Type Description Task < System.Nullable < ProviderType >> FindByNameAsync(String, CancellationToken) Declaration public virtual async Task<ProviderType?> FindByNameAsync(string name, CancellationToken cancellationToken = null) Parameters Type Name Description System.String name CancellationToken cancellationToken Returns Type Description Task < System.Nullable < ProviderType >> FindForEmailsAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<ProviderType>> FindForEmailsAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < ProviderType >> FindForTextsAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<ProviderType>> FindForTextsAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < ProviderType >> UpdateAsync(ProviderType, CancellationToken) Declaration public virtual async Task<ProviderType> UpdateAsync(ProviderType providerType, CancellationToken cancellationToken = null) Parameters Type Name Description ProviderType providerType CancellationToken cancellationToken Returns Type Description Task < ProviderType >"
  },
  "api/CG.Purple.SqlServer.Repositories.TextMessageRepository.html": {
    "href": "api/CG.Purple.SqlServer.Repositories.TextMessageRepository.html",
    "title": "Class TextMessageRepository",
    "keywords": "Class TextMessageRepository This class is an EFCORE implementation of the interface. Inheritance System.Object TextMessageRepository Namespace : CG.Purple.SqlServer.Repositories Assembly : CG.Purple.SqlServer.dll Syntax class TextMessageRepository : ITextMessageRepository Constructors TextMessageRepository(IDbContextFactory<PurpleDbContext>, IMapper, ILogger<ITextMessageRepository>) This constructor creates a new instance of the TextMessageRepository class. Declaration public TextMessageRepository(IDbContextFactory<PurpleDbContext> dbContextFactory, IMapper mapper, ILogger<ITextMessageRepository> logger) Parameters Type Name Description IDbContextFactory < PurpleDbContext > dbContextFactory The EFCORE data-context factory to use with this repository. IMapper mapper The auto-mapper to use with this repository. ILogger < ITextMessageRepository > logger The logger to use with this repository. Fields _dbContextFactory This field contains the EFCORE data-context factory for this repository. Declaration protected readonly IDbContextFactory<PurpleDbContext> _dbContextFactory Field Value Type Description IDbContextFactory < PurpleDbContext > _logger This field contains the logger for this repository. Declaration protected readonly ILogger<ITextMessageRepository> _logger Field Value Type Description ILogger < ITextMessageRepository > _mapper This field contains the auto-mapper for this repository. Declaration protected readonly IMapper _mapper Field Value Type Description IMapper Methods AnyAsync(CancellationToken) Declaration public virtual async Task<bool> AnyAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Boolean > CountAsync(CancellationToken) Declaration public virtual async Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Int64 > CreateAsync(TextMessage, CancellationToken) Declaration public virtual async Task<TextMessage> CreateAsync(TextMessage textMessage, CancellationToken cancellationToken = null) Parameters Type Name Description TextMessage textMessage CancellationToken cancellationToken Returns Type Description Task < TextMessage > FindAllAsync(CancellationToken) Declaration public virtual async Task<IEnumerable<TextMessage>> FindAllAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < TextMessage >> FindByIdAsync(Int64, CancellationToken) Declaration public virtual async Task<TextMessage?> FindByIdAsync(long id, CancellationToken cancellationToken = null) Parameters Type Name Description System.Int64 id CancellationToken cancellationToken Returns Type Description Task < System.Nullable < TextMessage >> FindByKeyAsync(String, CancellationToken) Declaration public virtual async Task<TextMessage?> FindByKeyAsync(string messageKey, CancellationToken cancellationToken = null) Parameters Type Name Description System.String messageKey CancellationToken cancellationToken Returns Type Description Task < System.Nullable < TextMessage >> UpdateAsync(TextMessage, CancellationToken) Declaration public virtual async Task<TextMessage> UpdateAsync(TextMessage textMessage, CancellationToken cancellationToken = null) Parameters Type Name Description TextMessage textMessage CancellationToken cancellationToken Returns Type Description Task < TextMessage >"
  },
  "api/Microsoft.AspNetCore.Builder.html": {
    "href": "api/Microsoft.AspNetCore.Builder.html",
    "title": "Namespace Microsoft.AspNetCore.Builder",
    "keywords": "Namespace Microsoft.AspNetCore.Builder Classes WebApplicationBuilderExtensions001 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplicationBuilder type. WebApplicationBuilderExtensions002 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplicationBuilder type. WebApplicationBuilderExtensions003 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplicationBuilder type. WebApplicationBuilderExtensions006 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplicationBuilder type. WebApplicationBuilderExtensions008 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplicationBuilder type. WebApplicationExtensions001 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplication type. WebApplicationExtensions002 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplication type. WebApplicationExtensions006 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplication type."
  },
  "api/Microsoft.AspNetCore.Builder.WebApplicationBuilderExtensions001.html": {
    "href": "api/Microsoft.AspNetCore.Builder.WebApplicationBuilderExtensions001.html",
    "title": "Class WebApplicationBuilderExtensions001",
    "keywords": "Class WebApplicationBuilderExtensions001 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplicationBuilder type. Inheritance System.Object WebApplicationBuilderExtensions001 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.AspNetCore.Builder Assembly : CG.Purple.dll Syntax public static class WebApplicationBuilderExtensions001 Methods AddBusinessLayer(WebApplicationBuilder, String, Nullable<ILogger>) This method adds the business logic layer (managers and directors) for the CG.Purple project. Declaration public static WebApplicationBuilder AddBusinessLayer(this WebApplicationBuilder webApplicationBuilder, string sectionName = \"BLL\", ILogger? bootstrapLogger = null) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplicationBuilder webApplicationBuilder The web application builder to use for the operation. System.String sectionName The configuration section to use for the operation. Defaults to BLL . System.Nullable < ILogger > bootstrapLogger The bootstrap logger to use for the operation. Returns Type Description Microsoft.AspNetCore.Builder.WebApplicationBuilder The value of the webApplicationBuilder parameter, for chaining calls together, Fluent style."
  },
  "api/Microsoft.AspNetCore.Builder.WebApplicationBuilderExtensions002.html": {
    "href": "api/Microsoft.AspNetCore.Builder.WebApplicationBuilderExtensions002.html",
    "title": "Class WebApplicationBuilderExtensions002",
    "keywords": "Class WebApplicationBuilderExtensions002 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplicationBuilder type. Inheritance System.Object WebApplicationBuilderExtensions002 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.AspNetCore.Builder Assembly : CG.Purple.Seeding.dll Syntax public static class WebApplicationBuilderExtensions002 Methods AddSeedingLayer(WebApplicationBuilder, String, Nullable<ILogger>) This method adds the data seeding layer for the CG.Purple project. Declaration public static WebApplicationBuilder AddSeedingLayer(this WebApplicationBuilder webApplicationBuilder, string sectionName = \"Seeding\", ILogger? bootstrapLogger = null) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplicationBuilder webApplicationBuilder The web application builder to use for the operation. System.String sectionName The configuration section to use for the operation. Defaults to: Seeding System.Nullable < ILogger > bootstrapLogger The bootstrap logger to use for the operation. Returns Type Description Microsoft.AspNetCore.Builder.WebApplicationBuilder The value of the webApplicationBuilder parameter, for chaining calls together, Fluent style."
  },
  "api/Microsoft.AspNetCore.Builder.WebApplicationBuilderExtensions003.html": {
    "href": "api/Microsoft.AspNetCore.Builder.WebApplicationBuilderExtensions003.html",
    "title": "Class WebApplicationBuilderExtensions003",
    "keywords": "Class WebApplicationBuilderExtensions003 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplicationBuilder type. Inheritance System.Object WebApplicationBuilderExtensions003 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.AspNetCore.Builder Assembly : CG.Purple.Providers.Smtp.dll Syntax public static class WebApplicationBuilderExtensions003 Methods AddSmtpProvider(WebApplicationBuilder, Nullable<ILogger>) This method adds the \"SMTP\" provider for the CG.Purple project. Declaration public static WebApplicationBuilder AddSmtpProvider(this WebApplicationBuilder webApplicationBuilder, ILogger? bootstrapLogger = null) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplicationBuilder webApplicationBuilder The web application builder to use for the operation. System.Nullable < ILogger > bootstrapLogger A bootstrap logger to use for the operation. Returns Type Description Microsoft.AspNetCore.Builder.WebApplicationBuilder The value of the webApplicationBuilder parameter, for chaining calls together, Fluent style."
  },
  "api/Microsoft.AspNetCore.Builder.WebApplicationBuilderExtensions006.html": {
    "href": "api/Microsoft.AspNetCore.Builder.WebApplicationBuilderExtensions006.html",
    "title": "Class WebApplicationBuilderExtensions006",
    "keywords": "Class WebApplicationBuilderExtensions006 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplicationBuilder type. Inheritance System.Object WebApplicationBuilderExtensions006 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.AspNetCore.Builder Assembly : CG.Purple.Providers.dll Syntax public static class WebApplicationBuilderExtensions006 Methods AddProviderLayer(WebApplicationBuilder, Nullable<ILogger>) This method adds the SignalR types for the provider layer (yeah I know it's not technically a 'layer'. Work with me here ...) for the CG.Purple project. Declaration public static WebApplicationBuilder AddProviderLayer(this WebApplicationBuilder webApplicationBuilder, ILogger? bootstrapLogger = null) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplicationBuilder webApplicationBuilder The web application builder to use for the operation. System.Nullable < ILogger > bootstrapLogger The bootstrap logger to use for the operation. Returns Type Description Microsoft.AspNetCore.Builder.WebApplicationBuilder The value of the webApplicationBuilder parameter, for chaining calls together, Fluent style."
  },
  "api/Microsoft.AspNetCore.Builder.WebApplicationBuilderExtensions008.html": {
    "href": "api/Microsoft.AspNetCore.Builder.WebApplicationBuilderExtensions008.html",
    "title": "Class WebApplicationBuilderExtensions008",
    "keywords": "Class WebApplicationBuilderExtensions008 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplicationBuilder type. Inheritance System.Object WebApplicationBuilderExtensions008 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.AspNetCore.Builder Assembly : CG.Purple.Host.Controllers.dll Syntax public static class WebApplicationBuilderExtensions008 Methods AddControllerLayer(WebApplicationBuilder, Nullable<ILogger>) This method adds the REST controller layer (yeah I know it's not technically a 'layer'. Work with me here ...) for the CG.Purple project. Declaration public static WebApplicationBuilder AddControllerLayer(this WebApplicationBuilder webApplicationBuilder, ILogger? bootstrapLogger = null) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplicationBuilder webApplicationBuilder The web application builder to use for the operation. System.Nullable < ILogger > bootstrapLogger The bootstrap logger to use for the operation. Returns Type Description Microsoft.AspNetCore.Builder.WebApplicationBuilder The value of the webApplicationBuilder parameter, for chaining calls together, Fluent style."
  },
  "api/Microsoft.AspNetCore.Builder.WebApplicationExtensions001.html": {
    "href": "api/Microsoft.AspNetCore.Builder.WebApplicationExtensions001.html",
    "title": "Class WebApplicationExtensions001",
    "keywords": "Class WebApplicationExtensions001 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplication type. Inheritance System.Object WebApplicationExtensions001 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.AspNetCore.Builder Assembly : CG.Purple.Seeding.dll Syntax public static class WebApplicationExtensions001 Methods PerformSeeding(WebApplication, IConfiguration, String, String, SeedStartupOptions) This method iterates through the given list of file names and performs a seeding operation on each one. Declaration static void PerformSeeding(this WebApplication webApplication, IConfiguration configuration, string fileName, string userName, SeedStartupOptions seedStartupOptions) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplication webApplication The web application to use for the operation. IConfiguration configuration The configuration to use for the seeding operation. System.String fileName The file name to use for the operation. System.String userName The name of the user performing the operation. SeedStartupOptions seedStartupOptions The seed startup options to use for the operation. PerformSeeding(WebApplication, List<String>, String, SeedStartupOptions) This method iterates through the given list of file names and performs a seeding operation on each one. Declaration static void PerformSeeding(this WebApplication webApplication, List<string> fileNames, string userName, SeedStartupOptions seedStartupOptions) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplication webApplication The web application to use for the operation. List < System.String > fileNames The list of file names to use for the operation. System.String userName The name of the user performing the operation. SeedStartupOptions seedStartupOptions The seed startup options to use for the operation. UseStartupSeeding(WebApplication) This method runs the startup seeding logic for the CG.Purple project. Declaration public static WebApplication UseStartupSeeding(this WebApplication webApplication) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplication webApplication The web application to use for the operation. Returns Type Description Microsoft.AspNetCore.Builder.WebApplication The value of the webApplication parameter, for chaining calls together, Fluent style."
  },
  "api/Microsoft.AspNetCore.Builder.WebApplicationExtensions002.html": {
    "href": "api/Microsoft.AspNetCore.Builder.WebApplicationExtensions002.html",
    "title": "Class WebApplicationExtensions002",
    "keywords": "Class WebApplicationExtensions002 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplication type. Inheritance System.Object WebApplicationExtensions002 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.AspNetCore.Builder Assembly : CG.Purple.SqlServer.dll Syntax public static class WebApplicationExtensions002 Methods DropAndRecreateDatabaseAsync(WebApplication, CancellationToken) This method drops and recreates the database. Declaration static async Task DropAndRecreateDatabaseAsync(this WebApplication webApplication, CancellationToken cancellationToken = null) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplication webApplication The web application to use for the operation. CancellationToken cancellationToken A cancellation token that is monitored throughout the lifetime of the method. Returns Type Description Task A task to perform the operation. MigrateDatabaseAsync(WebApplication, CancellationToken) This method migrates the database. project. Declaration static async Task MigrateDatabaseAsync(this WebApplication webApplication, CancellationToken cancellationToken = null) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplication webApplication The web application to use for the operation. CancellationToken cancellationToken A cancellation token that is monitored for the life of the operation. Returns Type Description Task A task to perform the operation. UseDalStartup(WebApplication) This method runs the DAL startup logic for the CG.Purple project. Declaration public static WebApplication UseDalStartup(this WebApplication webApplication) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplication webApplication The web application to use for the operation. Returns Type Description Microsoft.AspNetCore.Builder.WebApplication The value of the webApplication parameter, for chaining calls together, Fluent style."
  },
  "api/Microsoft.AspNetCore.Builder.WebApplicationExtensions006.html": {
    "href": "api/Microsoft.AspNetCore.Builder.WebApplicationExtensions006.html",
    "title": "Class WebApplicationExtensions006",
    "keywords": "Class WebApplicationExtensions006 This class contains extension methods related to the Microsoft.AspNetCore.Builder.WebApplication type. Inheritance System.Object WebApplicationExtensions006 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.AspNetCore.Builder Assembly : CG.Purple.Providers.dll Syntax public static class WebApplicationExtensions006 Methods UseProviderLayer(WebApplication) This method adds pipeline logic related to the hosted services layer (yeah I know it's not technically a 'layer'. Work with me here ...) for the CG.Purple project. Declaration public static WebApplication UseProviderLayer(this WebApplication webApplication) Parameters Type Name Description Microsoft.AspNetCore.Builder.WebApplication webApplication The web application to use for the operation. Returns Type Description Microsoft.AspNetCore.Builder.WebApplication The value of the webApplication parameter, for chaining calls together, Fluent style."
  },
  "api/System.html": {
    "href": "api/System.html",
    "title": "Namespace System",
    "keywords": "Namespace System Classes StringExtensions This class contains extension methods related to the System.String type."
  },
  "api/System.StringExtensions.html": {
    "href": "api/System.StringExtensions.html",
    "title": "Class StringExtensions",
    "keywords": "Class StringExtensions This class contains extension methods related to the System.String type. Inheritance System.Object StringExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : System Assembly : CG.Purple.Host.dll Syntax static class StringExtensions Methods Truncate(String, Int32) This method trims the length of the given string to, at most, maxLength characters. A trailing ellipse is added to the end of the string, if characters are trimmed. Declaration public static string Truncate(this string value, int maxLength) Parameters Type Name Description System.String value The string to use for the operation. System.Int32 maxLength The maximum number of character to allow in the return string. Returns Type Description System.String A trimmed version of value ."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction",
    "keywords": "Introduction CG.Purple is an idea for a self contained messaging microservice."
  }
}